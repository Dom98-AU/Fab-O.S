# Migrate from Docker SQL to Azure SQL Database
param(
    [Parameter(Mandatory=$true)]
    [string]$AzureUsername,
    
    [Parameter(Mandatory=$true)]
    [string]$AzurePassword,
    
    [string]$DockerContainer = "steel-estimation-sql",
    [string]$BackupPath = ".\migration-backup.bak"
)

Write-Host "=== Migration to Azure SQL Database ===" -ForegroundColor Cyan
Write-Host "Target: nwiapps.database.windows.net / sqldb-steel-estimation-sandbox" -ForegroundColor Yellow

# Step 1: Create backup from Docker
Write-Host "`n[1/5] Creating backup from Docker SQL..." -ForegroundColor Green
docker exec $DockerContainer /opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P 'YourStrong@Password123' -C -Q "BACKUP DATABASE SteelEstimationDB TO DISK = '/var/opt/mssql/backup/migration.bak' WITH FORMAT, INIT"

# Step 2: Copy backup locally
Write-Host "`n[2/5] Copying backup file..." -ForegroundColor Green
docker cp "${DockerContainer}:/var/opt/mssql/backup/migration.bak" $BackupPath

# Step 3: Export to BACPAC format (Azure SQL compatible)
Write-Host "`n[3/5] Converting to Azure-compatible format..." -ForegroundColor Green

# Create a temporary container for conversion
docker run -d --name sql-temp -e "ACCEPT_EULA=Y" -e "MSSQL_SA_PASSWORD=TempPass123!" mcr.microsoft.com/mssql/server:2022-latest

Start-Sleep -Seconds 20

# Restore to temp container
docker cp $BackupPath sql-temp:/var/opt/mssql/backup/
docker exec sql-temp /opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P 'TempPass123!' -C -Q "RESTORE DATABASE TempDB FROM DISK = '/var/opt/mssql/backup/migration.bak' WITH REPLACE, MOVE 'SteelEstimationDb' TO '/var/opt/mssql/data/TempDB.mdf', MOVE 'SteelEstimationDb_log' TO '/var/opt/mssql/data/TempDB_log.ldf'"

# Export schema and data as SQL scripts
Write-Host "`n[4/5] Generating Azure SQL scripts..." -ForegroundColor Green

# Export schema
$schemaScript = @"
-- Create schema script for Azure SQL
USE master;
GO

-- Check if database exists
IF EXISTS (SELECT name FROM sys.databases WHERE name = 'sqldb-steel-estimation-sandbox')
BEGIN
    PRINT 'Database exists, switching context...'
END
GO

USE [sqldb-steel-estimation-sandbox];
GO

-- Script will be generated by next command
"@

# Generate scripts using mssql-scripter
docker run --rm -v ${PWD}:/scripts mcr.microsoft.com/mssql-tools bash -c "
pip install mssql-scripter && 
mssql-scripter -S sql-temp -U sa -P 'TempPass123!' -d TempDB --schema-and-data -f /scripts/azure-migration.sql
"

# Clean up temp container
docker stop sql-temp
docker rm sql-temp

# Step 5: Apply to Azure SQL
Write-Host "`n[5/5] Applying to Azure SQL Database..." -ForegroundColor Green

# Test connection first
docker run --rm mcr.microsoft.com/mssql-tools /opt/mssql-tools18/bin/sqlcmd `
    -S "nwiapps.database.windows.net" `
    -d "sqldb-steel-estimation-sandbox" `
    -U $AzureUsername `
    -P $AzurePassword `
    -C `
    -Q "SELECT @@VERSION"

if ($LASTEXITCODE -eq 0) {
    Write-Host "Connection successful! Applying migration..." -ForegroundColor Green
    
    # Apply the migration
    docker run --rm -v ${PWD}:/scripts mcr.microsoft.com/mssql-tools /opt/mssql-tools18/bin/sqlcmd `
        -S "nwiapps.database.windows.net" `
        -d "sqldb-steel-estimation-sandbox" `
        -U $AzureUsername `
        -P $AzurePassword `
        -C `
        -i /scripts/azure-migration.sql
        
    Write-Host "`n=== Migration Complete! ===" -ForegroundColor Green
    Write-Host "Your data has been migrated to Azure SQL Database" -ForegroundColor Cyan
    
    # Update .env.azure file
    @"
# Azure SQL Database Configuration
AZURE_SQL_SERVER=nwiapps.database.windows.net
AZURE_SQL_DATABASE=sqldb-steel-estimation-sandbox
AZURE_SQL_USER=$AzureUsername
AZURE_SQL_PASSWORD=$AzurePassword
"@ | Out-File -FilePath ".env.azure" -Encoding UTF8
    
    Write-Host "`nTo use Azure SQL, run:" -ForegroundColor Yellow
    Write-Host "docker-compose -f docker-compose.azure.yml --env-file .env.azure up -d" -ForegroundColor Cyan
    
} else {
    Write-Host "Connection failed! Please check:" -ForegroundColor Red
    Write-Host "1. Username and password are correct" -ForegroundColor Yellow
    Write-Host "2. Your IP is whitelisted in Azure SQL firewall" -ForegroundColor Yellow
    Write-Host "3. The database name is correct" -ForegroundColor Yellow
}

# Cleanup
Remove-Item $BackupPath -Force -ErrorAction SilentlyContinue