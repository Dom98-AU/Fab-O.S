@using SteelEstimation.Web.Data
@using System.Text.Json

<div class="enhanced-avatar-selector-redesigned">
    <div class="avatar-selector-layout">
        
        <!-- Fixed Avatar Preview Sidebar -->
        <div class="avatar-preview-sidebar">
            <h5 class="mb-3">Avatar Preview</h5>
            <div class="current-avatar text-center">
                <div class="large-avatar-preview">
                    @if (!string.IsNullOrEmpty(GetCurrentSelectedStyle()))
                    {
                        var avatarUrl = GenerateCustomizedAvatarUrl();
                        <img src="@avatarUrl" alt="DiceBear Avatar" class="dicebear-large-preview" width="120" height="120" loading="eager" />
                        <p class="mt-3 mb-2 fw-bold">@(DiceBearAvatars.GetById(GetCurrentSelectedStyle())?.Name ?? GetCurrentSelectedStyle())</p>
                        <small class="text-muted">@(DiceBearAvatars.GetById(GetCurrentSelectedStyle())?.Description ?? "")</small>
                    }
                    else
                    {
                        <div class="placeholder-avatar">
                            <i class="fas fa-user-circle avatar-icon-large"></i>
                            <p class="mt-3 mb-0">Select Avatar Style</p>
                        </div>
                    }
                </div>
                
                @if (!string.IsNullOrEmpty(GetCurrentSelectedStyle()))
                {
                    <!-- Quick Actions -->
                    <div class="quick-actions mt-3">
                        <button type="button" class="btn btn-outline-primary btn-sm" @onclick="GenerateRandomSeed" @onclick:preventDefault="true">
                            <i class="fas fa-dice"></i> Random
                        </button>
                        @if (SupportsFlip(GetCurrentSelectedStyle()))
                        {
                            <button type="button" class="btn btn-outline-secondary btn-sm @(flipAvatar ? "active" : "")" 
                                    @onclick="@(() => { flipAvatar = !flipAvatar; UpdateDiceBearPreview(); })" @onclick:preventDefault="true">
                                <i class="fas fa-exchange-alt"></i> Flip
                            </button>
                        }
                    </div>
                    
                    <!-- Style Info -->
                    <div class="style-info-compact mt-3">
                        @{
                            var selectedStyle = DiceBearAvatars.GetById(GetCurrentSelectedStyle());
                            if (selectedStyle != null)
                            {
                                <p class="small text-muted mb-1">
                                    <strong>License:</strong> @selectedStyle.License
                                </p>
                                @if (!string.IsNullOrEmpty(selectedStyle.Creator))
                                {
                                    <p class="small text-muted mb-0">
                                        <strong>Creator:</strong> @selectedStyle.Creator
                                    </p>
                                }
                            }
                        }
                    </div>
                }
            </div>
        </div>
        
        <!-- Scrollable Customization Content -->
        <div class="customization-content">

            <!-- Style Selection -->
            <div class="section-card mb-4">
                <h6 class="section-title"><i class="fas fa-palette"></i> Avatar Style</h6>
                @foreach (var category in DiceBearAvatars.AvailableStyles.GroupBy(a => a.Category))
                {
                    <div class="dicebear-category mb-3">
                        <h6 class="category-title">@category.Key</h6>
                        <div class="dicebear-styles-grid">
                            @foreach (var style in category)
                            {
                                <div class="dicebear-style-option @(GetCurrentSelectedStyle() == style.Id ? "selected" : "")"
                                     @onclick="() => SelectDiceBearStyle(style.Id)"
                                     title="@style.Description">
                                    <img src="@DiceBearAvatars.GenerateAvatarUrl(style.Id, SelectedDiceBearSeed ?? "preview", "svg")" 
                                         alt="@style.Name" class="dicebear-style-preview" width="50" height="50" loading="eager" />
                                    <div class="style-name">@style.Name</div>
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>

            @if (!string.IsNullOrEmpty(GetCurrentSelectedStyle()))
            {
                <!-- Seed Input -->
                <div class="section-card mb-4">
                    <h6 class="section-title"><i class="fas fa-seedling"></i> Avatar Seed</h6>
                    <div class="seed-controls">
                        <input type="text" class="form-control" @bind="SelectedDiceBearSeed" @bind:event="onchange" @bind:after="UpdateDiceBearPreview"
                               placeholder="Enter text for unique avatar" />
                    </div>
                    <small class="text-muted">Each unique seed generates a different avatar appearance</small>
                </div>


                <!-- Customization Options -->
                @if (HasStyleCustomization(GetCurrentSelectedStyle()))
                {
                    <div class="section-card">
                        <h6 class="section-title"><i class="fas fa-sliders-h"></i> Customize Your Avatar</h6>
                        
                        @{
                            var currentStyle = GetCurrentSelectedStyle();
                        }
                        
                        @* Adventurer Style Customization *@
                        @if (currentStyle == "adventurer")
                        {
                            @RenderAdventurerCustomization()
                        }
                        
                        @* Bottts Style Customization *@
                        @if (currentStyle == "bottts")
                        {
                            @RenderBotttsCustomization()
                        }
                        
                        @* Avataaars Style Customization *@
                        @if (currentStyle == "avataaars")
                        {
                            @RenderAvataaarsCustomization()
                        }
                        
                        @* Identicon Style Customization *@
                        @if (currentStyle == "identicon")
                        {
                            @RenderIdenticonCustomization()
                        }
                        
                        @* Big Smile Style Customization *@
                        @if (currentStyle == "big-smile")
                        {
                            @RenderBigSmileCustomization()
                        }
                        
                        @* Micah Style Customization *@
                        @if (currentStyle == "micah")
                        {
                            @RenderMicahCustomization()
                        }
                        
                    </div>
                }
            }
        </div>
    </div>
</div>

<style>
    .enhanced-avatar-selector-redesigned {
        width: 100%;
        max-width: 1200px;
    }
    
    .avatar-selector-layout {
        display: grid;
        grid-template-columns: 300px 1fr;
        gap: 30px;
        min-height: 600px;
    }
    
    .avatar-preview-sidebar {
        position: sticky;
        top: 20px;
        height: fit-content;
        background: #f8f9fa;
        border-radius: 15px;
        padding: 25px;
        border: 1px solid #e9ecef;
        box-shadow: 0 2px 10px rgba(0,0,0,0.05);
    }
    
    .customization-content {
        overflow-y: auto;
        max-height: 80vh;
        padding-right: 10px;
    }
    
    .section-card {
        background: white;
        border-radius: 12px;
        padding: 20px;
        border: 1px solid #e9ecef;
        box-shadow: 0 2px 4px rgba(0,0,0,0.02);
    }
    
    .section-title {
        color: #495057;
        margin-bottom: 20px;
        font-size: 1rem;
        font-weight: 600;
        display: flex;
        align-items: center;
        gap: 8px;
    }
    
    .section-title i {
        color: #0d1a80;
    }

    .large-avatar-preview {
        text-align: center;
        padding: 20px;
        background: white;
        border-radius: 15px;
        border: 2px solid #e9ecef;
        margin-bottom: 20px;
    }
    
    .placeholder-avatar {
        padding: 40px 20px;
        color: #6c757d;
    }

    .avatar-icon-large {
        font-size: 5rem;
        color: #495057;
    }

    .dicebear-large-preview {
        width: 120px;
        height: 120px;
        border-radius: 50%;
        border: 3px solid #fff;
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
    }
    
    .quick-actions {
        display: flex;
        gap: 8px;
        justify-content: center;
    }
    
    .quick-actions .btn {
        font-size: 0.8rem;
        padding: 5px 12px;
    }
    
    .style-info-compact {
        text-align: left;
        background: #f8f9fa;
        padding: 12px;
        border-radius: 8px;
        border-left: 3px solid #0d1a80;
    }

    .avatar-category {
        margin-bottom: 2rem;
    }

    .dicebear-category {
        margin-bottom: 2rem;
    }

    .category-title {
        color: #495057;
        margin-bottom: 1rem;
        font-size: 1rem;
        font-weight: 600;
    }

    .dicebear-styles-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
        gap: 15px;
    }

    .dicebear-style-option {
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 15px;
        background: #f8f9fa;
        border: 2px solid #dee2e6;
        border-radius: 10px;
        cursor: pointer;
        transition: all 0.2s ease;
        text-align: center;
    }

    .dicebear-style-option:hover {
        background: #e9ecef;
        border-color: #adb5bd;
        transform: translateY(-2px);
    }

    .dicebear-style-option.selected {
        background: #0d1a80;
        border-color: #0d1a80;
        color: white;
    }

    .dicebear-style-preview {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        margin-bottom: 8px;
    }

    .style-name {
        font-size: 0.875rem;
        font-weight: 500;
    }

    .seed-controls {
        display: flex;
        gap: 10px;
        align-items: center;
    }

    .seed-controls input {
        flex: 1;
    }

    .style-info {
        background: #f8f9fa;
        padding: 15px;
        border-radius: 8px;
        border-left: 4px solid #0d1a80;
    }

    @@media (max-width: 576px) {
        .dicebear-styles-grid {
            grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
        }
    }

    /* Mobile Responsive */
    @@media (max-width: 768px) {
        .avatar-selector-layout {
            grid-template-columns: 1fr;
            gap: 20px;
        }
        
        .avatar-preview-sidebar {
            position: relative;
            top: auto;
        }
        
        .customization-content {
            max-height: none;
        }
    }

    .customization-group {
        margin-bottom: 20px;
    }

    .color-picker-group {
        margin-bottom: 15px;
    }

    .color-picker-group label {
        display: block;
        font-size: 0.875rem;
        font-weight: 500;
        color: #495057;
        margin-bottom: 8px;
    }

    .color-swatches {
        display: flex;
        flex-wrap: wrap;
        gap: 8px;
    }

    .color-swatch {
        width: 32px;
        height: 32px;
        border-radius: 8px;
        cursor: pointer;
        border: 2px solid transparent;
        transition: all 0.2s ease;
        position: relative;
    }

    .color-swatch:hover {
        transform: scale(1.1);
        box-shadow: 0 2px 8px rgba(0,0,0,0.2);
    }

    .color-swatch.active {
        border-color: #0d1a80;
        box-shadow: 0 0 0 3px rgba(13, 26, 128, 0.2);
    }

    .color-swatch.transparent {
        background: linear-gradient(45deg, #ddd 25%, transparent 25%),
                    linear-gradient(-45deg, #ddd 25%, transparent 25%),
                    linear-gradient(45deg, transparent 75%, #ddd 75%),
                    linear-gradient(-45deg, transparent 75%, #ddd 75%);
        background-size: 16px 16px;
        background-position: 0 0, 0 8px, 8px -8px, -8px 0px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .color-swatch.transparent i {
        font-size: 14px;
        color: #6c757d;
    }

    .accessory-options {
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

    .form-check-input:checked {
        background-color: #0d1a80;
        border-color: #0d1a80;
    }

    .form-check-input:focus {
        border-color: #0d1a80;
        box-shadow: 0 0 0 0.25rem rgba(13, 26, 128, 0.25);
    }

    /* Visual Option Buttons with Icons */
    .visual-option-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(90px, 1fr));
        gap: 10px;
        margin-top: 12px;
    }
    
    .visual-option-btn {
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 12px 8px;
        background: #f8f9fa;
        border: 2px solid #e9ecef;
        border-radius: 10px;
        cursor: pointer;
        transition: all 0.2s ease;
        text-align: center;
        min-height: 70px;
        justify-content: center;
    }
    
    .visual-option-btn:hover {
        background: #e9ecef;
        border-color: #adb5bd;
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }
    
    .visual-option-btn.active {
        background: #0d1a80;
        border-color: #0d1a80;
        color: white;
        box-shadow: 0 4px 12px rgba(13, 26, 128, 0.3);
    }
    
    .visual-option-btn i {
        font-size: 1.5rem;
        margin-bottom: 4px;
    }
    
    .visual-option-btn .dicebear-part-preview {
        width: 40px;
        height: 40px;
        object-fit: contain;
        margin-bottom: 4px;
    }
    
    .visual-option-btn.active .dicebear-part-preview {
        filter: brightness(0) invert(1);
    }
    
    .dicebear-preview-wrapper {
        width: 60px;
        height: 60px;
        display: flex;
        align-items: center;
        justify-content: center;
        background: #f8f9fa;
        border-radius: 8px;
        overflow: hidden;
    }
    
    .dicebear-preview-bg {
        background-size: contain !important;
        background-repeat: no-repeat !important;
        background-position: center !important;
    }
    
    .visual-option-btn .dicebear-full-preview {
        width: 100%;
        height: 100%;
        object-fit: contain;
    }
    
    .visual-option-btn.active .dicebear-full-preview {
        background: #0d1a80;
        box-shadow: 0 0 0 2px #0d1a80;
    }
    
    .visual-option-btn .option-label {
        font-size: 0.7rem;
        font-weight: 500;
        text-transform: capitalize;
        line-height: 1.2;
    }
    
    .texture-option-btn {
        position: relative;
        overflow: hidden;
    }
    
    .texture-preview {
        width: 100%;
        height: 30px;
        margin-bottom: 4px;
        border-radius: 4px;
    }
    
    .texture-circuits {
        background: linear-gradient(45deg, #4ade80 25%, transparent 25%), 
                    linear-gradient(-45deg, #4ade80 25%, transparent 25%),
                    linear-gradient(45deg, transparent 75%, #4ade80 75%), 
                    linear-gradient(-45deg, transparent 75%, #4ade80 75%);
        background-size: 8px 8px;
        background-position: 0 0, 0 4px, 4px -4px, -4px 0px;
    }
    
    .texture-dots {
        background: radial-gradient(circle, #8b5cf6 2px, transparent 2px);
        background-size: 8px 8px;
    }
    
    .texture-metal {
        background: linear-gradient(90deg, #6b7280 0%, #9ca3af 50%, #6b7280 100%);
    }
    
    .texture-solid {
        background: #374151;
    }

    .form-select-sm {
        font-size: 0.875rem;
        padding: 0.375rem 0.75rem;
    }

    /* Responsive adjustments for customization options */
    @@media (max-width: 576px) {
        .option-buttons .btn {
            font-size: 0.7rem;
            padding: 3px 6px;
        }

        .color-swatches {
            gap: 6px;
        }

        .color-swatch {
            width: 28px;
            height: 28px;
        }
    }
</style>

@code {
    [Parameter] public string? SelectedAvatarType { get; set; } = "dicebear";
    [Parameter] public string? SelectedDiceBearStyle { get; set; }
    [Parameter] public string? SelectedDiceBearSeed { get; set; }
    [Parameter] public string? SelectedDiceBearOptions { get; set; }
    [Parameter] public EventCallback<AvatarSelectionData> OnAvatarSelected { get; set; }

    // Internal state
    private string? _internalSelectedStyle;

    // Customization options
    private Dictionary<string, string> customOptions = new Dictionary<string, string>();
    private bool showGlasses = false;
    private bool showEarrings = false;
    private bool flipAvatar = false;
    
    // Selected colors
    private string selectedSkinColor = "#FDBCB4";
    private string selectedHairColor = "#090806";
    private string selectedBackgroundColor = "transparent";
    private string selectedPrimaryColor = "#0E7490";
    
    // Bottts specific options
    private string selectedEyeType = "eva";
    private string selectedMouthType = "smile01";
    private string selectedSidesType = "antenna01";
    private string selectedTextureType = "circuits";
    
    // Avataaars specific options
    private string selectedTopType = "ShortHairShortFlat";
    private string selectedAccessoryType = "Blank";
    private string selectedFacialHairType = "Blank";
    private string selectedClotheType = "BlazerShirt";
    private string selectedEyeTypeAvataaars = "Default";
    private string selectedEyebrowType = "Default";
    private string selectedMouthTypeAvataaars = "Default";
    
    // Micah specific options
    private string selectedBaseColor = "#FFDBAC";
    private string selectedEarringColor = "#FFD700";
    private string selectedEyebrowColor = "#8B4513";
    private string selectedFacialHairColor = "#8B4513";
    private string selectedGlassesColor = "#000000";
    private string selectedMouthColor = "#FF6B6B";

    // Color palettes
    private readonly string[] skinColors = new[] { 
        "#FDBCB4", "#F1C27D", "#E0AC69", "#C68642", "#8D5524", "#5D4E37", "#3B3024" 
    };
    
    private readonly string[] hairColors = new[] { 
        "#090806", "#2C1B18", "#71635A", "#B7A69E", "#D6BA8D", "#E6CEA8", 
        "#DEBC99", "#B89778", "#A56B46", "#B55239", "#8D4A43", "#91553D", 
        "#533D32", "#3B3024", "#1C1814", "#0E0E0E" 
    };
    
    private readonly string[] backgroundColors = new[] { 
        "#6E7074", "#C29D65", "#E27A79", "#F4CD81", "#F9D5BB", "#FEE4E0", 
        "#B6E3F4", "#C0AEDE", "#D1D4F9", "#FFD5DC", "#FFDFBF", "#A6D8F0" 
    };
    
    private readonly string[] primaryColors = new[] { 
        "#0E7490", "#0891B2", "#06B6D4", "#14B8A6", "#10B981", "#22C55E", 
        "#84CC16", "#EAB308", "#F59E0B", "#F97316", "#EF4444", "#EC4899", 
        "#8B5CF6", "#6366F1", "#3B82F6", "#0EA5E9" 
    };
    
    // Bottts colors for robots
    private readonly string[] robotColors = new[] {
        "#FF5733", "#33FF57", "#3357FF", "#FF33F5", "#F5FF33", "#33FFF5",
        "#FF8C33", "#8C33FF", "#33FF8C", "#FF3333", "#33FF33", "#3333FF"
    };
    
    // Eye types for various styles
    private readonly string[] eyeTypes = new[] {
        "eva", "robocop", "round", "roundFrame01", "roundFrame02", "sensor", "shade01"
    };
    
    // Mouth types for robots
    private readonly string[] mouthTypes = new[] {
        "bite", "diagram", "grill01", "grill02", "smile01", "smile02", "square01", "square02"
    };
    
    // Sides types for Bottts (antennas)
    private readonly string[] sidesTypes = new[] {
        "antenna01", "antenna02", "cables01", "cables02", "round", "square", "squareAsymmetric"
    };
    
    // Texture types for Bottts
    private readonly string[] textureTypes = new[] {
        "circuits", "dots", "metal", "solid"
    };
    
    // Avataaars options
    private readonly string[] topTypes = new[] {
        "NoHair", "Eyepatch", "Hat", "Hijab", "Turban", "WinterHat1", "WinterHat2", "WinterHat3", "WinterHat4",
        "LongHairBigHair", "LongHairBob", "LongHairBun", "LongHairCurly", "LongHairCurvy", "LongHairDreads",
        "LongHairFrida", "LongHairFro", "LongHairFroBand", "LongHairNotTooLong", "LongHairShavedSides",
        "LongHairMiaWallace", "LongHairStraight", "LongHairStraight2", "LongHairStraightStrand",
        "ShortHairDreads01", "ShortHairDreads02", "ShortHairFrizzle", "ShortHairShaggyMullet",
        "ShortHairShortCurly", "ShortHairShortFlat", "ShortHairShortRound", "ShortHairShortWaved",
        "ShortHairSides", "ShortHairTheCaesar", "ShortHairTheCaesarSidePart"
    };
    
    private readonly string[] accessoryTypes = new[] {
        "Blank", "Kurt", "Prescription01", "Prescription02", "Round", "Sunglasses", "Wayfarers"
    };
    
    private readonly string[] facialHairTypes = new[] {
        "Blank", "BeardMedium", "BeardLight", "BeardMajestic", "MoustacheFancy", "MoustacheMagnum"
    };
    
    private readonly string[] clotheTypes = new[] {
        "BlazerShirt", "BlazerSweater", "CollarSweater", "GraphicShirt", "Hoodie", "Overall", "ShirtCrewNeck", "ShirtScoopNeck", "ShirtVNeck"
    };
    
    private readonly string[] eyeTypesAvataaars = new[] {
        "Close", "Cry", "Default", "Dizzy", "EyeRoll", "Happy", "Hearts", "Side", "Squint", "Surprised", "Wink", "WinkWacky"
    };
    
    private readonly string[] eyebrowTypes = new[] {
        "Angry", "AngryNatural", "Default", "DefaultNatural", "FlatNatural", "RaisedExcited", "RaisedExcitedNatural", "SadConcerned", "SadConcernedNatural", "UnibrowNatural", "UpDown", "UpDownNatural"
    };
    
    private readonly string[] mouthTypesAvataaars = new[] {
        "Concerned", "Default", "Disbelief", "Eating", "Grimace", "Sad", "ScreamOpen", "Serious", "Smile", "Tongue", "Twinkle", "Vomit"
    };

    protected override void OnInitialized()
    {
        // Initialize internal state from parameter
        _internalSelectedStyle = SelectedDiceBearStyle;
        
        Console.WriteLine($"[EnhancedAvatarSelector] OnInitialized - Internal Style: {_internalSelectedStyle}, Parameter Style: {SelectedDiceBearStyle}");
        
        // Ensure we have a seed for DiceBear
        if (string.IsNullOrEmpty(SelectedDiceBearSeed))
        {
            SelectedDiceBearSeed = DiceBearAvatars.GenerateRandomSeed();
        }
        
        // Initialize default customization options
        InitializeCustomOptions();
        
        // Load existing options if provided
        if (!string.IsNullOrEmpty(SelectedDiceBearOptions))
        {
            LoadExistingOptions();
        }
    }
    
    private string GetCurrentSelectedStyle()
    {
        var result = _internalSelectedStyle ?? SelectedDiceBearStyle ?? "";
        Console.WriteLine($"[EnhancedAvatarSelector] GetCurrentSelectedStyle returns: '{result}' (internal: '{_internalSelectedStyle}', param: '{SelectedDiceBearStyle}')");
        return result;
    }
    
    private bool HasSelectedStyle()
    {
        var style = GetCurrentSelectedStyle();
        return !string.IsNullOrEmpty(style);
    }
    
    private void LoadExistingOptions()
    {
        try
        {
            var options = System.Text.Json.JsonSerializer.Deserialize<Dictionary<string, object>>(SelectedDiceBearOptions!);
            if (options != null)
            {
                foreach (var kvp in options)
                {
                    if (kvp.Key == "flip" && kvp.Value is System.Text.Json.JsonElement flipElement && flipElement.ValueKind == System.Text.Json.JsonValueKind.True)
                    {
                        flipAvatar = true;
                    }
                    else if (kvp.Key == "glasses" && kvp.Value is System.Text.Json.JsonElement glassesElement)
                    {
                        showGlasses = true;
                    }
                    else if (kvp.Key == "earrings" && kvp.Value is System.Text.Json.JsonElement earringsElement)
                    {
                        showEarrings = true;
                    }
                    else if (kvp.Value is System.Text.Json.JsonElement arrayElement && arrayElement.ValueKind == System.Text.Json.JsonValueKind.Array && arrayElement.GetArrayLength() > 0)
                    {
                        customOptions[kvp.Key] = arrayElement[0].GetString() ?? "";
                    }
                }
            }
        }
        catch { }
    }

    private void InitializeCustomOptions()
    {
        customOptions.Clear();
        showGlasses = false;
        showEarrings = false;
        flipAvatar = false;
        
        // Reset style-specific selections to defaults
        selectedSkinColor = "#FDBCB4";
        selectedHairColor = "#090806";
        selectedBackgroundColor = "transparent";
        selectedPrimaryColor = "#0E7490";
        
        // Bottts specific defaults
        selectedEyeType = "eva";
        selectedMouthType = "smile01";
        selectedSidesType = "antenna01";
        selectedTextureType = "circuits";
        
        // Avataaars specific defaults
        selectedTopType = "ShortHairShortFlat";
        selectedAccessoryType = "Blank";
        selectedFacialHairType = "Blank";
        selectedClotheType = "BlazerShirt";
        selectedEyeTypeAvataaars = "Default";
        selectedEyebrowType = "Default";
        selectedMouthTypeAvataaars = "Default";
        
        // Micah specific defaults
        selectedBaseColor = "#FFDBAC";
        selectedEarringColor = "#FFD700";
        selectedEyebrowColor = "#8B4513";
        selectedFacialHairColor = "#8B4513";
        selectedGlassesColor = "#000000";
        selectedMouthColor = "#FF6B6B";
        
        // Set base options for the current style
        var currentStyle = GetCurrentSelectedStyle();
        if (!string.IsNullOrEmpty(currentStyle))
        {
            switch (currentStyle)
            {
                case "adventurer":
                case "big-smile":
                    customOptions["skinColor"] = selectedSkinColor;
                    customOptions["hairColor"] = selectedHairColor;
                    break;
                    
                case "avataaars":
                    customOptions["skinColor"] = selectedSkinColor;
                    customOptions["hairColor"] = selectedHairColor;
                    break;
                    
                case "bottts":
                    customOptions["primaryColor"] = selectedPrimaryColor;
                    break;
                    
                case "identicon":
                    customOptions["primaryColor"] = selectedPrimaryColor;
                    break;
                    
                case "micah":
                    customOptions["hairColor"] = selectedHairColor;
                    customOptions["baseColor"] = selectedBaseColor;
                    break;
            }
        }
    }

    private async Task SelectDiceBearStyle(string styleId)
    {
        // Set internal state
        _internalSelectedStyle = styleId;
        SelectedDiceBearStyle = styleId;
        SelectedAvatarType = "dicebear";
        
        if (string.IsNullOrEmpty(SelectedDiceBearSeed))
        {
            SelectedDiceBearSeed = DiceBearAvatars.GenerateRandomSeed();
        }
        
        // Reset customization options for new style
        InitializeCustomOptions();
        
        await NotifyDiceBearSelection();
        StateHasChanged();
    }

    private void SelectColor(string optionKey, string color)
    {
        customOptions[optionKey] = color;
        UpdateDiceBearPreview().GetAwaiter().GetResult();
    }
    
    private void SelectSkinColor(string color)
    {
        selectedSkinColor = color;
        customOptions["skinColor"] = color;
        UpdateDiceBearPreview().GetAwaiter().GetResult();
    }
    
    private void SelectHairColor(string color)
    {
        selectedHairColor = color;
        customOptions["hairColor"] = color;
        UpdateDiceBearPreview().GetAwaiter().GetResult();
    }
    
    private void SelectBackgroundColor(string color)
    {
        selectedBackgroundColor = color;
        if (color != "transparent")
        {
            customOptions["backgroundColor"] = color;
        }
        else
        {
            customOptions.Remove("backgroundColor");
        }
        UpdateDiceBearPreview().GetAwaiter().GetResult();
    }

    private async Task GenerateRandomSeed()
    {
        SelectedDiceBearSeed = DiceBearAvatars.GenerateRandomSeed();
        await UpdateDiceBearPreview();
    }

    private async Task UpdateDiceBearPreview()
    {
        if (!string.IsNullOrEmpty(GetCurrentSelectedStyle()))
        {
            await NotifyDiceBearSelection();
        }
        StateHasChanged();
    }

    private async Task NotifyDiceBearSelection()
    {
        var data = new AvatarSelectionData
        {
            AvatarType = "dicebear",
            DiceBearStyle = GetCurrentSelectedStyle(),
            DiceBearSeed = SelectedDiceBearSeed,
            AvatarUrl = GenerateCustomizedAvatarUrl(),
            DiceBearOptions = System.Text.Json.JsonSerializer.Serialize(GetCurrentOptions())
        };
        
        await OnAvatarSelected.InvokeAsync(data);
    }

    private void ForceAdventurerStyle()
    {
        _internalSelectedStyle = "adventurer";
        SelectedDiceBearStyle = "adventurer";
        if (string.IsNullOrEmpty(SelectedDiceBearSeed))
        {
            SelectedDiceBearSeed = DiceBearAvatars.GenerateRandomSeed();
        }
        StateHasChanged();
    }
    
    // Helper methods for style-specific customization support
    private bool HasStyleCustomization(string style)
    {
        return style switch
        {
            "adventurer" or "bottts" or "avataaars" or "identicon" or "big-smile" or "micah" => true,
            _ => false
        };
    }
    
    private bool SupportsFlip(string style)
    {
        return style switch
        {
            "adventurer" or "bottts" or "avataaars" or "big-smile" or "micah" or "lorelei" => true,
            _ => false
        };
    }
    
    // Style-specific option setters
    private void SelectPrimaryColor(string color)
    {
        selectedPrimaryColor = color;
        customOptions["primaryColor"] = color;
        UpdateDiceBearPreview().GetAwaiter().GetResult();
    }
    
    private void SelectEyeType(string eyeType)
    {
        selectedEyeType = eyeType;
        UpdateDiceBearPreview().GetAwaiter().GetResult();
    }
    
    private void SelectMouthType(string mouthType)
    {
        selectedMouthType = mouthType;
        UpdateDiceBearPreview().GetAwaiter().GetResult();
    }
    
    private void SelectSidesType(string sidesType)
    {
        selectedSidesType = sidesType;
        UpdateDiceBearPreview().GetAwaiter().GetResult();
    }
    
    private void SelectTextureType(string textureType)
    {
        selectedTextureType = textureType;
        UpdateDiceBearPreview().GetAwaiter().GetResult();
    }
    
    // Avataaars specific selectors
    private void SelectTopType(string topType)
    {
        selectedTopType = topType;
        UpdateDiceBearPreview().GetAwaiter().GetResult();
    }
    
    private void SelectAccessoryType(string accessoryType)
    {
        selectedAccessoryType = accessoryType;
        UpdateDiceBearPreview().GetAwaiter().GetResult();
    }
    
    private void SelectFacialHairType(string facialHairType)
    {
        selectedFacialHairType = facialHairType;
        UpdateDiceBearPreview().GetAwaiter().GetResult();
    }
    
    private void SelectClotheType(string clotheType)
    {
        selectedClotheType = clotheType;
        UpdateDiceBearPreview().GetAwaiter().GetResult();
    }
    
    private void SelectEyeTypeAvataaars(string eyeType)
    {
        selectedEyeTypeAvataaars = eyeType;
        UpdateDiceBearPreview().GetAwaiter().GetResult();
    }
    
    private void SelectEyebrowType(string eyebrowType)
    {
        selectedEyebrowType = eyebrowType;
        UpdateDiceBearPreview().GetAwaiter().GetResult();
    }
    
    private void SelectMouthTypeAvataaars(string mouthType)
    {
        selectedMouthTypeAvataaars = mouthType;
        UpdateDiceBearPreview().GetAwaiter().GetResult();
    }
    
    // Micah specific selectors
    private void SelectBaseColor(string color)
    {
        selectedBaseColor = color;
        UpdateDiceBearPreview().GetAwaiter().GetResult();
    }
    
    private void SelectEarringColor(string color)
    {
        selectedEarringColor = color;
        UpdateDiceBearPreview().GetAwaiter().GetResult();
    }
    
    private void SelectEyebrowColor(string color)
    {
        selectedEyebrowColor = color;
        UpdateDiceBearPreview().GetAwaiter().GetResult();
    }
    
    private void SelectFacialHairColor(string color)
    {
        selectedFacialHairColor = color;
        UpdateDiceBearPreview().GetAwaiter().GetResult();
    }
    
    private void SelectGlassesColor(string color)
    {
        selectedGlassesColor = color;
        UpdateDiceBearPreview().GetAwaiter().GetResult();
    }
    
    private void SelectMouthColor(string color)
    {
        selectedMouthColor = color;
        UpdateDiceBearPreview().GetAwaiter().GetResult();
    }
    
    // Helper methods for visual icons
    private string GetEyeIcon(string eyeType)
    {
        return eyeType switch
        {
            "eva" => "fas fa-eye text-success",
            "robocop" => "fas fa-robot text-danger",
            "round" => "far fa-circle text-primary",
            "roundFrame01" => "fas fa-glasses text-info",
            "roundFrame02" => "fas fa-low-vision text-info",
            "sensor" => "fas fa-wifi text-warning",
            "shade01" => "fas fa-sun text-warning",
            _ => "fas fa-eye"
        };
    }
    
    private string GetMouthIcon(string mouthType)
    {
        return mouthType switch
        {
            "bite" => "fas fa-teeth text-danger",
            "diagram" => "fas fa-chart-line text-info",
            "grill01" => "fas fa-grip-lines text-secondary",
            "grill02" => "fas fa-grip-lines-vertical text-secondary",
            "smile01" => "fas fa-smile text-success",
            "smile02" => "fas fa-grin text-success",
            "square01" => "fas fa-square text-primary",
            "square02" => "far fa-square text-primary",
            _ => "fas fa-smile"
        };
    }
    
    private string GetAntennaIcon(string antennaType)
    {
        return antennaType switch
        {
            "variant01" => "fas fa-broadcast-tower text-primary",
            "variant02" => "fas fa-wifi text-success",
            "variant03" => "fas fa-satellite text-info",
            "variant04" => "fas fa-rss text-warning",
            "variant05" => "fas fa-signal text-danger",
            _ => "fas fa-broadcast-tower"
        };
    }

    // Render methods for different avatar style customizations
    private RenderFragment RenderAdventurerCustomization() => __builder =>
    {
        <div class="style-customization adventurer-customization">
            <!-- Skin Color -->
            <div class="customization-group mb-3">
                <label class="form-label">Skin Color</label>
                <div class="color-swatches">
                    @foreach (var color in skinColors)
                    {
                        <div class="color-swatch @(selectedSkinColor == color ? "active" : "")" 
                             style="background-color: @color"
                             @onclick="@(() => SelectSkinColor(color))"
                             title="@color"></div>
                    }
                </div>
            </div>
            
            <!-- Hair Color -->
            <div class="customization-group mb-3">
                <label class="form-label">Hair Color</label>
                <div class="color-swatches">
                    @foreach (var color in hairColors)
                    {
                        <div class="color-swatch @(selectedHairColor == color ? "active" : "")" 
                             style="background-color: @color"
                             @onclick="@(() => SelectHairColor(color))"
                             title="@color"></div>
                    }
                </div>
            </div>
            
            <!-- Background Color -->
            <div class="customization-group mb-3">
                <label class="form-label">Background Color</label>
                <div class="color-swatches">
                    <div class="color-swatch transparent @(selectedBackgroundColor == "transparent" ? "active" : "")" 
                         @onclick="@(() => SelectBackgroundColor("transparent"))"
                         title="Transparent">
                        <i class="fas fa-times"></i>
                    </div>
                    @foreach (var color in backgroundColors)
                    {
                        <div class="color-swatch @(selectedBackgroundColor == color ? "active" : "")" 
                             style="background-color: @color"
                             @onclick="@(() => SelectBackgroundColor(color))"
                             title="@color"></div>
                    }
                </div>
            </div>
            
            <!-- Accessories -->
            <div class="customization-group mb-3">
                <label class="form-label">Accessories</label>
                <div class="accessory-options">
                    <div class="form-check form-switch">
                        <input class="form-check-input" type="checkbox" id="glassesSwitch"
                               @bind="showGlasses" @bind:after="UpdateDiceBearPreview">
                        <label class="form-check-label" for="glassesSwitch">
                            Glasses
                        </label>
                    </div>
                    <div class="form-check form-switch">
                        <input class="form-check-input" type="checkbox" id="earringsSwitch"
                               @bind="showEarrings" @bind:after="UpdateDiceBearPreview">
                        <label class="form-check-label" for="earringsSwitch">
                            Earrings
                        </label>
                    </div>
                </div>
            </div>
        </div>
    };

    private RenderFragment RenderBotttsCustomization() => __builder =>
    {
        <div class="style-customization bottts-customization">
            <!-- Primary Color -->
            <div class="customization-group mb-3">
                <label class="form-label">Primary Color</label>
                <div class="color-swatches">
                    @foreach (var color in robotColors)
                    {
                        <div class="color-swatch @(selectedPrimaryColor == color ? "active" : "")" 
                             style="background-color: @color"
                             @onclick="@(() => SelectPrimaryColor(color))"
                             title="@color"></div>
                    }
                </div>
            </div>
            
            <!-- Background Color -->
            <div class="customization-group mb-3">
                <label class="form-label">Background Color</label>
                <div class="color-swatches">
                    <div class="color-swatch transparent @(selectedBackgroundColor == "transparent" ? "active" : "")" 
                         @onclick="@(() => SelectBackgroundColor("transparent"))"
                         title="Transparent">
                        <i class="fas fa-times"></i>
                    </div>
                    @foreach (var color in backgroundColors)
                    {
                        <div class="color-swatch @(selectedBackgroundColor == color ? "active" : "")" 
                             style="background-color: @color"
                             @onclick="@(() => SelectBackgroundColor(color))"
                             title="@color"></div>
                    }
                </div>
            </div>
            
            <!-- Eye Type -->
            <div class="customization-group mb-3">
                <label class="form-label">Eye Type</label>
                <div class="visual-option-grid">
                    @foreach (var eyeType in eyeTypes)
                    {
                        <div class="visual-option-btn @(selectedEyeType == eyeType ? "active" : "")"
                             @onclick="@(() => SelectEyeType(eyeType))">
                            <div class="dicebear-preview-wrapper dicebear-preview-bg" 
                                 style="background-image: url('@DiceBearAvatars.GenerateAvatarUrl("bottts", "preview", "svg", new Dictionary<string, object> { 
                                    { "eyes", new[] { eyeType } }, 
                                    { "mouth", new[] { selectedMouthType } },
                                    { "primaryColor", new[] { selectedPrimaryColor } }, 
                                    { "backgroundColor", new[] { "#f8f9fa" } },
                                    { "texture", new[] { selectedTextureType } },
                                    { "sides", new[] { selectedSidesType } }
                                })');">
                            </div>
                            <div class="option-label">@eyeType</div>
                        </div>
                    }
                </div>
            </div>
            
            <!-- Mouth Type -->
            <div class="customization-group mb-3">
                <label class="form-label">Mouth Type</label>
                <div class="visual-option-grid">
                    @foreach (var mouthType in mouthTypes)
                    {
                        <div class="visual-option-btn @(selectedMouthType == mouthType ? "active" : "")"
                             @onclick="@(() => SelectMouthType(mouthType))">
                            <div class="dicebear-preview-wrapper dicebear-preview-bg"
                                 style="background-image: url('@DiceBearAvatars.GenerateAvatarUrl("bottts", "preview", "svg", new Dictionary<string, object> { 
                                    { "eyes", new[] { selectedEyeType } },
                                    { "mouth", new[] { mouthType } }, 
                                    { "primaryColor", new[] { selectedPrimaryColor } }, 
                                    { "backgroundColor", new[] { "#f8f9fa" } },
                                    { "texture", new[] { selectedTextureType } },
                                    { "sides", new[] { selectedSidesType } }
                                })');">
                            </div>
                            <div class="option-label">@mouthType</div>
                        </div>
                    }
                </div>
            </div>
            
            <!-- Sides Type -->
            <div class="customization-group mb-3">
                <label class="form-label">Sides</label>
                <div class="visual-option-grid">
                    @foreach (var sidesType in sidesTypes)
                    {
                        <div class="visual-option-btn @(selectedSidesType == sidesType ? "active" : "")"
                             @onclick="@(() => SelectSidesType(sidesType))">
                            <div class="dicebear-preview-wrapper dicebear-preview-bg"
                                 style="background-image: url('@DiceBearAvatars.GenerateAvatarUrl("bottts", "preview", "svg", new Dictionary<string, object> { 
                                    { "eyes", new[] { selectedEyeType } },
                                    { "mouth", new[] { selectedMouthType } },
                                    { "sides", new[] { sidesType } }, 
                                    { "primaryColor", new[] { selectedPrimaryColor } }, 
                                    { "backgroundColor", new[] { "#f8f9fa" } },
                                    { "texture", new[] { selectedTextureType } }
                                })');">
                            </div>
                            <div class="option-label">@sidesType</div>
                        </div>
                    }
                </div>
            </div>
            
            <!-- Texture Type -->
            <div class="customization-group mb-3">
                <label class="form-label">Texture</label>
                <div class="visual-option-grid">
                    @foreach (var textureType in textureTypes)
                    {
                        <div class="visual-option-btn texture-option-btn @(selectedTextureType == textureType ? "active" : "")"
                             @onclick="@(() => SelectTextureType(textureType))">
                            <div class="texture-preview texture-@textureType"></div>
                            <div class="option-label">@textureType</div>
                        </div>
                    }
                </div>
            </div>
        </div>
    };

    private RenderFragment RenderAvataaarsCustomization() => __builder =>
    {
        <div class="style-customization avataaars-customization">
            <!-- Hair/Top Type -->
            <div class="customization-group mb-3">
                <label class="form-label">Hair Style</label>
                <select class="form-select form-select-sm" @bind="selectedTopType" @bind:after="UpdateDiceBearPreview">
                    @foreach (var topType in topTypes)
                    {
                        <option value="@topType">@topType.Replace("LongHair", "Long Hair ").Replace("ShortHair", "Short Hair ")</option>
                    }
                </select>
            </div>
            
            <!-- Hair Color -->
            <div class="customization-group mb-3">
                <label class="form-label">Hair Color</label>
                <div class="color-swatches">
                    @foreach (var color in hairColors)
                    {
                        <div class="color-swatch @(selectedHairColor == color ? "active" : "")" 
                             style="background-color: @color"
                             @onclick="@(() => SelectHairColor(color))"
                             title="@color"></div>
                    }
                </div>
            </div>
            
            <!-- Skin Color -->
            <div class="customization-group mb-3">
                <label class="form-label">Skin Color</label>
                <div class="color-swatches">
                    @foreach (var color in skinColors)
                    {
                        <div class="color-swatch @(selectedSkinColor == color ? "active" : "")" 
                             style="background-color: @color"
                             @onclick="@(() => SelectSkinColor(color))"
                             title="@color"></div>
                    }
                </div>
            </div>
            
            <!-- Background Color -->
            <div class="customization-group mb-3">
                <label class="form-label">Background Color</label>
                <div class="color-swatches">
                    <div class="color-swatch transparent @(selectedBackgroundColor == "transparent" ? "active" : "")" 
                         @onclick="@(() => SelectBackgroundColor("transparent"))"
                         title="Transparent">
                        <i class="fas fa-times"></i>
                    </div>
                    @foreach (var color in backgroundColors)
                    {
                        <div class="color-swatch @(selectedBackgroundColor == color ? "active" : "")" 
                             style="background-color: @color"
                             @onclick="@(() => SelectBackgroundColor(color))"
                             title="@color"></div>
                    }
                </div>
            </div>
            
            <!-- Accessories -->
            <div class="customization-group mb-3">
                <label class="form-label">Accessories</label>
                <select class="form-select form-select-sm" @bind="selectedAccessoryType" @bind:after="UpdateDiceBearPreview">
                    @foreach (var accessoryType in accessoryTypes)
                    {
                        <option value="@accessoryType">@accessoryType</option>
                    }
                </select>
            </div>
            
            <!-- Eyes -->
            <div class="customization-group mb-3">
                <label class="form-label">Eyes</label>
                <select class="form-select form-select-sm" @bind="selectedEyeTypeAvataaars" @bind:after="UpdateDiceBearPreview">
                    @foreach (var eyeType in eyeTypesAvataaars)
                    {
                        <option value="@eyeType">@eyeType</option>
                    }
                </select>
            </div>
            
            <!-- Eyebrows -->
            <div class="customization-group mb-3">
                <label class="form-label">Eyebrows</label>
                <select class="form-select form-select-sm" @bind="selectedEyebrowType" @bind:after="UpdateDiceBearPreview">
                    @foreach (var eyebrowType in eyebrowTypes)
                    {
                        <option value="@eyebrowType">@eyebrowType</option>
                    }
                </select>
            </div>
            
            <!-- Mouth -->
            <div class="customization-group mb-3">
                <label class="form-label">Mouth</label>
                <select class="form-select form-select-sm" @bind="selectedMouthTypeAvataaars" @bind:after="UpdateDiceBearPreview">
                    @foreach (var mouthType in mouthTypesAvataaars)
                    {
                        <option value="@mouthType">@mouthType</option>
                    }
                </select>
            </div>
            
            <!-- Facial Hair -->
            <div class="customization-group mb-3">
                <label class="form-label">Facial Hair</label>
                <select class="form-select form-select-sm" @bind="selectedFacialHairType" @bind:after="UpdateDiceBearPreview">
                    @foreach (var facialHairType in facialHairTypes)
                    {
                        <option value="@facialHairType">@facialHairType</option>
                    }
                </select>
            </div>
            
            <!-- Clothing -->
            <div class="customization-group mb-3">
                <label class="form-label">Clothing</label>
                <select class="form-select form-select-sm" @bind="selectedClotheType" @bind:after="UpdateDiceBearPreview">
                    @foreach (var clotheType in clotheTypes)
                    {
                        <option value="@clotheType">@clotheType</option>
                    }
                </select>
            </div>
        </div>
    };

    private RenderFragment RenderIdenticonCustomization() => __builder =>
    {
        <div class="style-customization identicon-customization">
            <!-- Background Color -->
            <div class="customization-group mb-3">
                <label class="form-label">Background Color</label>
                <div class="color-swatches">
                    <div class="color-swatch transparent @(selectedBackgroundColor == "transparent" ? "active" : "")" 
                         @onclick="@(() => SelectBackgroundColor("transparent"))"
                         title="Transparent">
                        <i class="fas fa-times"></i>
                    </div>
                    @foreach (var color in backgroundColors)
                    {
                        <div class="color-swatch @(selectedBackgroundColor == color ? "active" : "")" 
                             style="background-color: @color"
                             @onclick="@(() => SelectBackgroundColor(color))"
                             title="@color"></div>
                    }
                </div>
            </div>
            
            <!-- Primary Color -->
            <div class="customization-group mb-3">
                <label class="form-label">Primary Color</label>
                <div class="color-swatches">
                    @foreach (var color in primaryColors)
                    {
                        <div class="color-swatch @(selectedPrimaryColor == color ? "active" : "")" 
                             style="background-color: @color"
                             @onclick="@(() => SelectPrimaryColor(color))"
                             title="@color"></div>
                    }
                </div>
            </div>
        </div>
    };

    private RenderFragment RenderBigSmileCustomization() => __builder =>
    {
        <div class="style-customization big-smile-customization">
            <!-- Skin Color -->
            <div class="customization-group mb-3">
                <label class="form-label">Skin Color</label>
                <div class="color-swatches">
                    @foreach (var color in skinColors)
                    {
                        <div class="color-swatch @(selectedSkinColor == color ? "active" : "")" 
                             style="background-color: @color"
                             @onclick="@(() => SelectSkinColor(color))"
                             title="@color"></div>
                    }
                </div>
            </div>
            
            <!-- Hair Color -->
            <div class="customization-group mb-3">
                <label class="form-label">Hair Color</label>
                <div class="color-swatches">
                    @foreach (var color in hairColors)
                    {
                        <div class="color-swatch @(selectedHairColor == color ? "active" : "")" 
                             style="background-color: @color"
                             @onclick="@(() => SelectHairColor(color))"
                             title="@color"></div>
                    }
                </div>
            </div>
            
            <!-- Background Color -->
            <div class="customization-group mb-3">
                <label class="form-label">Background Color</label>
                <div class="color-swatches">
                    <div class="color-swatch transparent @(selectedBackgroundColor == "transparent" ? "active" : "")" 
                         @onclick="@(() => SelectBackgroundColor("transparent"))"
                         title="Transparent">
                        <i class="fas fa-times"></i>
                    </div>
                    @foreach (var color in backgroundColors)
                    {
                        <div class="color-swatch @(selectedBackgroundColor == color ? "active" : "")" 
                             style="background-color: @color"
                             @onclick="@(() => SelectBackgroundColor(color))"
                             title="@color"></div>
                    }
                </div>
            </div>
        </div>
    };

    private RenderFragment RenderMicahCustomization() => __builder =>
    {
        <div class="style-customization micah-customization">
            <!-- Hair Color -->
            <div class="customization-group mb-3">
                <label class="form-label">Hair Color</label>
                <div class="color-swatches">
                    @foreach (var color in hairColors)
                    {
                        <div class="color-swatch @(selectedHairColor == color ? "active" : "")" 
                             style="background-color: @color"
                             @onclick="@(() => SelectHairColor(color))"
                             title="@color"></div>
                    }
                </div>
            </div>
            
            <!-- Background Color -->
            <div class="customization-group mb-3">
                <label class="form-label">Background Color</label>
                <div class="color-swatches">
                    <div class="color-swatch transparent @(selectedBackgroundColor == "transparent" ? "active" : "")" 
                         @onclick="@(() => SelectBackgroundColor("transparent"))"
                         title="Transparent">
                        <i class="fas fa-times"></i>
                    </div>
                    @foreach (var color in backgroundColors)
                    {
                        <div class="color-swatch @(selectedBackgroundColor == color ? "active" : "")" 
                             style="background-color: @color"
                             @onclick="@(() => SelectBackgroundColor(color))"
                             title="@color"></div>
                    }
                </div>
            </div>
            
            <!-- Base Color -->
            <div class="customization-group mb-3">
                <label class="form-label">Base Color</label>
                <div class="color-swatches">
                    @foreach (var color in skinColors)
                    {
                        <div class="color-swatch @(selectedBaseColor == color ? "active" : "")" 
                             style="background-color: @color"
                             @onclick="@(() => SelectBaseColor(color))"
                             title="@color"></div>
                    }
                </div>
            </div>
            
            <!-- Earring Color -->
            <div class="customization-group mb-3">
                <label class="form-label">Earring Color</label>
                <div class="color-swatches">
                    @foreach (var color in primaryColors)
                    {
                        <div class="color-swatch @(selectedEarringColor == color ? "active" : "")" 
                             style="background-color: @color"
                             @onclick="@(() => SelectEarringColor(color))"
                             title="@color"></div>
                    }
                </div>
            </div>
            
            <!-- Eyebrow Color -->
            <div class="customization-group mb-3">
                <label class="form-label">Eyebrow Color</label>
                <div class="color-swatches">
                    @foreach (var color in hairColors)
                    {
                        <div class="color-swatch @(selectedEyebrowColor == color ? "active" : "")" 
                             style="background-color: @color"
                             @onclick="@(() => SelectEyebrowColor(color))"
                             title="@color"></div>
                    }
                </div>
            </div>
            
            <!-- Mouth Color -->
            <div class="customization-group mb-3">
                <label class="form-label">Mouth Color</label>
                <div class="color-swatches">
                    @foreach (var color in primaryColors.Take(6))
                    {
                        <div class="color-swatch @(selectedMouthColor == color ? "active" : "")" 
                             style="background-color: @color"
                             @onclick="@(() => SelectMouthColor(color))"
                             title="@color"></div>
                    }
                </div>
            </div>
        </div>
    };

    private string GenerateCustomizedAvatarUrl()
    {
        var currentStyle = GetCurrentSelectedStyle();
        if (string.IsNullOrEmpty(currentStyle))
            return "";

        var options = GetCurrentOptions();
        return DiceBearAvatars.GenerateAvatarUrl(currentStyle, SelectedDiceBearSeed ?? "default", "svg", options);
    }

    private Dictionary<string, object> GetCurrentOptions()
    {
        var options = new Dictionary<string, object>();
        var currentStyle = GetCurrentSelectedStyle();

        // Add color options (excluding transparent)
        foreach (var kvp in customOptions)
        {
            if (kvp.Value != "transparent")
            {
                options[kvp.Key] = new[] { kvp.Value };
            }
        }

        // Style-specific options
        switch (currentStyle)
        {
            case "adventurer":
                if (showGlasses)
                    options["glasses"] = new[] { "variant01", "variant02", "variant03", "variant04", "variant05" };
                if (showEarrings)
                    options["earrings"] = new[] { "variant01", "variant02", "variant03", "variant04", "variant05", "variant06" };
                break;
                
            case "bottts":
                if (!string.IsNullOrEmpty(selectedEyeType))
                    options["eyes"] = new[] { selectedEyeType };
                if (!string.IsNullOrEmpty(selectedMouthType))
                    options["mouth"] = new[] { selectedMouthType };
                if (!string.IsNullOrEmpty(selectedSidesType))
                    options["sides"] = new[] { selectedSidesType };
                if (!string.IsNullOrEmpty(selectedTextureType))
                    options["texture"] = new[] { selectedTextureType };
                break;
                
            case "avataaars":
                if (!string.IsNullOrEmpty(selectedTopType))
                    options["topType"] = new[] { selectedTopType };
                if (!string.IsNullOrEmpty(selectedAccessoryType) && selectedAccessoryType != "Blank")
                    options["accessoriesType"] = new[] { selectedAccessoryType };
                if (!string.IsNullOrEmpty(selectedFacialHairType) && selectedFacialHairType != "Blank")
                    options["facialHairType"] = new[] { selectedFacialHairType };
                if (!string.IsNullOrEmpty(selectedClotheType))
                    options["clotheType"] = new[] { selectedClotheType };
                if (!string.IsNullOrEmpty(selectedEyeTypeAvataaars))
                    options["eyeType"] = new[] { selectedEyeTypeAvataaars };
                if (!string.IsNullOrEmpty(selectedEyebrowType))
                    options["eyebrowType"] = new[] { selectedEyebrowType };
                if (!string.IsNullOrEmpty(selectedMouthTypeAvataaars))
                    options["mouthType"] = new[] { selectedMouthTypeAvataaars };
                break;
                
            case "micah":
                if (!string.IsNullOrEmpty(selectedBaseColor))
                    options["baseColor"] = new[] { selectedBaseColor };
                if (!string.IsNullOrEmpty(selectedEarringColor))
                    options["earringColor"] = new[] { selectedEarringColor };
                if (!string.IsNullOrEmpty(selectedEyebrowColor))
                    options["eyebrowColor"] = new[] { selectedEyebrowColor };
                if (!string.IsNullOrEmpty(selectedFacialHairColor))
                    options["facialHairColor"] = new[] { selectedFacialHairColor };
                if (!string.IsNullOrEmpty(selectedGlassesColor))
                    options["glassesColor"] = new[] { selectedGlassesColor };
                if (!string.IsNullOrEmpty(selectedMouthColor))
                    options["mouthColor"] = new[] { selectedMouthColor };
                break;
                
            case "big-smile":
                // Similar to adventurer but with specific accessories
                break;
        }

        // Universal flip option
        if (flipAvatar && SupportsFlip(currentStyle))
        {
            options["flip"] = true;
        }

        return options;
    }
    
    // Helper method to get texture CSS class
    private string GetTextureClass(string textureType)
    {
        return $"texture-{textureType}";
    }

    public class AvatarSelectionData
    {
        public string AvatarType { get; set; } = string.Empty;
        public string? DiceBearStyle { get; set; }
        public string? DiceBearSeed { get; set; }
        public string? AvatarUrl { get; set; }
        public string? DiceBearOptions { get; set; }
    }
}