@using SteelEstimation.Core.Interfaces
@using SteelEstimation.Core.Entities
@using Microsoft.AspNetCore.SignalR.Client
@implements IAsyncDisposable
@inject INotificationService NotificationService
@inject IFabOSAuthenticationService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<div class="notification-bell-container">
    <button class="btn btn-link notification-bell" @onclick="ToggleDropdown">
        <i class="fas fa-bell"></i>
        @if (unreadCount > 0)
        {
            <span class="notification-badge">@(unreadCount > 99 ? "99+" : unreadCount.ToString())</span>
        }
    </button>

    @if (showDropdown)
    {
        <div class="notification-dropdown">
            <div class="notification-header">
                <h6 class="mb-0">Notifications</h6>
                @if (unreadCount > 0)
                {
                    <button class="btn btn-sm btn-link" @onclick="MarkAllAsRead">Mark all as read</button>
                }
            </div>
            
            <div class="notification-list">
                @if (isLoading)
                {
                    <div class="text-center py-3">
                        <div class="spinner-border spinner-border-sm text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                }
                else if (!notifications.Any())
                {
                    <div class="notification-empty">
                        <i class="fas fa-bell-slash"></i>
                        <p>No notifications</p>
                    </div>
                }
                else
                {
                    @foreach (var notification in notifications.Take(10))
                    {
                        <div class="notification-item @(!notification.IsRead ? "unread" : "")" @onclick="() => ViewNotification(notification)">
                            <div class="notification-icon @GetNotificationColorClass(notification.Type)">
                                <i class="@GetNotificationIcon(notification.Type)"></i>
                            </div>
                            <div class="notification-content">
                                <div class="notification-title">@notification.Title</div>
                                @if (!string.IsNullOrEmpty(notification.Message))
                                {
                                    <div class="notification-message">@notification.Message</div>
                                }
                                <div class="notification-time">
                                    <i class="fas fa-clock"></i>
                                    @GetTimeAgo(notification.CreatedAt)
                                </div>
                            </div>
                        </div>
                    }
                }
            </div>
            
            <div class="notification-footer">
                <a href="/notifications" class="btn btn-sm btn-block">View All Notifications</a>
            </div>
        </div>
    }
</div>

<style>
    .notification-bell-container {
        position: relative;
    }

    .notification-bell {
        position: relative;
        color: #6c757d;
        font-size: 1.2rem;
        padding: 0.5rem;
    }

    .notification-bell:hover {
        color: #007bff;
    }

    .notification-badge {
        position: absolute;
        top: 0;
        right: 0;
        background: #dc3545;
        color: white;
        font-size: 0.7rem;
        padding: 2px 5px;
        border-radius: 10px;
        min-width: 18px;
        text-align: center;
    }

    .notification-dropdown {
        position: absolute;
        right: 0;
        top: 100%;
        width: 350px;
        max-height: 500px;
        background: white;
        border: 1px solid #ddd;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        z-index: 1050;
        display: flex;
        flex-direction: column;
    }

    .notification-header {
        padding: 15px;
        border-bottom: 1px solid #e9ecef;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .notification-list {
        max-height: 350px;
        overflow-y: auto;
    }

    .notification-item {
        display: flex;
        padding: 12px 15px;
        border-bottom: 1px solid #f0f0f0;
        cursor: pointer;
        transition: background-color 0.2s;
    }

    .notification-item:hover {
        background-color: #f8f9fa;
    }

    .notification-item.unread {
        background-color: #e8f4fd;
    }

    .notification-icon {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        margin-right: 12px;
        flex-shrink: 0;
    }

    .notification-content {
        flex: 1;
        min-width: 0;
    }

    .notification-title {
        font-weight: 600;
        font-size: 0.9rem;
        margin-bottom: 2px;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }

    .notification-message {
        font-size: 0.85rem;
        color: #6c757d;
        margin-bottom: 4px;
        overflow: hidden;
        text-overflow: ellipsis;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
    }

    .notification-time {
        font-size: 0.75rem;
        color: #999;
    }

    .notification-empty {
        text-align: center;
        padding: 40px;
        color: #999;
    }

    .notification-empty i {
        font-size: 3rem;
        margin-bottom: 10px;
        display: block;
    }

    .notification-footer {
        padding: 10px;
        border-top: 1px solid #e9ecef;
    }

    .notification-footer a {
        width: 100%;
        text-align: center;
    }

    .bg-mention { background-color: #9c27b0; }
    .bg-comment { background-color: #2196f3; }
    .bg-system { background-color: #607d8b; }
    .bg-invite { background-color: #4caf50; }
</style>

@code {
    private List<Notification> notifications = new();
    private int unreadCount;
    private bool showDropdown;
    private bool isLoading;
    private HubConnection? hubConnection;
    private int currentUserId;

    protected override async Task OnInitializedAsync()
    {
        currentUserId = await AuthService.GetCurrentUserIdAsync() ?? 0;
        
        if (currentUserId > 0)
        {
            await LoadNotifications();
            await SetupSignalR();
        }
    }

    private async Task LoadNotifications()
    {
        isLoading = true;
        try
        {
            var allNotifications = await NotificationService.GetUserNotificationsAsync(currentUserId, false, 1, 20);
            notifications = allNotifications.ToList();
            
            unreadCount = await NotificationService.GetUnreadCountAsync(currentUserId);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task SetupSignalR()
    {
        // TODO: Replace with your SignalR hub URL
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/notificationHub"))
            .Build();

        hubConnection.On<Notification>("ReceiveNotification", async (notification) =>
        {
            notifications.Insert(0, notification);
            unreadCount++;
            
            // Show browser notification if enabled
            if (notification.Priority == "high" || notification.Priority == "urgent")
            {
                await ShowBrowserNotification(notification);
            }
            
            await InvokeAsync(StateHasChanged);
        });

        try
        {
            await hubConnection.StartAsync();
            await hubConnection.SendAsync("JoinUserGroup", currentUserId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"SignalR connection failed: {ex.Message}");
        }
    }

    private void ToggleDropdown()
    {
        showDropdown = !showDropdown;
    }

    private async Task ViewNotification(Notification notification)
    {
        if (!notification.IsRead)
        {
            await NotificationService.MarkAsReadAsync(notification.Id, currentUserId);
            notification.IsRead = true;
            unreadCount = Math.Max(0, unreadCount - 1);
        }

        if (!string.IsNullOrEmpty(notification.ActionUrl))
        {
            Navigation.NavigateTo(notification.ActionUrl);
        }

        showDropdown = false;
    }

    private async Task MarkAllAsRead()
    {
        await NotificationService.MarkAllAsReadAsync(currentUserId);
        
        foreach (var notification in notifications.Where(n => !n.IsRead))
        {
            notification.IsRead = true;
        }
        
        unreadCount = 0;
    }

    private async Task ShowBrowserNotification(Notification notification)
    {
        await JSRuntime.InvokeVoidAsync("showNotification", notification.Title, notification.Message);
    }

    private string GetNotificationIcon(string type)
    {
        return type switch
        {
            "mention" => "fas fa-at",
            "comment" => "fas fa-comment",
            "system" => "fas fa-info-circle",
            "invite" => "fas fa-envelope",
            _ => "fas fa-bell"
        };
    }

    private string GetNotificationColorClass(string type)
    {
        return type switch
        {
            "mention" => "bg-mention",
            "comment" => "bg-comment",
            "system" => "bg-system",
            "invite" => "bg-invite",
            _ => "bg-primary"
        };
    }

    private string GetTimeAgo(DateTime dateTime)
    {
        var timeSpan = DateTime.UtcNow - dateTime;

        if (timeSpan.TotalMinutes < 1)
            return "just now";
        if (timeSpan.TotalMinutes < 60)
            return $"{(int)timeSpan.TotalMinutes}m";
        if (timeSpan.TotalHours < 24)
            return $"{(int)timeSpan.TotalHours}h";
        if (timeSpan.TotalDays < 7)
            return $"{(int)timeSpan.TotalDays}d";
        
        return dateTime.ToString("MMM d");
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}