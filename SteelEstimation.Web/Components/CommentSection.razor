@using SteelEstimation.Core.Interfaces
@using SteelEstimation.Core.Entities
@using SteelEstimation.Core.DTOs
@inject ICommentService CommentService
@inject IFabOSAuthenticationService AuthService
@inject IJSRuntime JSRuntime

<div class="comment-section">
    <h5 class="mb-3">
        <i class="fas fa-comments me-2"></i>
        Comments (@commentCount)
    </h5>

    <!-- Add Comment Form -->
    @if (currentUserId > 0)
    {
        <div class="add-comment mb-4">
            <div class="d-flex">
                <div class="avatar-sm me-3">
                    @if (!string.IsNullOrEmpty(currentUserAvatar))
                    {
                        <img src="@currentUserAvatar" alt="You" class="rounded-circle" />
                    }
                    else
                    {
                        <div class="avatar-placeholder-sm">
                            <span>@GetInitials(currentUserName)</span>
                        </div>
                    }
                </div>
                <div class="flex-grow-1">
                    <div class="comment-input-wrapper">
                        <textarea @bind="newCommentText" 
                                  @oninput="OnCommentInput"
                                  @onkeydown="OnCommentKeyDown"
                                  class="form-control comment-input" 
                                  placeholder="Add a comment... Use @@ to mention someone"
                                  rows="2"></textarea>
                        
                        <!-- Mention Suggestions -->
                        @if (showMentionSuggestions && mentionSuggestions.Any())
                        {
                            <div class="mention-suggestions">
                                @foreach (var user in mentionSuggestions)
                                {
                                    <div class="mention-suggestion" @onclick="() => SelectMention(user)">
                                        <strong>@@@user.Username</strong> - @user.FullName
                                    </div>
                                }
                            </div>
                        }
                    </div>
                    
                    <div class="mt-2 d-flex justify-content-between align-items-center">
                        <small class="text-muted">
                            Press Ctrl+Enter to submit
                        </small>
                        <button class="btn btn-primary btn-sm" 
                                @onclick="PostComment" 
                                disabled="@(string.IsNullOrWhiteSpace(newCommentText) || isPosting)">
                            @if (isPosting)
                            {
                                <span class="spinner-border spinner-border-sm me-1"></span>
                            }
                            Post Comment
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Comments List -->
    @if (isLoading)
    {
        <div class="text-center py-4">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading comments...</span>
            </div>
        </div>
    }
    else if (!comments.Any())
    {
        <div class="text-center py-5 text-muted">
            <i class="fas fa-comment-slash fa-3x mb-3"></i>
            <p>No comments yet. Be the first to comment!</p>
        </div>
    }
    else
    {
        <div class="comments-list">
            @foreach (var comment in comments)
            {
                <CommentItem Comment="comment" 
                             CurrentUserId="currentUserId"
                             OnReply="ReplyToComment"
                             OnEdit="EditComment"
                             OnDelete="DeleteComment"
                             OnReact="ReactToComment" />
            }
        </div>

        @if (hasMore)
        {
            <div class="text-center mt-3">
                <button class="btn btn-outline-secondary btn-sm" @onclick="LoadMore">
                    Load More Comments
                </button>
            </div>
        }
    }
</div>

<style>
    .comment-section {
        margin-top: 2rem;
    }

    .avatar-sm img,
    .avatar-placeholder-sm {
        width: 40px;
        height: 40px;
        border-radius: 50%;
    }

    .avatar-placeholder-sm {
        background: #007bff;
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: bold;
    }

    .comment-input-wrapper {
        position: relative;
    }

    .comment-input {
        resize: vertical;
        min-height: 60px;
    }

    .mention-suggestions {
        position: absolute;
        top: 100%;
        left: 0;
        right: 0;
        background: white;
        border: 1px solid #ddd;
        border-top: none;
        border-radius: 0 0 4px 4px;
        max-height: 200px;
        overflow-y: auto;
        z-index: 1000;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    }

    .mention-suggestion {
        padding: 8px 12px;
        cursor: pointer;
        transition: background-color 0.2s;
    }

    .mention-suggestion:hover {
        background-color: #f8f9fa;
    }

    .comments-list {
        margin-top: 2rem;
    }
</style>

@code {
    [Parameter] public string EntityType { get; set; } = string.Empty;
    [Parameter] public int EntityId { get; set; }
    [Parameter] public string? ProductName { get; set; }

    private List<Comment> comments = new();
    private string newCommentText = string.Empty;
    private int currentUserId;
    private string currentUserName = string.Empty;
    private string? currentUserAvatar;
    private int commentCount;
    private bool isLoading = true;
    private bool isPosting;
    private bool hasMore;
    private bool showMentionSuggestions;
    private List<User> mentionSuggestions = new();
    private int mentionStartIndex = -1;

    protected override async Task OnInitializedAsync()
    {
        var currentUser = await AuthService.GetCurrentUserAsync();
        if (currentUser != null)
        {
            currentUserId = currentUser.Id;
            currentUserName = currentUser.FullName;
            // TODO: Get avatar from user profile
        }

        await LoadComments();
    }

    private async Task LoadComments()
    {
        isLoading = true;
        try
        {
            var allComments = await CommentService.GetCommentsForEntityAsync(EntityType, EntityId);
            comments = allComments.ToList();
            commentCount = await CommentService.GetCommentCountAsync(EntityType, EntityId);
            hasMore = comments.Count < commentCount;
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task PostComment()
    {
        if (string.IsNullOrWhiteSpace(newCommentText)) return;

        isPosting = true;
        try
        {
            var request = new CreateCommentRequest
            {
                Content = newCommentText.Trim(),
                EntityType = EntityType,
                EntityId = EntityId,
                ProductName = ProductName
            };

            var newComment = await CommentService.CreateCommentAsync(request, currentUserId);
            
            // Add to the list
            comments.Insert(0, newComment);
            commentCount++;
            newCommentText = string.Empty;
            
            // Clear mention suggestions
            showMentionSuggestions = false;
            mentionSuggestions.Clear();
        }
        finally
        {
            isPosting = false;
        }
    }

    private async Task OnCommentInput(ChangeEventArgs e)
    {
        newCommentText = e.Value?.ToString() ?? "";
        
        // Check for @ mentions
        var lastAtIndex = newCommentText.LastIndexOf('@');
        if (lastAtIndex >= 0 && (lastAtIndex == 0 || char.IsWhiteSpace(newCommentText[lastAtIndex - 1])))
        {
            var searchTerm = newCommentText.Substring(lastAtIndex + 1);
            if (searchTerm.Length > 0 && !searchTerm.Contains(' '))
            {
                mentionStartIndex = lastAtIndex;
                // TODO: Search for users
                showMentionSuggestions = true;
            }
            else
            {
                showMentionSuggestions = false;
            }
        }
        else
        {
            showMentionSuggestions = false;
        }
    }

    private async Task OnCommentKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && e.CtrlKey)
        {
            await PostComment();
        }
    }

    private void SelectMention(User user)
    {
        if (mentionStartIndex >= 0)
        {
            var beforeMention = newCommentText.Substring(0, mentionStartIndex);
            var afterMention = newCommentText.IndexOf(' ', mentionStartIndex + 1);
            var after = afterMention >= 0 ? newCommentText.Substring(afterMention) : "";
            
            newCommentText = $"{beforeMention}@{user.Username} {after}";
        }
        
        showMentionSuggestions = false;
        mentionSuggestions.Clear();
    }

    private async Task LoadMore()
    {
        // TODO: Implement pagination
        await Task.CompletedTask;
    }

    private async Task ReplyToComment(Comment comment)
    {
        newCommentText = $"@{comment.User.Username} ";
        // TODO: Focus the comment input
    }

    private async Task EditComment(Comment comment)
    {
        // TODO: Implement edit functionality
        await Task.CompletedTask;
    }

    private async Task DeleteComment(Comment comment)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this comment?");
        if (confirmed)
        {
            var success = await CommentService.DeleteCommentAsync(comment.Id, currentUserId);
            if (success)
            {
                comments.Remove(comment);
                commentCount--;
            }
        }
    }

    private async Task ReactToComment((Comment comment, string reactionType) reaction)
    {
        await CommentService.AddReactionAsync(reaction.comment.Id, currentUserId, reaction.reactionType);
        // TODO: Update the comment's reactions in the UI
    }

    private string GetInitials(string fullName)
    {
        var parts = fullName.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        if (parts.Length >= 2)
            return $"{parts[0][0]}{parts[1][0]}".ToUpper();
        else if (parts.Length == 1)
            return parts[0].Substring(0, Math.Min(2, parts[0].Length)).ToUpper();
        return "U";
    }
}