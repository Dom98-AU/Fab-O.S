@using SteelEstimation.Web.Data

<div class="avatar-selector">
    <h5 class="mb-3">Choose Your Avatar</h5>
    
    <div class="current-avatar mb-4 text-center">
        <div class="avatar-preview">
            @if (!string.IsNullOrEmpty(SelectedAvatar))
            {
                var avatar = AvatarIcons.GetById(SelectedAvatar);
                if (avatar != null)
                {
                    <i class="@avatar.Icon avatar-icon-large"></i>
                    <p class="mt-2 mb-0">@avatar.Name</p>
                }
            }
            else
            {
                <i class="fas fa-user-circle avatar-icon-large"></i>
                <p class="mt-2 mb-0">Default</p>
            }
        </div>
    </div>

    @foreach (var category in AvatarIcons.AvailableAvatars.GroupBy(a => a.Category))
    {
        <div class="avatar-category mb-4">
            <h6 class="text-muted mb-3">@category.Key</h6>
            <div class="avatar-grid">
                @foreach (var avatar in category)
                {
                    <div class="avatar-option @(SelectedAvatar == avatar.Id ? "selected" : "")" 
                         @onclick="() => SelectAvatar(avatar.Id)"
                         title="@avatar.Name">
                        <i class="@avatar.Icon"></i>
                    </div>
                }
            </div>
        </div>
    }
</div>

<style>
    .avatar-selector {
        max-width: 600px;
    }

    .avatar-preview {
        display: inline-block;
        padding: 20px;
        background: #f8f9fa;
        border-radius: 10px;
        border: 2px solid #dee2e6;
    }

    .avatar-icon-large {
        font-size: 5rem;
        color: #495057;
    }

    .avatar-category {
        margin-bottom: 2rem;
    }

    .avatar-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(80px, 1fr));
        gap: 10px;
    }

    .avatar-option {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 80px;
        height: 80px;
        background: #f8f9fa;
        border: 2px solid #dee2e6;
        border-radius: 8px;
        cursor: pointer;
        transition: all 0.2s ease;
    }

    .avatar-option i {
        font-size: 2.5rem;
        color: #6c757d;
        transition: color 0.2s ease;
    }

    .avatar-option:hover {
        background: #e9ecef;
        border-color: #adb5bd;
        transform: translateY(-2px);
    }

    .avatar-option:hover i {
        color: #495057;
    }

    .avatar-option.selected {
        background: #0d1a80;
        border-color: #0d1a80;
    }

    .avatar-option.selected i {
        color: white;
    }

    @@media (max-width: 576px) {
        .avatar-grid {
            grid-template-columns: repeat(auto-fill, minmax(60px, 1fr));
        }

        .avatar-option {
            width: 60px;
            height: 60px;
        }

        .avatar-option i {
            font-size: 1.8rem;
        }
    }
</style>

@code {
    [Parameter] public string? SelectedAvatar { get; set; }
    [Parameter] public EventCallback<string> OnAvatarSelected { get; set; }

    private async Task SelectAvatar(string avatarId)
    {
        SelectedAvatar = avatarId;
        await OnAvatarSelected.InvokeAsync(avatarId);
    }
}