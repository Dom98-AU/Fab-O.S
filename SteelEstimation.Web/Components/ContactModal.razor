@using SteelEstimation.Core.Entities
@using SteelEstimation.Infrastructure.Data
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject IJSRuntime JS

<div class="modal fade" id="contactModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    @(contact.Id == 0 ? "Add Contact" : "Edit Contact")
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="row g-3">
                    <div class="col-md-6">
                        <label class="form-label">First Name <span class="text-danger">*</span></label>
                        <input type="text" class="form-control" 
                               value="@contact.FirstName"
                               @oninput="@((e) => contact.FirstName = e.Value?.ToString()?.ToUpper() ?? "")"
                               style="text-transform: uppercase;" required />
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">Last Name <span class="text-danger">*</span></label>
                        <input type="text" class="form-control" 
                               value="@contact.LastName"
                               @oninput="@((e) => contact.LastName = e.Value?.ToString()?.ToUpper() ?? "")"
                               style="text-transform: uppercase;" required />
                    </div>
                    <div class="col-12">
                        <label class="form-label">Position/Title</label>
                        <input type="text" class="form-control" 
                               value="@contact.Position"
                               @oninput="@((e) => contact.Position = e.Value?.ToString()?.ToUpper())"
                               style="text-transform: uppercase;"
                               placeholder="E.G., PROJECT MANAGER, ESTIMATOR" />
                    </div>
                    <div class="col-12">
                        <label class="form-label">Email</label>
                        <input type="email" class="form-control" @bind="contact.Email" />
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">Phone</label>
                        <input type="tel" class="form-control" @bind="contact.Phone" 
                               placeholder="(02) 1234 5678" />
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">Mobile</label>
                        <input type="tel" class="form-control" @bind="contact.Mobile" 
                               placeholder="0400 000 000" />
                    </div>
                    <div class="col-12">
                        <label class="form-label">Notes</label>
                        <textarea class="form-control" 
                                  @oninput="@((e) => contact.Notes = e.Value?.ToString()?.ToUpper())"
                                  style="text-transform: uppercase;" rows="2">@contact.Notes</textarea>
                    </div>
                    <div class="col-12">
                        <div class="form-check">
                            <input type="checkbox" class="form-check-input" id="isPrimary" 
                                   @bind="contact.IsPrimary" />
                            <label class="form-check-label" for="isPrimary">
                                Primary Contact
                            </label>
                        </div>
                        <div class="form-check">
                            <input type="checkbox" class="form-check-input" id="isBilling" 
                                   @bind="contact.IsBillingContact" />
                            <label class="form-check-label" for="isBilling">
                                Billing Contact
                            </label>
                        </div>
                        <div class="form-check">
                            <input type="checkbox" class="form-check-input" id="isActive" 
                                   @bind="contact.IsActive" />
                            <label class="form-check-label" for="isActive">
                                Active
                            </label>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" @onclick="SaveContact" disabled="@isSaving">
                    @if (isSaving)
                    {
                        <span class="spinner-border spinner-border-sm me-2"></span>
                    }
                    Save Contact
                </button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public EventCallback<Contact> OnContactSaved { get; set; }

    private Contact contact = new();
    private bool isSaving = false;

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Bootstrap should already be loaded in the main layout
            // We'll use the global bootstrap object instead of importing
        }
        return Task.CompletedTask;
    }

    public async Task Show(Contact contactToEdit)
    {
        contact = new Contact
        {
            Id = contactToEdit.Id,
            CustomerId = contactToEdit.CustomerId,
            FirstName = contactToEdit.FirstName,
            LastName = contactToEdit.LastName,
            Email = contactToEdit.Email,
            Phone = contactToEdit.Phone,
            Mobile = contactToEdit.Mobile,
            Position = contactToEdit.Position,
            IsPrimary = contactToEdit.IsPrimary,
            IsBillingContact = contactToEdit.IsBillingContact,
            IsActive = contactToEdit.Id == 0 ? true : contactToEdit.IsActive,
            Notes = contactToEdit.Notes
        };
        
        StateHasChanged();
        
        // Use global Bootstrap Modal
        await JS.InvokeVoidAsync("eval", @"
            const modalElement = document.getElementById('contactModal');
            if (modalElement) {
                const modal = new bootstrap.Modal(modalElement);
                modal.show();
            }
        ");
    }

    private async Task SaveContact()
    {
        if (string.IsNullOrWhiteSpace(contact.FirstName) || 
            string.IsNullOrWhiteSpace(contact.LastName))
        {
            await JS.InvokeVoidAsync("alert", "First name and last name are required.");
            return;
        }

        isSaving = true;
        
        try
        {
            // Ensure all text fields are uppercase
            contact.FirstName = contact.FirstName.ToUpper();
            contact.LastName = contact.LastName.ToUpper();
            if (!string.IsNullOrEmpty(contact.Position))
                contact.Position = contact.Position.ToUpper();
            if (!string.IsNullOrEmpty(contact.Notes))
                contact.Notes = contact.Notes.ToUpper();
            
            // Only save to database if editing existing contact
            if (contact.Id > 0)
            {
                using var context = await DbFactory.CreateDbContextAsync();
                
                contact.ModifiedDate = DateTime.UtcNow;
                context.Contacts.Update(contact);
                await context.SaveChangesAsync();
            }
            
            await OnContactSaved.InvokeAsync(contact);
            
            // Hide the modal
            await JS.InvokeVoidAsync("eval", @"
                const modalElement = document.getElementById('contactModal');
                if (modalElement) {
                    const modal = bootstrap.Modal.getInstance(modalElement);
                    if (modal) {
                        modal.hide();
                    }
                }
            ");
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error saving contact: {ex.Message}");
        }
        finally
        {
            isSaving = false;
        }
    }

    public async ValueTask DisposeAsync()
    {
        // Clean up any modal instances
        await JS.InvokeVoidAsync("eval", @"
            const modalElement = document.getElementById('contactModal');
            if (modalElement) {
                const modal = bootstrap.Modal.getInstance(modalElement);
                if (modal) {
                    modal.dispose();
                }
            }
        ");
    }
}