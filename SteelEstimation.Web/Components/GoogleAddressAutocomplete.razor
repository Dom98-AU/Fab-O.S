@using SteelEstimation.Core.Entities
@using Microsoft.JSInterop
@inject IJSRuntime JS
@implements IAsyncDisposable

<div class="google-address-autocomplete">
    <label class="form-label">@(Label ?? "Search Address")</label>
    <input type="text" 
           id="@inputId"
           class="form-control" 
           placeholder="Start typing an address..."
           style="text-transform: uppercase;" />
    
    @if (!string.IsNullOrEmpty(selectedAddress))
    {
        <small class="text-muted">
            <i class="fas fa-map-marker-alt"></i> @selectedAddress
        </small>
    }
</div>

@code {
    [Parameter] public Address Address { get; set; } = new();
    [Parameter] public EventCallback<Address> AddressChanged { get; set; }
    [Parameter] public string? Label { get; set; }
    [Parameter] public string? GoogleMapsApiKey { get; set; }

    private string inputId = $"address-input-{Guid.NewGuid():N}";
    private string selectedAddress = "";
    private IJSObjectReference? module;
    private DotNetObjectReference<GoogleAddressAutocomplete>? dotNetRef;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            dotNetRef = DotNetObjectReference.Create(this);
            module = await JS.InvokeAsync<IJSObjectReference>("import", "./js/googleAddressAutocomplete.js");
            
            if (!string.IsNullOrEmpty(GoogleMapsApiKey))
            {
                await module.InvokeVoidAsync("initializeGoogleAddressAutocomplete", 
                    inputId, dotNetRef, GoogleMapsApiKey);
            }
            else
            {
                Console.WriteLine("Google Maps API key not provided. Address autocomplete disabled.");
            }
        }
    }

    [JSInvokable]
    public async Task OnAddressSelected(string streetNumber, string streetName, string suburb, 
        string state, string postcode, string country, string formattedAddress)
    {
        // Build address line 1
        var addressLine1 = "";
        if (!string.IsNullOrEmpty(streetNumber))
            addressLine1 = streetNumber;
        if (!string.IsNullOrEmpty(streetName))
            addressLine1 = string.IsNullOrEmpty(addressLine1) ? streetName : $"{addressLine1} {streetName}";

        Address.AddressLine1 = addressLine1.ToUpper();
        Address.Suburb = suburb.ToUpper();
        Address.State = state.ToUpper();
        Address.PostCode = postcode;
        
        selectedAddress = formattedAddress.ToUpper();
        
        await AddressChanged.InvokeAsync(Address);
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        try
        {
            if (module != null)
            {
                await module.InvokeVoidAsync("cleanup", inputId);
                await module.DisposeAsync();
            }
        }
        catch (JSDisconnectedException)
        {
            // The circuit is disconnected, so we can't make JS interop calls
            // This is expected when the user navigates away or the connection is lost
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error disposing GoogleAddressAutocomplete: {ex.Message}");
        }
        finally
        {
            dotNetRef?.Dispose();
        }
    }
}