@using SteelEstimation.Core.Entities
@using SteelEstimation.Infrastructure.Data
@using Microsoft.EntityFrameworkCore
@using SteelEstimation.Core.Services
@using SteelEstimation.Core.Interfaces
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@inject IJSRuntime JSRuntime
@inject IMaterialTypeService MaterialTypeService
@inject IEfficiencyRateService EfficiencyRateService

<div class="estimation-summary-stats">
    @if (IsLoading)
    {
        <div class="text-center p-4">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else
    {
        <!-- Summary Cards -->
        <div class="row mb-4">
            @if (ShowTonnageCard)
            {
                <div class="col-md-3 mb-3">
                    <div class="card bg-primary text-white h-100">
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-start">
                                <div>
                                    <h6 class="card-title mb-1">Total Tonnage</h6>
                                    <h3 class="mb-0">@TotalTonnage.ToString("N2")</h3>
                                    <small>tonnes</small>
                                </div>
                                <i class="fas fa-weight-hanging fa-2x opacity-50"></i>
                            </div>
                            @if (ShowTrends && TonnageTrend != 0)
                            {
                                <div class="mt-2">
                                    <small>
                                        <i class="fas fa-arrow-@(TonnageTrend > 0 ? "up" : "down")"></i>
                                        @Math.Abs(TonnageTrend).ToString("N1")% from last period
                                    </small>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }

            @if (ShowItemsCard)
            {
                <div class="col-md-3 mb-3">
                    <div class="card bg-info text-white h-100">
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-start">
                                <div>
                                    <h6 class="card-title mb-1">Total Items</h6>
                                    <h3 class="mb-0">@TotalItems.ToString("N0")</h3>
                                    <small>@ProcessingItems proc. / @WeldingItems weld.</small>
                                </div>
                                <i class="fas fa-boxes fa-2x opacity-50"></i>
                            </div>
                        </div>
                    </div>
                </div>
            }

            @if (ShowLaborCard)
            {
                <div class="col-md-3 mb-3">
                    <div class="card bg-success text-white h-100">
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-start">
                                <div>
                                    <h6 class="card-title mb-1">Labor Hours</h6>
                                    @if (EfficiencyPercentage.HasValue && EfficiencyPercentage.Value != 100)
                                    {
                                        var adjustedHours = TotalLaborHours * (EfficiencyPercentage.Value / 100m);
                                        <h3 class="mb-0">@adjustedHours.ToString("N1")</h3>
                                        <small>@EfficiencyPercentage% efficiency</small>
                                    }
                                    else
                                    {
                                        <h3 class="mb-0">@TotalLaborHours.ToString("N1")</h3>
                                        <small>Processing + Welding</small>
                                    }
                                </div>
                                <i class="fas fa-clock fa-2x opacity-50"></i>
                            </div>
                        </div>
                    </div>
                </div>
            }

            @if (ShowCostCard)
            {
                <div class="col-md-3 mb-3">
                    <div class="card bg-warning text-white h-100">
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-start">
                                <div>
                                    <h6 class="card-title mb-1">@(ShowTonneRate ? "Tonne Rate" : "Total Cost")</h6>
                                    @if (ShowTonneRate)
                                    {
                                        var tonneRate = TotalTonnage > 0 ? TotalLaborCost / TotalTonnage : 0;
                                        <h3 class="mb-0">$@tonneRate.ToString("N2")</h3>
                                        <small>per tonne</small>
                                    }
                                    else
                                    {
                                        <h3 class="mb-0">$@TotalLaborCost.ToString("N0")</h3>
                                        <small>labor cost</small>
                                    }
                                </div>
                                <i class="fas fa-dollar-sign fa-2x opacity-50"></i>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>

        <!-- Charts Section -->
        @if (ShowCharts)
        {
            <div class="row">
                @if (ShowMaterialDistribution)
                {
                    <div class="col-md-6 mb-4">
                        <div class="card h-100">
                            <div class="card-header bg-light">
                                <h6 class="mb-0">
                                    <i class="fas fa-chart-pie text-primary me-2"></i>
                                    Material Distribution
                                </h6>
                            </div>
                            <div class="card-body">
                                <canvas id="@($"materialDistChart-{ComponentId}")" width="400" height="300"></canvas>
                                @if (materialBreakdown.Any())
                                {
                                    <div class="mt-3">
                                        <small class="text-muted">
                                            Total: @materialBreakdown.Sum(m => m.Value) items across @materialBreakdown.Count categories
                                        </small>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                }

                @if (ShowLaborBreakdown)
                {
                    <div class="col-md-6 mb-4">
                        <div class="card h-100">
                            <div class="card-header bg-light">
                                <h6 class="mb-0">
                                    <i class="fas fa-chart-bar text-success me-2"></i>
                                    Labor Hours Breakdown
                                </h6>
                            </div>
                            <div class="card-body">
                                <canvas id="@($"laborBreakdownChart-{ComponentId}")" width="400" height="300"></canvas>
                                <div class="mt-3">
                                    <div class="d-flex justify-content-between small">
                                        <span class="text-muted">Processing: @ProcessingHours.ToString("N1") hrs</span>
                                        <span class="text-muted">Welding: @WeldingHours.ToString("N1") hrs</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }

                @if (ShowPackageComparison && packageBreakdown.Any())
                {
                    <div class="col-12 mb-4">
                        <div class="card">
                            <div class="card-header bg-light">
                                <h6 class="mb-0">
                                    <i class="fas fa-chart-line text-info me-2"></i>
                                    Package Comparison
                                </h6>
                            </div>
                            <div class="card-body">
                                <canvas id="@($"packageComparisonChart-{ComponentId}")" width="800" height="400"></canvas>
                            </div>
                        </div>
                    </div>
                }

                @if (ShowProcessingTimeBreakdown && handlingBreakdown.Any(h => h.Value > 0))
                {
                    <div class="col-12 mb-4">
                        <div class="card">
                            <div class="card-header bg-light">
                                <h6 class="mb-0">
                                    <i class="fas fa-tasks text-warning me-2"></i>
                                    Processing Time Analysis
                                </h6>
                            </div>
                            <div class="card-body">
                                <canvas id="@($"processingTimeChart-{ComponentId}")" width="800" height="300"></canvas>
                                <div class="mt-3">
                                    <small class="text-muted">
                                        Total processing time: @handlingBreakdown.Sum(h => h.Value).ToString("N1") hours
                                    </small>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }

        <!-- Additional Statistics -->
        @if (ShowDetailedStats)
        {
            <div class="row mt-4">
                <div class="col-12">
                    <div class="card">
                        <div class="card-header bg-light">
                            <h6 class="mb-0">Detailed Statistics</h6>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-4">
                                    <h6 class="text-muted">Productivity Metrics</h6>
                                    <dl class="row">
                                        <dt class="col-sm-8">Items per Hour:</dt>
                                        <dd class="col-sm-4">@((TotalLaborHours > 0 ? TotalItems / TotalLaborHours : 0).ToString("N2"))</dd>
                                        <dt class="col-sm-8">Tonnes per Hour:</dt>
                                        <dd class="col-sm-4">@((TotalLaborHours > 0 ? TotalTonnage / TotalLaborHours : 0).ToString("N3"))</dd>
                                        <dt class="col-sm-8">Avg Item Weight:</dt>
                                        <dd class="col-sm-4">@((TotalItems > 0 ? TotalTonnage * 1000 / TotalItems : 0).ToString("N1")) kg</dd>
                                    </dl>
                                </div>
                                <div class="col-md-4">
                                    <h6 class="text-muted">Time Distribution</h6>
                                    <dl class="row">
                                        <dt class="col-sm-8">Processing %:</dt>
                                        <dd class="col-sm-4">@((TotalLaborHours > 0 ? ProcessingHours / TotalLaborHours * 100 : 0).ToString("N1"))%</dd>
                                        <dt class="col-sm-8">Welding %:</dt>
                                        <dd class="col-sm-4">@((TotalLaborHours > 0 ? WeldingHours / TotalLaborHours * 100 : 0).ToString("N1"))%</dd>
                                        <dt class="col-sm-8">Avg Process/Item:</dt>
                                        <dd class="col-sm-4">@((ProcessingItems > 0 ? ProcessingHours * 60 / ProcessingItems : 0).ToString("N1")) min</dd>
                                    </dl>
                                </div>
                                <div class="col-md-4">
                                    <h6 class="text-muted">Cost Analysis</h6>
                                    <dl class="row">
                                        <dt class="col-sm-8">Labor Rate:</dt>
                                        <dd class="col-sm-4">$@AverageLaborRate.ToString("N2")/hr</dd>
                                        <dt class="col-sm-8">Cost per Item:</dt>
                                        <dd class="col-sm-4">$@((TotalItems > 0 ? TotalLaborCost / TotalItems : 0).ToString("N2"))</dd>
                                        <dt class="col-sm-8">Processing Cost:</dt>
                                        <dd class="col-sm-4">$@(ProcessingHours * AverageLaborRate).ToString("N0")</dd>
                                    </dl>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    }
</div>

<style>
    .estimation-summary-stats .card {
        border: none;
        box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
        transition: transform 0.2s;
    }

    .estimation-summary-stats .card:hover {
        transform: translateY(-2px);
        box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
    }

    .estimation-summary-stats .stat-card {
        padding: 1rem;
        background-color: #f8f9fa;
        border-radius: 0.25rem;
        height: 100%;
    }

    .estimation-summary-stats canvas {
        max-height: 300px;
    }
</style>

@code {
    // Component Parameters
    [Parameter] public int? EstimationId { get; set; }
    [Parameter] public List<int>? EstimationIds { get; set; }
    [Parameter] public int? CompanyId { get; set; }
    [Parameter] public DateTime? StartDate { get; set; }
    [Parameter] public DateTime? EndDate { get; set; }
    
    // Display Options
    [Parameter] public bool ShowTonnageCard { get; set; } = true;
    [Parameter] public bool ShowItemsCard { get; set; } = true;
    [Parameter] public bool ShowLaborCard { get; set; } = true;
    [Parameter] public bool ShowCostCard { get; set; } = true;
    [Parameter] public bool ShowTonneRate { get; set; } = true;
    [Parameter] public bool ShowCharts { get; set; } = true;
    [Parameter] public bool ShowMaterialDistribution { get; set; } = true;
    [Parameter] public bool ShowLaborBreakdown { get; set; } = true;
    [Parameter] public bool ShowPackageComparison { get; set; } = true;
    [Parameter] public bool ShowProcessingTimeBreakdown { get; set; } = true;
    [Parameter] public bool ShowDetailedStats { get; set; } = false;
    [Parameter] public bool ShowTrends { get; set; } = false;
    
    // Efficiency Options
    [Parameter] public decimal? EfficiencyPercentage { get; set; }
    [Parameter] public EventCallback<decimal?> EfficiencyPercentageChanged { get; set; }
    
    // Component State
    private bool IsLoading = true;
    private string ComponentId = Guid.NewGuid().ToString("N").Substring(0, 8);
    
    // Summary Data
    private decimal TotalTonnage;
    private int TotalItems;
    private int ProcessingItems;
    private int WeldingItems;
    private decimal TotalLaborHours;
    private decimal ProcessingHours;
    private decimal WeldingHours;
    private decimal TotalLaborCost;
    private decimal AverageLaborRate = 65m; // Default rate
    
    // Trends
    private decimal TonnageTrend;
    
    // Breakdown Data
    private Dictionary<string, int> materialBreakdown = new();
    private Dictionary<string, decimal> handlingBreakdown = new();
    private Dictionary<string, PackageStats> packageBreakdown = new();
    
    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!IsLoading && ShowCharts)
        {
            await DrawCharts();
        }
    }
    
    public async Task RefreshAsync()
    {
        await LoadData();
        if (ShowCharts)
        {
            await DrawCharts();
        }
    }
    
    private async Task LoadData()
    {
        IsLoading = true;
        
        try
        {
            using var context = await DbContextFactory.CreateDbContextAsync();
            
            // Build query based on parameters
            IQueryable<Package> query = context.Packages
                .Include(p => p.Project)
                .Include(p => p.Worksheets)
                .Where(p => !p.IsDeleted && !p.Project.IsDeleted);
            
            if (EstimationId.HasValue)
            {
                query = query.Where(p => p.ProjectId == EstimationId.Value);
            }
            else if (EstimationIds != null && EstimationIds.Any())
            {
                query = query.Where(p => EstimationIds.Contains(p.ProjectId));
            }
            
            if (CompanyId.HasValue)
            {
                query = query.Where(p => p.Project.Customer != null && p.Project.Customer.CompanyId == CompanyId.Value);
            }
            
            if (StartDate.HasValue)
            {
                query = query.Where(p => p.Project.CreatedDate >= StartDate.Value);
            }
            
            if (EndDate.HasValue)
            {
                query = query.Where(p => p.Project.CreatedDate <= EndDate.Value);
            }
            
            var packages = await query.ToListAsync();
            
            if (!packages.Any())
            {
                IsLoading = false;
                return;
            }
            
            // Reset counters
            TotalTonnage = 0;
            TotalItems = 0;
            ProcessingItems = 0;
            WeldingItems = 0;
            ProcessingHours = 0;
            WeldingHours = 0;
            TotalLaborCost = 0;
            
            materialBreakdown.Clear();
            handlingBreakdown = new Dictionary<string, decimal>
            {
                { "Unload Time", 0 },
                { "Mark/Measure/Cut", 0 },
                { "Quality Check/Clean", 0 },
                { "Move to Assembly", 0 },
                { "Move After Weld", 0 },
                { "Loading Time", 0 }
            };
            packageBreakdown.Clear();
            
            decimal totalLaborRates = 0;
            int packageCount = 0;
            
            foreach (var package in packages)
            {
                var stats = new PackageStats
                {
                    PackageNumber = package.PackageNumber,
                    PackageName = package.PackageName
                };
                
                // Get processing items
                var processingItemsList = await context.ProcessingItems
                    .Include(p => p.PackageWorksheet)
                    .Where(p => p.PackageWorksheet != null && p.PackageWorksheet.PackageId == package.Id)
                    .ToListAsync();
                
                // Get welding items
                var weldingItemsList = await context.WeldingItems
                    .Include(w => w.PackageWorksheet)
                    .Where(w => w.PackageWorksheet != null && w.PackageWorksheet.PackageId == package.Id)
                    .ToListAsync();
                
                // Calculate metrics
                stats.ItemCount = processingItemsList.Count + weldingItemsList.Count;
                stats.Tonnage = processingItemsList.Sum(p => p.TotalWeight) / 1000m;
                stats.ProcessingHours = processingItemsList.Sum(p => p.TotalProcessingMinutes) / 60m;
                stats.WeldingHours = weldingItemsList.Sum(w => w.TotalWeldingMinutes) / 60m;
                stats.TotalHours = stats.ProcessingHours + stats.WeldingHours;
                stats.LaborCost = stats.TotalHours * package.LaborRatePerHour;
                
                // Update totals
                TotalItems += stats.ItemCount;
                ProcessingItems += processingItemsList.Count;
                WeldingItems += weldingItemsList.Count;
                TotalTonnage += stats.Tonnage;
                ProcessingHours += stats.ProcessingHours;
                WeldingHours += stats.WeldingHours;
                TotalLaborCost += stats.LaborCost;
                
                totalLaborRates += package.LaborRatePerHour;
                packageCount++;
                
                // Update handling breakdown
                var unbundledItems = processingItemsList.Where(p => p.DeliveryBundleId == null || p.IsParentInBundle);
                handlingBreakdown["Unload Time"] += unbundledItems.Sum(p => p.UnloadTimePerBundle) / 60m;
                handlingBreakdown["Mark/Measure/Cut"] += processingItemsList.Sum(p => p.MarkMeasureCut * p.Quantity) / 60m;
                handlingBreakdown["Quality Check/Clean"] += processingItemsList.Sum(p => p.QualityCheckClean * p.Quantity) / 60m;
                
                var packBundledItems = processingItemsList.Where(p => p.PackBundleId == null || p.IsParentInPackBundle);
                handlingBreakdown["Move to Assembly"] += packBundledItems.Sum(p => p.MoveToAssembly) / 60m;
                handlingBreakdown["Move After Weld"] += packBundledItems.Sum(p => p.MoveAfterWeld) / 60m;
                handlingBreakdown["Loading Time"] += unbundledItems.Sum(p => p.LoadingTimePerBundle) / 60m;
                
                // Update material breakdown
                foreach (var item in processingItemsList.Where(p => p.Quantity > 0))
                {
                    var category = GetMaterialCategory(item.MaterialId);
                    if (!materialBreakdown.ContainsKey(category))
                        materialBreakdown[category] = 0;
                    materialBreakdown[category]++;
                }
                
                packageBreakdown[package.PackageNumber] = stats;
            }
            
            TotalLaborHours = ProcessingHours + WeldingHours;
            
            if (packageCount > 0)
            {
                AverageLaborRate = totalLaborRates / packageCount;
            }
            
            // Apply efficiency if set
            if (EfficiencyPercentage.HasValue && EfficiencyPercentage.Value != 100)
            {
                var factor = EfficiencyPercentage.Value / 100m;
                ProcessingHours *= factor;
                WeldingHours *= factor;
                TotalLaborHours *= factor;
                TotalLaborCost = TotalLaborHours * AverageLaborRate;
            }
        }
        finally
        {
            IsLoading = false;
        }
    }
    
    private async Task DrawCharts()
    {
        // Draw material distribution chart
        if (ShowMaterialDistribution && materialBreakdown.Any())
        {
            var labels = materialBreakdown.Where(m => m.Value > 0).Select(m => m.Key).ToArray();
            var data = materialBreakdown.Where(m => m.Value > 0).Select(m => m.Value).ToArray();
            
            await JSRuntime.InvokeVoidAsync("estimationSummaryCharts.drawPieChart", 
                $"materialDistChart-{ComponentId}", labels, data, "Material Distribution");
        }
        
        // Draw labor breakdown chart
        if (ShowLaborBreakdown)
        {
            await JSRuntime.InvokeVoidAsync("estimationSummaryCharts.drawBarChart",
                $"laborBreakdownChart-{ComponentId}", 
                new[] { "Processing", "Welding" }, 
                new[] { ProcessingHours, WeldingHours },
                "Labor Hours");
        }
        
        // Draw package comparison chart
        if (ShowPackageComparison && packageBreakdown.Any())
        {
            var labels = packageBreakdown.Keys.ToArray();
            var tonnageData = packageBreakdown.Values.Select(p => p.Tonnage).ToArray();
            var hoursData = packageBreakdown.Values.Select(p => p.TotalHours).ToArray();
            
            await JSRuntime.InvokeVoidAsync("estimationSummaryCharts.drawComboChart",
                $"packageComparisonChart-{ComponentId}", labels, tonnageData, hoursData);
        }
        
        // Draw processing time breakdown
        if (ShowProcessingTimeBreakdown && handlingBreakdown.Any(h => h.Value > 0))
        {
            var labels = handlingBreakdown.Where(h => h.Value > 0).Select(h => h.Key).ToArray();
            var data = handlingBreakdown.Where(h => h.Value > 0).Select(h => h.Value).ToArray();
            
            await JSRuntime.InvokeVoidAsync("estimationSummaryCharts.drawHorizontalBarChart",
                $"processingTimeChart-{ComponentId}", labels, data, "Processing Time (hours)");
        }
    }
    
    private string GetMaterialCategory(string? materialId)
    {
        if (string.IsNullOrEmpty(materialId)) return "Other";
        
        var upper = materialId.ToUpper();
        
        if (upper.Contains("BEAM") || upper.Contains("UB") || upper.Contains("UC") || 
            upper.Contains("PFC") || upper.Contains("RSJ"))
            return "Beams";
        
        if (upper.Contains("PLATE") || upper.Contains("FL") || upper.Contains("PL"))
            return "Plates";
        
        if (upper.Contains("PURLIN") || upper.Contains("C15") || upper.Contains("C20") || 
            upper.Contains("C25") || upper.Contains("Z15") || upper.Contains("Z20"))
            return "Purlins";
        
        if (upper.Contains("ANGLE") || upper.Contains("L"))
            return "Angles";
        
        if (upper.Contains("TUBE") || upper.Contains("RHS") || upper.Contains("SHS") || upper.Contains("CHS"))
            return "Tubes";
        
        return "Other";
    }
    
    private class PackageStats
    {
        public string PackageNumber { get; set; } = "";
        public string PackageName { get; set; } = "";
        public int ItemCount { get; set; }
        public decimal Tonnage { get; set; }
        public decimal ProcessingHours { get; set; }
        public decimal WeldingHours { get; set; }
        public decimal TotalHours { get; set; }
        public decimal LaborCost { get; set; }
    }
}