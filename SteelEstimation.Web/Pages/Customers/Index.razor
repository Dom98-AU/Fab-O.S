@page "/customers"
@using Microsoft.EntityFrameworkCore
@using SteelEstimation.Core.Entities
@using SteelEstimation.Infrastructure.Data
@using SteelEstimation.Web.Shared.Components
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject NavigationManager Navigation
@inject IFabOSAuthenticationService AuthService
@inject IJSRuntime JSRuntime
@implements IDisposable
@attribute [Authorize(Policy = "Estimator")]

<PageTitle>Customers - Steel Estimation Platform</PageTitle>

<div class="container-fluid">
    <div class="row mb-3">
        <div class="col">
            <h1>
                <i class="fas fa-building me-2"></i>Customers
            </h1>
        </div>
    </div>

    <div class="mb-2">
        <h6 class="text-muted mb-2">Toolbar</h6>
    </div>
    <StandardToolbar 
        ShowNew="true"
        NewLabel="New"
        OnNewClick="CreateNewCustomer"
        ShowImport="false"
        ShowExport="false"
        ShowBulkDelete="true"
        HasSelection="hasSelection"
        SelectionCount="selectedCount"
        OnBulkDeleteClick="DeleteSelectedCustomers"
        ShowReport="true"
        ReportItems="reportItems"
        OnReportClick="GenerateReport"
        ShowActions="true"
        ActionItems="actionItems"
        OnActionClick="HandleAction"
        ShowRelated="true"
        RelatedItems="relatedItems"
        ShowSearch="true"
        SearchPlaceholder="Search customers..."
        @bind-SearchTerm="searchTerm"
        ShowRefresh="true"
        IsRefreshing="_isRefreshing"
        OnRefreshClick="RefreshData"
        ShowFilter="false"
        ShowViewOptions="false">
        
        <SecondaryActions>
            <select class="form-select form-select-sm" style="width: auto;" @bind="filterActive">
                <option value="">All Customers</option>
                <option value="true">Active Only</option>
                <option value="false">Inactive Only</option>
            </select>
        </SecondaryActions>
    </StandardToolbar>

    <div class="card">
        <div class="card-body">

            @if (customers == null)
            {
                <div class="text-center p-4">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else if (!filteredCustomers.Any())
            {
                <div class="alert alert-info">
                    <i class="fas fa-info-circle me-2"></i>
                    No customers found. Click "New Customer" to add your first customer.
                </div>
            }
            else
            {
                <div class="table-wrapper">
                    <table class="table table-hover customers-table">
                        <thead>
                            <tr>
                                <th style="width: 40px;">
                                    <input type="checkbox" class="form-check-input" @onclick="@(() => SelectAllCustomers())" @onclick:stopPropagation="true" checked="@allSelected" />
                                </th>
                                <th @onclick="@(() => SortBy("CompanyName"))" style="cursor: pointer;">
                                    Company Name
                                    @if (sortField == "CompanyName")
                                    {
                                        <i class="fas fa-sort-@(sortAscending ? "up" : "down") ms-1"></i>
                                    }
                                </th>
                                <th>Trading Name</th>
                                <th>ABN</th>
                                <th>Contacts</th>
                                <th>Projects</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var customer in pagedCustomers)
                            {
                                <tr @onclick="@(() => ViewCustomer(customer.Id))" style="cursor: pointer;" class="@(selectedCustomerIds.Contains(customer.Id) ? "table-active" : "")">
                                    <td @onclick:stopPropagation="true">
                                        <input type="checkbox" class="form-check-input" checked="@selectedCustomerIds.Contains(customer.Id)" 
                                               @onchange="@(() => ToggleCustomerSelection(customer.Id))" />
                                    </td>
                                    <td>
                                        <strong>@customer.CompanyName</strong>
                                    </td>
                                    <td>@(customer.TradingName ?? "-")</td>
                                    <td>
                                        <code>@FormatABN(customer.ABN)</code>
                                    </td>
                                    <td>
                                        <span class="badge bg-secondary">
                                            @customer.Contacts.Count(c => c.IsActive)
                                        </span>
                                    </td>
                                    <td>
                                        <span class="badge bg-primary">
                                            @customer.Projects.Count(p => !p.IsDeleted)
                                        </span>
                                    </td>
                                    <td>
                                        @if (customer.IsActive)
                                        {
                                            <span class="badge bg-success">Active</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-danger">Inactive</span>
                                        }
                                    </td>
                                    <td @onclick:stopPropagation="true">
                                        <div class="btn-group btn-group-sm">
                                            <button class="btn btn-outline-primary" @onclick="@(() => EditCustomer(customer.Id))"
                                                    title="Edit">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                            <button class="btn btn-outline-info" @onclick="@(() => ViewCustomer(customer.Id))"
                                                    title="View Details">
                                                <i class="fas fa-eye"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                @if (totalPages > 1)
                {
                    <nav>
                        <ul class="pagination justify-content-center">
                            <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                <button class="page-link" @onclick="@(() => ChangePage(currentPage - 1))">
                                    Previous
                                </button>
                            </li>
                            @for (int i = 1; i <= totalPages; i++)
                            {
                                var pageNum = i;
                                <li class="page-item @(currentPage == pageNum ? "active" : "")">
                                    <button class="page-link" @onclick="@(() => ChangePage(pageNum))">
                                        @pageNum
                                    </button>
                                </li>
                            }
                            <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                <button class="page-link" @onclick="@(() => ChangePage(currentPage + 1))">
                                    Next
                                </button>
                            </li>
                        </ul>
                    </nav>
                }
            }
        </div>
    </div>
</div>

@code {
    private List<Customer>? customers;
    private string searchTerm = "";
    private string filterActive = "true"; // Default to active only
    private string sortField = "CompanyName";
    private bool sortAscending = true;
    private int currentPage = 1;
    private int pageSize = 20;
    private int? companyId;
    private DotNetObjectReference<Index>? dotNetRef;
    private bool _isRefreshing = false;
    private bool hasSelection = false;
    private int selectedCount = 0;
    private HashSet<int> selectedCustomerIds = new();

    // Toolbar configuration
    private List<StandardToolbar.ToolbarReportItem> reportItems = new()
    {
        new() { Key = "summary", Label = "Customer Summary", Icon = "fas fa-chart-pie" },
        new() { Key = "active", Label = "Active Customers", Icon = "fas fa-check-circle" },
        new() { Key = "projects", Label = "Projects by Customer", Icon = "fas fa-project-diagram" },
        new() { Key = "export-csv", Label = "Export to CSV", Icon = "fas fa-file-csv" },
        new() { Key = "export-pdf", Label = "Export to PDF", Icon = "fas fa-file-pdf" }
    };

    private List<StandardToolbar.ToolbarActionItem> actionItems = new()
    {
        new() { Key = "merge", Label = "Merge Customers", Icon = "fas fa-code-branch" },
        new() { Key = "archive", Label = "Archive Inactive", Icon = "fas fa-archive" },
        new() { IsDivider = true },
        new() { Key = "settings", Label = "List Settings", Icon = "fas fa-cog" },
        new() { Key = "clear-filters", Label = "Clear All Filters", Icon = "fas fa-filter-circle-xmark" }
    };

    private List<StandardToolbar.ToolbarRelatedItem> relatedItems = new()
    {
        new() { Label = "Projects", Url = "/projects", Icon = "fas fa-project-diagram", Count = 0 },
        new() { Label = "Contacts", Url = "/contacts", Icon = "fas fa-address-book", Count = 0 },
        new() { Label = "Estimations", Url = "/estimation", Icon = "fas fa-calculator", Count = 0 }
    };

    private IEnumerable<Customer> filteredCustomers => customers?.Where(c =>
        (string.IsNullOrWhiteSpace(searchTerm) ||
         c.CompanyName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
         (c.TradingName != null && c.TradingName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
         c.ABN.Contains(searchTerm)) &&
        (string.IsNullOrEmpty(filterActive) ||
         (filterActive == "true" && c.IsActive) ||
         (filterActive == "false" && !c.IsActive))
    ) ?? Enumerable.Empty<Customer>();

    private IEnumerable<Customer> sortedCustomers => sortField switch
    {
        "CompanyName" => sortAscending ? 
            filteredCustomers.OrderBy(c => c.CompanyName) : 
            filteredCustomers.OrderByDescending(c => c.CompanyName),
        _ => filteredCustomers
    };

    private IEnumerable<Customer> pagedCustomers => sortedCustomers
        .Skip((currentPage - 1) * pageSize)
        .Take(pageSize);

    private int totalPages => (int)Math.Ceiling((double)filteredCustomers.Count() / pageSize);
    
    private bool allSelected => pagedCustomers.Any() && pagedCustomers.All(c => selectedCustomerIds.Contains(c.Id));

    protected override async Task OnInitializedAsync()
    {
        companyId = await AuthService.GetUserCompanyIdAsync();
        dotNetRef = DotNetObjectReference.Create(this);
        await LoadCustomers();
        UpdateRelatedCounts();
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Initialize enhanced table features with view modes
            await JSRuntime.InvokeVoidAsync("enhancedTable.init", ".customers-table", new
            {
                enableResize = true,
                enableReorder = true,
                enableViewSaving = true,
                enableFreezeColumns = true,
                freezeColumns = 1, // Freeze the Company Name column
                tableType = "Customers",
                dotNetRef = dotNetRef,
                viewMode = "list", // Start with list view (can be "list", "compactList", or "cardView")
                enableViewModes = true // Enable the view mode switcher
            });
        }
    }

    private async Task LoadCustomers()
    {
        using var context = await DbFactory.CreateDbContextAsync();
        
        customers = await context.Customers
            .Include(c => c.Contacts)
            .Include(c => c.Projects)
            .Where(c => c.CompanyId == companyId)
            .ToListAsync();
    }

    private void SortBy(string field)
    {
        if (sortField == field)
        {
            sortAscending = !sortAscending;
        }
        else
        {
            sortField = field;
            sortAscending = true;
        }
    }

    private void ChangePage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
        }
    }

    private void CreateNewCustomer()
    {
        Navigation.NavigateTo("/customers/new");
    }

    private void EditCustomer(int customerId)
    {
        Navigation.NavigateTo($"/customers/edit/{customerId}");
    }

    private void ViewCustomer(int customerId)
    {
        Navigation.NavigateTo($"/customers/{customerId}");
    }

    private string FormatABN(string abn)
    {
        if (string.IsNullOrEmpty(abn) || abn.Length != 11)
            return abn;
            
        return $"{abn.Substring(0, 2)} {abn.Substring(2, 3)} {abn.Substring(5, 3)} {abn.Substring(8, 3)}";
    }
    
    [JSInvokable]
    public async Task ReorderColumns(string fromColumn, string toColumn, bool dropBefore)
    {
        // Column reordering would be handled here
        // For now, just refresh the display
        StateHasChanged();
    }
    
    // New methods for StandardToolbar
    private void ToggleCustomerSelection(int customerId)
    {
        if (selectedCustomerIds.Contains(customerId))
        {
            selectedCustomerIds.Remove(customerId);
        }
        else
        {
            selectedCustomerIds.Add(customerId);
        }
        UpdateSelectionState();
    }
    
    private void SelectAllCustomers()
    {
        if (allSelected)
        {
            // Deselect all on current page
            foreach (var customer in pagedCustomers)
            {
                selectedCustomerIds.Remove(customer.Id);
            }
        }
        else
        {
            // Select all on current page
            foreach (var customer in pagedCustomers)
            {
                selectedCustomerIds.Add(customer.Id);
            }
        }
        UpdateSelectionState();
    }
    
    private void UpdateSelectionState()
    {
        hasSelection = selectedCustomerIds.Any();
        selectedCount = selectedCustomerIds.Count;
        StateHasChanged();
    }
    
    private async Task DeleteSelectedCustomers()
    {
        if (!selectedCustomerIds.Any())
            return;
            
        // Implementation for deleting selected customers
        Console.WriteLine($"Deleting {selectedCount} customers...");
        
        using var context = await DbFactory.CreateDbContextAsync();
        var customersToDelete = await context.Customers
            .Where(c => selectedCustomerIds.Contains(c.Id))
            .ToListAsync();
            
        // Soft delete the customers
        foreach (var customer in customersToDelete)
        {
            customer.IsActive = false;
        }
        
        await context.SaveChangesAsync();
        
        // Clear selection and reload
        selectedCustomerIds.Clear();
        UpdateSelectionState();
        await LoadCustomers();
    }
    
    private async Task GenerateReport(string reportType)
    {
        Console.WriteLine($"Generating report: {reportType}");
        // Implementation for generating different reports
        switch (reportType)
        {
            case "summary":
                Navigation.NavigateTo("/reports/customers/summary");
                break;
            case "active":
                Navigation.NavigateTo("/reports/customers/active");
                break;
            case "projects":
                Navigation.NavigateTo("/reports/customers/projects");
                break;
            case "export-csv":
                // Export to CSV logic
                break;
            case "export-pdf":
                // Export to PDF logic
                break;
        }
    }
    
    private async Task HandleAction(string action)
    {
        Console.WriteLine($"Handling action: {action}");
        switch (action)
        {
            case "merge":
                // Open merge dialog
                break;
            case "archive":
                // Archive inactive customers
                break;
            case "settings":
                // Open settings dialog
                break;
            case "clear-filters":
                searchTerm = "";
                filterActive = "";
                StateHasChanged();
                break;
        }
    }
    
    private async Task RefreshData()
    {
        _isRefreshing = true;
        StateHasChanged();
        await Task.Delay(100); // Allow UI to update
        await LoadCustomers();
        UpdateRelatedCounts();
        _isRefreshing = false;
        StateHasChanged();
    }
    
    
    private void UpdateRelatedCounts()
    {
        if (customers != null)
        {
            relatedItems[0].Count = customers.Sum(c => c.Projects.Count(p => !p.IsDeleted));
            relatedItems[1].Count = customers.Sum(c => c.Contacts.Count(ct => ct.IsActive));
            relatedItems[2].Count = customers.SelectMany(c => c.Projects).Count(p => !p.IsDeleted);
        }
    }
    
    public void Dispose()
    {
        dotNetRef?.Dispose();
    }
}