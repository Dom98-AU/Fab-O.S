@page "/customers"
@using Microsoft.EntityFrameworkCore
@using SteelEstimation.Core.Entities
@using SteelEstimation.Infrastructure.Data
@using SteelEstimation.Web.Shared.Components
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject NavigationManager Navigation
@inject IFabOSAuthenticationService AuthService
@inject IJSRuntime JSRuntime
@attribute [Authorize(Policy = "Estimator")]

<PageTitle>Customers - Steel Estimation Platform</PageTitle>

<div class="container-fluid px-0">
    <StandardToolbar 
        ShowNew="true"
        NewLabel="New"
        OnNewClick="CreateNewCustomer"
        ShowDelete="true"
        OnDeleteClick="DeleteSelectedItem"
        ShowImport="false"
        ShowExport="false"
        ShowBulkDelete="true"
        HasSelection="hasSelection"
        SelectionCount="selectedCount"
        OnBulkDeleteClick="DeleteSelectedCustomers"
        ShowReport="true"
        ReportItems="reportItems"
        OnReportClick="GenerateReport"
        ShowActions="true"
        ActionItems="actionItems"
        OnActionClick="HandleAction"
        ShowRelated="true"
        RelatedItems="relatedItems"
        ShowSearch="true"
        SearchPlaceholder="Search customers..."
        @bind-SearchTerm="searchTerm"
        ShowRefresh="true"
        IsRefreshing="_isRefreshing"
        OnRefreshClick="RefreshData"
        ShowFilter="false"
        ShowViewOptions="false">
    </StandardToolbar>

    <!-- View Mode Switcher -->
    <div class="d-flex justify-content-end align-items-center mb-3">
        <div class="btn-group" role="group">
            <button class="btn btn-sm @(currentViewMode == ViewMode.Table ? "btn-primary" : "btn-outline-primary")"
                    @onclick="() => SetViewMode(ViewMode.Table)">
                <i class="fas fa-table"></i> Table
            </button>
            <button class="btn btn-sm @(currentViewMode == ViewMode.Card ? "btn-primary" : "btn-outline-primary")"
                    @onclick="() => SetViewMode(ViewMode.Card)">
                <i class="fas fa-th"></i> Cards
            </button>
            <button class="btn btn-sm @(currentViewMode == ViewMode.List ? "btn-primary" : "btn-outline-primary")"
                    @onclick="() => SetViewMode(ViewMode.List)">
                <i class="fas fa-list"></i> List
            </button>
        </div>
    </div>

    <div class="card mt-1">
        <div class="card-body">
            @if (customers == null)
            {
                <div class="text-center p-4">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else if (currentViewMode == ViewMode.Table)
            {
                <!-- Table View using DataTable Component -->
                <DataTable TItem="Customer"
                           Items="@customers"
                           Columns="@tableColumns"
                           ShowSelection="true"
                           ShowActions="true"
                           ShowPagination="true"
                           PageSize="20"
                           SearchTerm="@searchTerm"
                           FilterPredicate="@(c => string.IsNullOrEmpty(filterActive) || 
                                                   (filterActive == "true" && c.IsActive) || 
                                                   (filterActive == "false" && !c.IsActive))"
                           SelectedItems="@selectedCustomers"
                           OnSelectionChanged="@OnSelectionChanged"
                           OnRowClick="@(customer => ViewCustomer(customer.Id))"
                           OnEdit="@(customer => EditCustomer(customer.Id))"
                           OnView="@(customer => ViewCustomer(customer.Id))"
                           EmptyMessage="No customers found. Click 'New' to add your first customer."
                           TableClass="customers-table" />
            }
            else
            {
                <!-- Card/List View using CustomerCardView Component -->
                <div class="text-muted mb-2">Total customers: @customers.Count | Filtered: @filteredCustomers.Count()</div>
                <CustomerCardView 
                    Customers="@filteredCustomers.ToList()"
                    SelectedCustomerIds="@selectedCustomerIds"
                    ViewMode="@(currentViewMode == ViewMode.Card ? CustomerCardView.CardViewMode.Grid : CustomerCardView.CardViewMode.List)"
                    ColumnsPerRow="3"
                    OnCustomerClick="@((customer) => ViewCustomer(customer.Id))"
                    OnEditClick="@EditCustomer"
                    OnViewClick="@ViewCustomer"
                    OnSelectionToggle="@((id) => { UpdateSelectionState(); StateHasChanged(); })" />
            }
        </div>
    </div>
</div>

@code {
    // View mode management
    private ViewMode currentViewMode = ViewMode.Table;
    
    public enum ViewMode
    {
        Table,
        Card,
        List
    }
    
    private List<Customer>? customers;
    private string searchTerm = "";
    private string filterActive = ""; // Show all customers by default
    private string sortField = "CompanyName";
    private bool sortAscending = true;
    private int currentPage = 1;
    private int pageSize = 20;
    private int? companyId;
    private bool _isRefreshing = false;
    private bool hasSelection = false;
    private int selectedCount = 0;
    private HashSet<int> selectedCustomerIds = new();
    private HashSet<Customer> selectedCustomers = new();
    
    // DataTable columns configuration - initialized in OnInitializedAsync
    private List<DataTable<Customer>.TableColumn<Customer>> tableColumns = new();

    // Toolbar configuration
    private List<StandardToolbar.ToolbarReportItem> reportItems = new()
    {
        new() { Key = "summary", Label = "Customer Summary", Icon = "fas fa-chart-pie" },
        new() { Key = "active", Label = "Active Customers", Icon = "fas fa-check-circle" },
        new() { Key = "projects", Label = "Projects by Customer", Icon = "fas fa-project-diagram" },
        new() { Key = "export-csv", Label = "Export to CSV", Icon = "fas fa-file-csv" },
        new() { Key = "export-pdf", Label = "Export to PDF", Icon = "fas fa-file-pdf" }
    };

    private List<StandardToolbar.ToolbarActionItem> actionItems = new()
    {
        new() { Key = "merge", Label = "Merge Customers", Icon = "fas fa-code-branch" },
        new() { Key = "archive", Label = "Archive Inactive", Icon = "fas fa-archive" },
        new() { IsDivider = true },
        new() { Key = "settings", Label = "List Settings", Icon = "fas fa-cog" },
        new() { Key = "clear-filters", Label = "Clear All Filters", Icon = "fas fa-filter-circle-xmark" }
    };

    private List<StandardToolbar.ToolbarRelatedItem> relatedItems = new()
    {
        new() { Label = "Projects", Url = "/projects", Icon = "fas fa-project-diagram", Count = 0 },
        new() { Label = "Contacts", Url = "/contacts", Icon = "fas fa-address-book", Count = 0 },
        new() { Label = "Estimations", Url = "/estimation", Icon = "fas fa-calculator", Count = 0 }
    };

    private IEnumerable<Customer> filteredCustomers => customers?.Where(c =>
        (string.IsNullOrWhiteSpace(searchTerm) ||
         c.CompanyName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
         (c.TradingName != null && c.TradingName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
         c.ABN.Contains(searchTerm)) &&
        (string.IsNullOrEmpty(filterActive) ||
         (filterActive == "true" && c.IsActive) ||
         (filterActive == "false" && !c.IsActive))
    ) ?? Enumerable.Empty<Customer>();

    private IEnumerable<Customer> sortedCustomers => sortField switch
    {
        "CompanyName" => sortAscending ? 
            filteredCustomers.OrderBy(c => c.CompanyName) : 
            filteredCustomers.OrderByDescending(c => c.CompanyName),
        _ => filteredCustomers
    };

    private IEnumerable<Customer> pagedCustomers => sortedCustomers
        .Skip((currentPage - 1) * pageSize)
        .Take(pageSize);

    private int totalPages => (int)Math.Ceiling((double)filteredCustomers.Count() / pageSize);
    
    private bool allSelected => pagedCustomers.Any() && pagedCustomers.All(c => selectedCustomerIds.Contains(c.Id));

    protected override async Task OnInitializedAsync()
    {
        companyId = await AuthService.GetUserCompanyIdAsync();
        
        // Initialize DataTable columns
        tableColumns = new()
        {
            new() { Field = "CompanyName", Title = "Company Name", Sortable = true,
                    Template = (customer) => @<strong>@customer.CompanyName</strong> },
            new() { Field = "TradingName", Title = "Trading Name", 
                    Template = (customer) => @<text>@(customer.TradingName ?? "-")</text> },
            new() { Field = "ABN", Title = "ABN",
                    Template = (customer) => @<text>@FormatABN(customer.ABN)</text> },
            new() { Field = "Contacts", Title = "Contacts",
                    Template = (customer) => @<span class="badge bg-secondary">@customer.Contacts.Count(c => c.IsActive)</span> },
            new() { Field = "Projects", Title = "Projects",
                    Template = (customer) => @<span class="badge bg-primary">@customer.Projects.Count(p => !p.IsDeleted)</span> },
            new() { Field = "Status", Title = "Status",
                    Template = (customer) => customer.IsActive 
                        ? @<span class="badge bg-success">Active</span>
                        : @<span class="badge bg-danger">Inactive</span> }
        };
        
        await LoadCustomers();
        UpdateRelatedCounts();
        
        // Debug logging
        Console.WriteLine($"[DEBUG] OnInitializedAsync - CompanyId: {companyId}, Customers loaded: {customers?.Count ?? 0}");
    }

    private async Task LoadCustomers()
    {
        using var context = await DbFactory.CreateDbContextAsync();
        
        customers = await context.Customers
            .Include(c => c.Contacts)
            .Include(c => c.Projects)
            .Where(c => c.CompanyId == companyId)
            .ToListAsync();
            
        // Debug logging
        Console.WriteLine($"[DEBUG] LoadCustomers - CompanyId: {companyId}, Total customers in DB: {customers?.Count ?? 0}");
        if (customers != null && customers.Any())
        {
            Console.WriteLine($"[DEBUG] First customer: {customers.First().CompanyName}");
        }
    }

    private void SortBy(string field)
    {
        if (sortField == field)
        {
            sortAscending = !sortAscending;
        }
        else
        {
            sortField = field;
            sortAscending = true;
        }
    }

    private void ChangePage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
        }
    }

    private void CreateNewCustomer()
    {
        Navigation.NavigateTo("/customers/new");
    }
    
    private async Task DeleteSelectedItem()
    {
        // Delete the currently selected item or show a message
        if (selectedCustomerIds.Any())
        {
            await DeleteSelectedCustomers();
        }
        else
        {
            // Could show a message that no item is selected
            Console.WriteLine("No customer selected for deletion");
        }
    }

    private void EditCustomer(int customerId)
    {
        Navigation.NavigateTo($"/customers/edit/{customerId}");
    }

    private void ViewCustomer(int customerId)
    {
        Navigation.NavigateTo($"/customers/{customerId}");
    }

    // New methods for StandardToolbar
    private void ToggleCustomerSelection(int customerId)
    {
        if (selectedCustomerIds.Contains(customerId))
        {
            selectedCustomerIds.Remove(customerId);
        }
        else
        {
            selectedCustomerIds.Add(customerId);
        }
        UpdateSelectionState();
    }
    
    private void SelectAllCustomers()
    {
        if (allSelected)
        {
            // Deselect all on current page
            foreach (var customer in pagedCustomers)
            {
                selectedCustomerIds.Remove(customer.Id);
            }
        }
        else
        {
            // Select all on current page
            foreach (var customer in pagedCustomers)
            {
                selectedCustomerIds.Add(customer.Id);
            }
        }
        UpdateSelectionState();
    }
    
    private void UpdateSelectionState()
    {
        hasSelection = selectedCustomerIds.Any();
        selectedCount = selectedCustomerIds.Count;
        StateHasChanged();
    }
    
    private async Task DeleteSelectedCustomers()
    {
        if (!selectedCustomerIds.Any())
            return;
            
        // Implementation for deleting selected customers
        Console.WriteLine($"Deleting {selectedCount} customers...");
        
        using var context = await DbFactory.CreateDbContextAsync();
        var customersToDelete = await context.Customers
            .Where(c => selectedCustomerIds.Contains(c.Id))
            .ToListAsync();
            
        // Soft delete the customers
        foreach (var customer in customersToDelete)
        {
            customer.IsActive = false;
        }
        
        await context.SaveChangesAsync();
        
        // Clear selection and reload
        selectedCustomerIds.Clear();
        UpdateSelectionState();
        await LoadCustomers();
    }
    
    private async Task GenerateReport(string reportType)
    {
        Console.WriteLine($"Generating report: {reportType}");
        // Implementation for generating different reports
        switch (reportType)
        {
            case "summary":
                Navigation.NavigateTo("/reports/customers/summary");
                break;
            case "active":
                Navigation.NavigateTo("/reports/customers/active");
                break;
            case "projects":
                Navigation.NavigateTo("/reports/customers/projects");
                break;
            case "export-csv":
                // Export to CSV logic
                break;
            case "export-pdf":
                // Export to PDF logic
                break;
        }
    }
    
    private async Task HandleAction(string action)
    {
        Console.WriteLine($"Handling action: {action}");
        switch (action)
        {
            case "merge":
                // Open merge dialog
                break;
            case "archive":
                // Archive inactive customers
                break;
            case "settings":
                // Open settings dialog
                break;
            case "clear-filters":
                searchTerm = "";
                filterActive = "";
                StateHasChanged();
                break;
        }
    }
    
    private async Task RefreshData()
    {
        _isRefreshing = true;
        StateHasChanged();
        await Task.Delay(100); // Allow UI to update
        await LoadCustomers();
        UpdateRelatedCounts();
        _isRefreshing = false;
        StateHasChanged();
    }
    
    
    private void UpdateRelatedCounts()
    {
        if (customers != null)
        {
            relatedItems[0].Count = customers.Sum(c => c.Projects.Count(p => !p.IsDeleted));
            relatedItems[1].Count = customers.Sum(c => c.Contacts.Count(ct => ct.IsActive));
            relatedItems[2].Count = customers.SelectMany(c => c.Projects).Count(p => !p.IsDeleted);
        }
    }
    
    private void SetViewMode(ViewMode mode)
    {
        currentViewMode = mode;
        StateHasChanged();
    }
    
    private Task OnSelectionChanged(HashSet<Customer> selected)
    {
        selectedCustomers = selected;
        selectedCustomerIds = selected.Select(c => c.Id).ToHashSet();
        UpdateSelectionState();
        return Task.CompletedTask;
    }
    
    private string FormatABN(string abn)
    {
        if (string.IsNullOrEmpty(abn) || abn.Length != 11)
            return abn;
            
        return $"{abn.Substring(0, 2)} {abn.Substring(2, 3)} {abn.Substring(5, 3)} {abn.Substring(8, 3)}";
    }
}