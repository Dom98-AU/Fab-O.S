@page "/customers"
@using Microsoft.EntityFrameworkCore
@using SteelEstimation.Core.Entities
@using SteelEstimation.Infrastructure.Data
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject NavigationManager Navigation
@inject IAuthenticationService AuthService
@inject IJSRuntime JSRuntime
@implements IDisposable
@attribute [Authorize(Policy = "Estimator")]

<PageTitle>Customers - Steel Estimation Platform</PageTitle>

<div class="container-fluid">
    <div class="row mb-3">
        <div class="col">
            <h1>
                <i class="fas fa-building me-2"></i>Customers
            </h1>
        </div>
        <div class="col-auto">
            <button class="btn btn-primary" @onclick="CreateNewCustomer">
                <i class="fas fa-plus me-2"></i>New Customer
            </button>
        </div>
    </div>

    <div class="card">
        <div class="card-body">
            <div class="row mb-3">
                <div class="col-md-6">
                    <div class="input-group">
                        <span class="input-group-text"><i class="fas fa-search"></i></span>
                        <input type="text" class="form-control" placeholder="Search customers..."
                               @bind="searchTerm" @bind:event="oninput" />
                    </div>
                </div>
                <div class="col-md-3">
                    <select class="form-select" @bind="filterActive">
                        <option value="">All Customers</option>
                        <option value="true">Active Only</option>
                        <option value="false">Inactive Only</option>
                    </select>
                </div>
            </div>

            @if (customers == null)
            {
                <div class="text-center p-4">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else if (!filteredCustomers.Any())
            {
                <div class="alert alert-info">
                    <i class="fas fa-info-circle me-2"></i>
                    No customers found. Click "New Customer" to add your first customer.
                </div>
            }
            else
            {
                <div class="table-wrapper">
                    <table class="table table-hover customers-table">
                        <thead>
                            <tr>
                                <th @onclick="@(() => SortBy("CompanyName"))" style="cursor: pointer;">
                                    Company Name
                                    @if (sortField == "CompanyName")
                                    {
                                        <i class="fas fa-sort-@(sortAscending ? "up" : "down") ms-1"></i>
                                    }
                                </th>
                                <th>Trading Name</th>
                                <th>ABN</th>
                                <th>Contacts</th>
                                <th>Projects</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var customer in pagedCustomers)
                            {
                                <tr @onclick="@(() => ViewCustomer(customer.Id))" style="cursor: pointer;">
                                    <td>
                                        <strong>@customer.CompanyName</strong>
                                    </td>
                                    <td>@(customer.TradingName ?? "-")</td>
                                    <td>
                                        <code>@FormatABN(customer.ABN)</code>
                                    </td>
                                    <td>
                                        <span class="badge bg-secondary">
                                            @customer.Contacts.Count(c => c.IsActive)
                                        </span>
                                    </td>
                                    <td>
                                        <span class="badge bg-primary">
                                            @customer.Projects.Count(p => !p.IsDeleted)
                                        </span>
                                    </td>
                                    <td>
                                        @if (customer.IsActive)
                                        {
                                            <span class="badge bg-success">Active</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-danger">Inactive</span>
                                        }
                                    </td>
                                    <td @onclick:stopPropagation="true">
                                        <div class="btn-group btn-group-sm">
                                            <button class="btn btn-outline-primary" @onclick="@(() => EditCustomer(customer.Id))"
                                                    title="Edit">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                            <button class="btn btn-outline-info" @onclick="@(() => ViewCustomer(customer.Id))"
                                                    title="View Details">
                                                <i class="fas fa-eye"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                @if (totalPages > 1)
                {
                    <nav>
                        <ul class="pagination justify-content-center">
                            <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                <button class="page-link" @onclick="@(() => ChangePage(currentPage - 1))">
                                    Previous
                                </button>
                            </li>
                            @for (int i = 1; i <= totalPages; i++)
                            {
                                var pageNum = i;
                                <li class="page-item @(currentPage == pageNum ? "active" : "")">
                                    <button class="page-link" @onclick="@(() => ChangePage(pageNum))">
                                        @pageNum
                                    </button>
                                </li>
                            }
                            <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                <button class="page-link" @onclick="@(() => ChangePage(currentPage + 1))">
                                    Next
                                </button>
                            </li>
                        </ul>
                    </nav>
                }
            }
        </div>
    </div>
</div>

@code {
    private List<Customer>? customers;
    private string searchTerm = "";
    private string filterActive = "true"; // Default to active only
    private string sortField = "CompanyName";
    private bool sortAscending = true;
    private int currentPage = 1;
    private int pageSize = 20;
    private int? companyId;
    private DotNetObjectReference<Index>? dotNetRef;

    private IEnumerable<Customer> filteredCustomers => customers?.Where(c =>
        (string.IsNullOrWhiteSpace(searchTerm) ||
         c.CompanyName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
         (c.TradingName != null && c.TradingName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
         c.ABN.Contains(searchTerm)) &&
        (string.IsNullOrEmpty(filterActive) ||
         (filterActive == "true" && c.IsActive) ||
         (filterActive == "false" && !c.IsActive))
    ) ?? Enumerable.Empty<Customer>();

    private IEnumerable<Customer> sortedCustomers => sortField switch
    {
        "CompanyName" => sortAscending ? 
            filteredCustomers.OrderBy(c => c.CompanyName) : 
            filteredCustomers.OrderByDescending(c => c.CompanyName),
        _ => filteredCustomers
    };

    private IEnumerable<Customer> pagedCustomers => sortedCustomers
        .Skip((currentPage - 1) * pageSize)
        .Take(pageSize);

    private int totalPages => (int)Math.Ceiling((double)filteredCustomers.Count() / pageSize);

    protected override async Task OnInitializedAsync()
    {
        companyId = await AuthService.GetUserCompanyIdAsync();
        dotNetRef = DotNetObjectReference.Create(this);
        await LoadCustomers();
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Initialize enhanced table features
            await JSRuntime.InvokeVoidAsync("enhancedTable.init", ".customers-table", new
            {
                enableResize = true,
                enableReorder = true,
                enableViewSaving = true,
                enableFreezeColumns = true,
                freezeColumns = 1, // Freeze the Company Name column
                tableType = "Customers",
                dotNetRef = dotNetRef
            });
        }
    }

    private async Task LoadCustomers()
    {
        using var context = await DbFactory.CreateDbContextAsync();
        
        customers = await context.Customers
            .Include(c => c.Contacts)
            .Include(c => c.Projects)
            .Where(c => c.CompanyId == companyId)
            .ToListAsync();
    }

    private void SortBy(string field)
    {
        if (sortField == field)
        {
            sortAscending = !sortAscending;
        }
        else
        {
            sortField = field;
            sortAscending = true;
        }
    }

    private void ChangePage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
        }
    }

    private void CreateNewCustomer()
    {
        Navigation.NavigateTo("/customers/new");
    }

    private void EditCustomer(int customerId)
    {
        Navigation.NavigateTo($"/customers/edit/{customerId}");
    }

    private void ViewCustomer(int customerId)
    {
        Navigation.NavigateTo($"/customers/{customerId}");
    }

    private string FormatABN(string abn)
    {
        if (string.IsNullOrEmpty(abn) || abn.Length != 11)
            return abn;
            
        return $"{abn.Substring(0, 2)} {abn.Substring(2, 3)} {abn.Substring(5, 3)} {abn.Substring(8, 3)}";
    }
    
    [JSInvokable]
    public async Task ReorderColumns(string fromColumn, string toColumn, bool dropBefore)
    {
        // Column reordering would be handled here
        // For now, just refresh the display
        StateHasChanged();
    }
    
    public void Dispose()
    {
        dotNetRef?.Dispose();
    }
}