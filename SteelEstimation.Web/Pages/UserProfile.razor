@page "/profile/{Username?}"
@page "/profile"
@using Microsoft.AspNetCore.Authorization
@using SteelEstimation.Core.Interfaces
@using SteelEstimation.Core.Entities
@using SteelEstimation.Core.DTOs
@using System.Security.Claims
@using System.Text.Json
@attribute [Authorize]
@inject IUserProfileService ProfileService
@inject IUserService UserService
@inject IFabOSAuthenticationService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="container-fluid mt-4">
    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (profile == null || user == null)
    {
        <div class="alert alert-warning">
            <h4>Profile Not Found</h4>
            <p>The requested user profile could not be found.</p>
            @if (currentUserId == 0)
            {
                <p class="text-muted">Authentication state is being loaded. Please wait...</p>
                <button class="btn btn-primary" @onclick="async () => await LoadProfile()">Retry</button>
            }
            <p class="small text-muted mt-2">
                Debug Info: CurrentUserId=@currentUserId, Username=@(Username ?? "(null)"), User=@(user?.Username ?? "(null)")
            </p>
        </div>
    }
    else
    {
        <div class="row">
            <!-- Profile Header -->
            <div class="col-12">
                <div class="card profile-header mb-4">
                    <div class="card-body">
                        <div class="row align-items-center">
                            <div class="col-auto">
                                <div class="avatar-container @(isOwnProfile ? "clickable-avatar" : "")" @onclick="@(async () => { if (isOwnProfile) await EditProfile(); })">
                                    @if (!string.IsNullOrEmpty(profile.DiceBearStyle))
                                    {
                                        var options = new Dictionary<string, object>();
                                        if (!string.IsNullOrEmpty(profile.DiceBearOptions))
                                        {
                                            try
                                            {
                                                var rawOptions = System.Text.Json.JsonSerializer.Deserialize<Dictionary<string, object>>(profile.DiceBearOptions) ?? new Dictionary<string, object>();
                                                options = ConvertJsonElementsToValues(rawOptions);
                                            }
                                            catch { }
                                        }
                                        var avatarUrl = SteelEstimation.Web.Data.DiceBearAvatars.GenerateAvatarUrl(
                                            profile.DiceBearStyle, 
                                            profile.DiceBearSeed ?? "default", 
                                            "svg",
                                            options
                                        );
                                        <img src="@avatarUrl" alt="@user.FullName" class="avatar-large dicebear-avatar" />
                                    }
                                    else
                                    {
                                        <div class="avatar-placeholder avatar-large">
                                            <span>@GetInitials(user.FullName)</span>
                                        </div>
                                    }
                                    @if (isOwnProfile)
                                    {
                                        <div class="avatar-change-btn">
                                            <i class="fas fa-edit"></i>
                                        </div>
                                    }
                                </div>
                            </div>
                            <div class="col">
                                <h2 class="mb-1">@user.FullName</h2>
                                <p class="text-muted mb-2">@@@@user.Username</p>
                                @if (!string.IsNullOrEmpty(profile.JobTitle))
                                {
                                    <p class="mb-1"><i class="fas fa-briefcase me-2"></i>@profile.JobTitle</p>
                                }
                                @if (!string.IsNullOrEmpty(profile.Department))
                                {
                                    <p class="mb-1"><i class="fas fa-building me-2"></i>@profile.Department</p>
                                }
                                @if (!string.IsNullOrEmpty(profile.Location))
                                {
                                    <p class="mb-1"><i class="fas fa-map-marker-alt me-2"></i>@profile.Location</p>
                                }
                                <div class="mt-2">
                                    @if (!string.IsNullOrEmpty(profile.Status))
                                    {
                                        <span class="badge bg-success me-2">
                                            <i class="fas fa-circle me-1"></i>@profile.Status
                                        </span>
                                    }
                                    @if (profile.LastActivityAt.HasValue)
                                    {
                                        <small class="text-muted">
                                            Last active @GetTimeAgo(profile.LastActivityAt.Value)
                                        </small>
                                    }
                                </div>
                            </div>
                            <div class="col-auto">
                                @if (isOwnProfile)
                                {
                                    <button class="btn btn-primary" @onclick="@(async () => await EditProfile())">
                                        <i class="fas fa-edit me-2"></i>Edit Profile
                                    </button>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Profile Content -->
            <div class="col-lg-4">
                <!-- About Card -->
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="mb-0">About</h5>
                    </div>
                    <div class="card-body">
                        @if (!string.IsNullOrEmpty(profile.Bio))
                        {
                            <p>@profile.Bio</p>
                        }
                        else if (isOwnProfile)
                        {
                            <p class="text-muted">Add a bio to tell others about yourself.</p>
                        }
                        
                        <hr />
                        
                        <div class="profile-details">
                            @if (profile.ShowEmail || isOwnProfile)
                            {
                                <div class="mb-2">
                                    <i class="fas fa-envelope me-2"></i>
                                    <a href="mailto:@user.Email">@user.Email</a>
                                </div>
                            }
                            @if ((profile.ShowPhoneNumber || isOwnProfile) && !string.IsNullOrEmpty(profile.PhoneNumber))
                            {
                                <div class="mb-2">
                                    <i class="fas fa-phone me-2"></i>
                                    <a href="tel:@profile.PhoneNumber">@profile.PhoneNumber</a>
                                </div>
                            }
                            @if (profile.StartDate.HasValue)
                            {
                                <div class="mb-2">
                                    <i class="fas fa-calendar-alt me-2"></i>
                                    Joined @profile.StartDate.Value.ToString("MMMM yyyy")
                                </div>
                            }
                            <div class="mb-2">
                                <i class="fas fa-building me-2"></i>
                                @user.CompanyName
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Skills Card -->
                @if (!string.IsNullOrEmpty(profile.Skills))
                {
                    <div class="card mb-4">
                        <div class="card-header">
                            <h5 class="mb-0">Skills</h5>
                        </div>
                        <div class="card-body">
                            <div class="skill-tags">
                                @foreach (var skill in profile.Skills.Split(',', StringSplitOptions.RemoveEmptyEntries))
                                {
                                    <span class="badge bg-primary me-2 mb-2">@skill.Trim()</span>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>

            <!-- Activity Feed -->
            <div class="col-lg-8">
                <UserActivityFeed UserId="@user.Id" ShowComments="true" />
            </div>
        </div>

        <!-- Edit Profile Modal -->
        @if (showEditModal)
        {
            <div class="modal fade show d-block" tabindex="-1" role="dialog" aria-modal="true">
                <div class="modal-dialog modal-xl avatar-modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Choose Your Avatar</h5>
                            <button type="button" class="btn-close" @onclick="@(async () => await CloseEditModal())"></button>
                        </div>
                        <div class="modal-body">
                            <EditForm Model="editModel" OnValidSubmit="SaveProfile" class="w-100">
                                <DataAnnotationsValidator />
                                <ValidationSummary />

                                <!-- Enhanced Avatar Selection -->
                                <div class="w-100">
                                    <EnhancedAvatarSelectorV2 
                                        SelectedAvatarType="dicebear"
                                        SelectedDiceBearStyle="@editModel.DiceBearStyle"
                                        SelectedDiceBearSeed="@editModel.DiceBearSeed"
                                        SelectedDiceBearOptions="@editModel.DiceBearOptions"
                                        OnAvatarSelected="HandleAvatarSelection" />
                                </div>

                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" @onclick="@(async () => await CloseEditModal())">Cancel</button>
                                    <button type="submit" class="btn btn-primary" disabled="@isSaving">
                                        @if (isSaving)
                                        {
                                            <span class="spinner-border spinner-border-sm me-2"></span>
                                        }
                                        Save Changes
                                    </button>
                                </div>
                            </EditForm>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-backdrop fade show"></div>
        }
    }
</div>

<script>
    // Modal management helpers
    window.profileModalHelpers = {
        closeModal: function() {
            // Remove modal backdrop if it exists
            var backdrop = document.querySelector('.modal-backdrop');
            if (backdrop) {
                backdrop.remove();
            }
            // Remove show class from modal
            var modal = document.querySelector('.modal.show');
            if (modal) {
                modal.classList.remove('show');
                modal.style.display = 'none';
            }
            // Reset body
            document.body.classList.remove('modal-open');
            document.body.style.overflow = '';
            document.body.style.paddingRight = '';
        },
        
        openModal: function() {
            // Ensure any previous modal is fully closed
            this.closeModal();
            
            setTimeout(function() {
                var modal = document.querySelector('.modal');
                if (modal) {
                    modal.classList.add('show');
                    modal.style.display = 'block';
                    document.body.classList.add('modal-open');
                    
                    // Add backdrop if not exists
                    if (!document.querySelector('.modal-backdrop')) {
                        var backdrop = document.createElement('div');
                        backdrop.className = 'modal-backdrop fade show';
                        document.body.appendChild(backdrop);
                    }
                }
            }, 100);
        }
    };
    
    // Initialize profile page
    window.initializeProfilePage = function() {
        // Clean up any stale modal state on page load
        window.profileModalHelpers.closeModal();
    };
    
    // Initialize on page load
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', window.initializeProfilePage);
    } else {
        window.initializeProfilePage();
    }
</script>

<style>
    .profile-header {
        background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
    }

    .avatar-container {
        position: relative;
        display: inline-block;
        width: 120px;
        height: 120px;
    }

    .avatar-large {
        width: 120px;
        height: 120px;
        border-radius: 50%;
        object-fit: cover;
        border: 4px solid white;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }

    .dicebear-avatar {
        background: #f8f9fa;
        object-fit: contain !important;
    }

    .avatar-placeholder {
        width: 120px;
        height: 120px;
        border-radius: 50%;
        background: #007bff;
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 36px;
        font-weight: bold;
        border: 4px solid white;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }

    .avatar-upload-btn {
        position: absolute;
        bottom: 0;
        right: 0;
        border-radius: 50%;
        width: 36px;
        height: 36px;
        padding: 0;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .skill-tags {
        display: flex;
        flex-wrap: wrap;
    }

    .profile-details i {
        width: 20px;
        color: #6c757d;
    }

    .avatar-icon-container {
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 3.5rem;
        color: #495057;
        background: #f8f9fa;
        border: 4px solid white;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }

    .avatar-icon-container.avatar-large {
        width: 120px;
        height: 120px;
        border-radius: 50%;
    }

    .avatar-icon-container i {
        font-size: 3.5rem;
    }

    .avatar-change-btn {
        position: absolute;
        bottom: 0;
        right: 0;
        border-radius: 50%;
        width: 36px;
        height: 36px;
        padding: 0;
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 100;
        cursor: pointer;
        background-color: #007bff;
        border: 2px solid white;
        box-shadow: 0 2px 4px rgba(0,0,0,0.2);
    }
    
    .avatar-change-btn {
        pointer-events: none; /* Make button non-interactive, only visual */
        opacity: 0.8;
    }
    
    .clickable-avatar {
        transition: transform 0.2s ease;
        cursor: pointer;
    }
    
    .clickable-avatar:hover {
        transform: scale(1.05);
    }
    
    .clickable-avatar:hover .avatar-large {
        box-shadow: 0 4px 12px rgba(0,0,0,0.2);
    }
    
    .clickable-avatar:hover .avatar-change-btn {
        opacity: 1;
        background-color: #0056b3;
    }

    /* Avatar Selector Styles */
    .avatar-selector {
        width: 100%;
    }

    .avatar-preview {
        display: inline-block;
        padding: 20px;
        background: #f8f9fa;
        border-radius: 10px;
        border: 2px solid #dee2e6;
    }

    .avatar-icon-large {
        font-size: 5rem;
        color: #495057;
    }

    .avatar-category {
        margin-bottom: 2rem;
    }

    .avatar-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(80px, 1fr));
        gap: 10px;
    }

    /* Make the avatar modal extra wide */
    .avatar-modal-dialog {
        max-width: 95% !important;
        width: 95% !important;
    }

    @@media (min-width: 1200px) {
        .avatar-modal-dialog {
            max-width: 1800px !important;
        }
    }
    
    @@media (min-width: 1600px) {
        .avatar-modal-dialog {
            max-width: 2000px !important;
        }
    }

    /* Force full width for avatar modal content */
    .avatar-modal-dialog .modal-content,
    .avatar-modal-dialog .modal-body,
    .avatar-modal-dialog form,
    .avatar-modal-dialog .avatar-selector {
        width: 100% !important;
        max-width: 100% !important;
    }

    .avatar-modal-dialog .form-control,
    .avatar-modal-dialog .form-group,
    .avatar-modal-dialog .mb-4,
    .avatar-modal-dialog .w-100 {
        max-width: 100% !important;
    }

    .avatar-option {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 80px;
        height: 80px;
        background: #f8f9fa;
        border: 2px solid #dee2e6;
        border-radius: 8px;
        cursor: pointer;
        transition: all 0.2s ease;
    }

    .avatar-option i {
        font-size: 2.5rem;
        color: #6c757d;
        transition: color 0.2s ease;
    }

    .avatar-option:hover {
        background: #e9ecef;
        border-color: #adb5bd;
        transform: translateY(-2px);
    }

    .avatar-option:hover i {
        color: #495057;
    }

    .avatar-option.selected {
        background: #0d1a80;
        border-color: #0d1a80;
    }

    .avatar-option.selected i {
        color: white;
    }

    @@media (max-width: 576px) {
        .avatar-grid {
            grid-template-columns: repeat(auto-fill, minmax(60px, 1fr));
        }

        .avatar-option {
            width: 60px;
            height: 60px;
        }

        .avatar-option i {
            font-size: 1.8rem;
        }
    }
</style>

@code {
    @implements IDisposable
    [Parameter] public string? Username { get; set; }

    private User? user;
    private SteelEstimation.Core.Entities.UserProfile? profile;
    private int currentUserId;
    private bool isOwnProfile;
    private bool isLoading = true;
    private bool showEditModal;
    private bool isSaving;
    private System.Threading.Timer? autoRetryTimer;

    private UpdateUserProfileRequest editModel = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                await JSRuntime.InvokeVoidAsync("initializeProfilePage");
            }
            catch
            {
                // Ignore if JS function doesn't exist yet
            }
        }
    }
    
    protected override async Task OnInitializedAsync()
    {
        // Get authentication state first
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        Console.WriteLine($"[UserProfile] Auth state - IsAuthenticated: {authState.User.Identity?.IsAuthenticated}");
        
        if (authState.User.Identity?.IsAuthenticated == true)
        {
            var userIdClaim = authState.User.FindFirst("UserId")?.Value 
                            ?? authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
            
            Console.WriteLine($"[UserProfile] Found UserId claim: {userIdClaim}");
            
            if (!string.IsNullOrEmpty(userIdClaim) && int.TryParse(userIdClaim, out var userId))
            {
                currentUserId = userId;
            }
        }
        
        // If we still don't have a user ID, wait a bit and try again
        if (currentUserId == 0)
        {
            await Task.Delay(1000); // Wait 1 second for auth to fully load
            
            // Try again with auth state
            authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            if (authState.User.Identity?.IsAuthenticated == true)
            {
                var userIdClaim = authState.User.FindFirst("UserId")?.Value 
                                ?? authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
                
                if (!string.IsNullOrEmpty(userIdClaim) && int.TryParse(userIdClaim, out var userId))
                {
                    currentUserId = userId;
                }
            }
            
            // Final fallback to service
            if (currentUserId == 0)
            {
                currentUserId = await AuthService.GetCurrentUserIdAsync() ?? 0;
            }
        }
        
        Console.WriteLine($"[UserProfile] Current User ID: {currentUserId}");
        await LoadProfile();
    }
    
    protected override async Task OnParametersSetAsync()
    {
        // Reload profile if username parameter changes
        await LoadProfile();
    }

    private async Task LoadProfile()
    {
        isLoading = true;

        try
        {
            if (string.IsNullOrEmpty(Username))
            {
                // Load current user's profile
                user = await AuthService.GetCurrentUserAsync();
                
                // If user is null, try again with retries
                if (user == null)
                {
                    // Try up to 3 times with delays
                    for (int retry = 0; retry < 3 && user == null; retry++)
                    {
                        await Task.Delay(500 * (retry + 1)); // Progressive delay: 500ms, 1000ms, 1500ms
                        
                        // Refresh authentication state
                        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
                        if (authState.User.Identity?.IsAuthenticated == true)
                        {
                            user = await AuthService.GetCurrentUserAsync();
                        }
                    }
                }
                
                isOwnProfile = true;
                Console.WriteLine($"[UserProfile] No username param - loading current user: {user?.Username} (ID: {user?.Id})");
                Console.WriteLine($"[UserProfile] isOwnProfile set to: {isOwnProfile}");
            }
            else
            {
                // Load specified user's profile
                user = await UserService.GetUserByUsernameAsync(Username);
                isOwnProfile = user?.Id == currentUserId;
                Console.WriteLine($"[UserProfile] Username param '{Username}' - loaded user: {user?.Username} (ID: {user?.Id})");
                Console.WriteLine($"[UserProfile] isOwnProfile = (user.Id:{user?.Id} == currentUserId:{currentUserId}) = {isOwnProfile}");
            }

            if (user != null)
            {
                profile = await ProfileService.GetUserProfileAsync(user.Id);
                Console.WriteLine($"[UserProfile] Profile loaded: {profile != null}");
                
                // Create profile if it doesn't exist for current user
                if (profile == null && isOwnProfile)
                {
                    Console.WriteLine("[UserProfile] Creating new profile for current user");
                    profile = await ProfileService.CreateUserProfileAsync(user.Id, new CreateUserProfileRequest());
                }
            }
            else
            {
                Console.WriteLine("[UserProfile] WARNING: User is null!");
            }
        }
        finally
        {
            isLoading = false;
            
            // If we still don't have a user and currentUserId is 0, start auto-retry timer
            if (user == null && currentUserId == 0 && string.IsNullOrEmpty(Username))
            {
                // Set up auto-retry every 2 seconds, up to 5 times
                var retryCount = 0;
                autoRetryTimer?.Dispose();
                autoRetryTimer = new System.Threading.Timer(async _ =>
                {
                    if (retryCount >= 5)
                    {
                        autoRetryTimer?.Dispose();
                        return;
                    }
                    
                    retryCount++;
                    await InvokeAsync(async () =>
                    {
                        // Try to get auth state again
                        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
                        if (authState.User.Identity?.IsAuthenticated == true)
                        {
                            await OnInitializedAsync();
                            autoRetryTimer?.Dispose();
                        }
                    });
                }, null, TimeSpan.FromSeconds(2), TimeSpan.FromSeconds(2));
            }
        }
    }
    
    private async Task RetryLoadProfile()
    {
        // Cancel auto-retry timer
        autoRetryTimer?.Dispose();
        
        // Force refresh authentication state
        currentUserId = 0;
        await OnInitializedAsync();
    }

    private async Task EditProfile()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("console.log", "[EditProfile] Called", $"showEditModal: {showEditModal}");
        }
        catch { }
        
        Console.WriteLine($"[EditProfile] Called. Profile exists: {profile != null}, isOwnProfile: {isOwnProfile}, showEditModal: {showEditModal}");
        
        if (profile != null)
        {
            editModel = new UpdateUserProfileRequest
            {
                AvatarUrl = profile.AvatarUrl,
                AvatarType = "dicebear",
                DiceBearStyle = profile.DiceBearStyle,
                DiceBearSeed = profile.DiceBearSeed,
                DiceBearOptions = profile.DiceBearOptions,
                JobTitle = profile.JobTitle,
                Department = profile.Department,
                Bio = profile.Bio,
                Location = profile.Location,
                PhoneNumber = profile.PhoneNumber,
                Skills = profile.Skills,
                AboutMe = profile.AboutMe,
                IsProfilePublic = profile.IsProfilePublic,
                ShowEmail = profile.ShowEmail,
                ShowPhoneNumber = profile.ShowPhoneNumber,
                AllowMentions = profile.AllowMentions,
                Status = profile.Status,
                StatusMessage = profile.StatusMessage
            };
        }
        
        showEditModal = true;
        await InvokeAsync(StateHasChanged);
        
        try
        {
            await JSRuntime.InvokeVoidAsync("console.log", "[EditProfile] Set showEditModal to true");
        }
        catch { }
    }

    private async Task CloseEditModal()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("console.log", "[CloseEditModal] Called", $"showEditModal was: {showEditModal}");
        }
        catch { }
        
        Console.WriteLine($"[CloseEditModal] Called. showEditModal was: {showEditModal}");
        showEditModal = false;
        await InvokeAsync(StateHasChanged);
        
        // Force cleanup any orphaned modal elements
        await Task.Delay(100);
        try
        {
            await JSRuntime.InvokeVoidAsync("eval", @"
                console.log('[CloseEditModal] Cleaning up modal elements');
                document.querySelectorAll('.modal-backdrop').forEach(el => el.remove());
                document.body.classList.remove('modal-open');
                document.body.style = '';
            ");
        }
        catch { }
    }

    private async Task SaveProfile()
    {
        if (user == null) return;

        isSaving = true;
        await InvokeAsync(StateHasChanged);
        
        try
        {
            profile = await ProfileService.UpdateUserProfileAsync(user.Id, editModel);
            showEditModal = false;
            await InvokeAsync(StateHasChanged);
            
            // Force cleanup any orphaned modal elements
            await Task.Delay(100);
            try
            {
                await JSRuntime.InvokeVoidAsync("eval", @"
                    console.log('[SaveProfile] Cleaning up modal elements after save');
                    document.querySelectorAll('.modal-backdrop').forEach(el => el.remove());
                    document.body.classList.remove('modal-open');
                    document.body.style = '';
                ");
            }
            catch { }
        }
        finally
        {
            isSaving = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task UploadAvatar()
    {
        // TODO: Implement file upload dialog
        await JSRuntime.InvokeVoidAsync("alert", "Avatar upload coming soon!");
    }

    private string GetInitials(string fullName)
    {
        var parts = fullName.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        if (parts.Length >= 2)
            return $"{parts[0][0]}{parts[1][0]}".ToUpper();
        else if (parts.Length == 1)
            return parts[0].Substring(0, Math.Min(2, parts[0].Length)).ToUpper();
        return "U";
    }

    private void HandleAvatarSelection(SteelEstimation.Web.Components.EnhancedAvatarSelectorV2.AvatarSelectionData data)
    {
        Console.WriteLine($"[UserProfile] HandleAvatarSelection called");
        Console.WriteLine($"[UserProfile] DiceBearStyle: {data.DiceBearStyle}");
        Console.WriteLine($"[UserProfile] DiceBearSeed: {data.DiceBearSeed}");
        Console.WriteLine($"[UserProfile] DiceBearOptions: {data.DiceBearOptions}");
        
        editModel.AvatarType = "dicebear";
        editModel.DiceBearStyle = data.DiceBearStyle;
        editModel.DiceBearSeed = data.DiceBearSeed;
        editModel.DiceBearOptions = data.DiceBearOptions;
        
        StateHasChanged();
    }

    private string GetTimeAgo(DateTime dateTime)
    {
        var timeSpan = DateTime.UtcNow - dateTime;

        if (timeSpan.TotalMinutes < 1)
            return "just now";
        if (timeSpan.TotalMinutes < 60)
            return $"{(int)timeSpan.TotalMinutes}m ago";
        if (timeSpan.TotalHours < 24)
            return $"{(int)timeSpan.TotalHours}h ago";
        if (timeSpan.TotalDays < 7)
            return $"{(int)timeSpan.TotalDays}d ago";
        
        return dateTime.ToString("MMM d, yyyy");
    }
    
    private Dictionary<string, object> ConvertJsonElementsToValues(Dictionary<string, object> rawOptions)
    {
        var converted = new Dictionary<string, object>();
        
        foreach (var kvp in rawOptions)
        {
            if (kvp.Value is JsonElement element)
            {
                converted[kvp.Key] = element.ValueKind switch
                {
                    JsonValueKind.String => element.GetString() ?? "",
                    JsonValueKind.Number => element.GetInt32(),
                    JsonValueKind.True => true,
                    JsonValueKind.False => false,
                    _ => kvp.Value
                };
            }
            else
            {
                converted[kvp.Key] = kvp.Value;
            }
        }
        
        return converted;
    }
    
    public void Dispose()
    {
        // Clean up timer
        autoRetryTimer?.Dispose();
    }
}