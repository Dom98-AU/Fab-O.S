@page "/debug-avatar"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@inject IJSRuntime JSRuntime

<div class="container mt-4">
    <h3>Avatar Debug Page</h3>
    
    <div class="alert alert-info">
        <p>Browser: <span id="browser-info"></span></p>
        <p>Blazor Status: @(isBlazorReady ? "Ready ✅" : "Not Ready ❌")</p>
        <p>Button Click Count: @clickCount</p>
        <p>Last Action: @lastAction</p>
    </div>
    
    <div class="row mt-4">
        <div class="col-md-6">
            <h4>Test 1: Standard Blazor Button</h4>
            <button class="btn btn-primary" @onclick="TestBlazorClick">
                Test Blazor onclick
            </button>
        </div>
        
        <div class="col-md-6">
            <h4>Test 2: JavaScript Interop Button</h4>
            <button class="btn btn-warning" onclick="window.debugAvatarClick()">
                Test JavaScript onclick
            </button>
        </div>
    </div>
    
    <div class="row mt-4">
        <div class="col-md-6">
            <h4>Test 3: Avatar Button Replica</h4>
            <div style="position: relative; display: inline-block; width: 120px; height: 120px;">
                <div style="width: 120px; height: 120px; border-radius: 50%; background: #ccc;"></div>
                <button type="button" 
                        class="btn btn-sm btn-primary" 
                        style="position: absolute; bottom: 0; right: 0; z-index: 100;"
                        @onclick="TestAvatarClick">
                    <i class="fas fa-edit"></i>
                </button>
            </div>
        </div>
        
        <div class="col-md-6">
            <h4>Test 4: Mixed Approach</h4>
            <div style="position: relative; display: inline-block; width: 120px; height: 120px;">
                <div style="width: 120px; height: 120px; border-radius: 50%; background: #ccc;"></div>
                <button type="button" 
                        class="btn btn-sm btn-success" 
                        style="position: absolute; bottom: 0; right: 0; z-index: 100;"
                        @onclick="TestMixedClick"
                        @onclick:preventDefault="false"
                        @onclick:stopPropagation="false">
                    <i class="fas fa-edit"></i>
                </button>
            </div>
        </div>
    </div>
    
    <div class="row mt-4">
        <div class="col-12">
            <h4>Console Output:</h4>
            <div class="border p-2" style="height: 200px; overflow-y: auto; font-family: monospace;">
                @foreach(var log in logs)
                {
                    <div>@log</div>
                }
            </div>
        </div>
    </div>
</div>

<script>
    window.debugAvatarClick = function() {
        DotNet.invokeMethodAsync('SteelEstimation.Web', 'OnJsButtonClick');
        console.log('JavaScript click fired');
    };
    
    window.getBrowserInfo = function() {
        var ua = navigator.userAgent;
        var info = 'Unknown';
        if (ua.indexOf('Firefox') > -1) {
            info = 'Firefox';
        } else if (ua.indexOf('Chrome') > -1) {
            info = 'Chrome';
        } else if (ua.indexOf('Safari') > -1) {
            info = 'Safari';
        } else if (ua.indexOf('Edge') > -1) {
            info = 'Edge';
        }
        info += ' on ' + navigator.platform;
        document.getElementById('browser-info').innerText = info;
        return info;
    };
    
    // Call on page load
    setTimeout(function() {
        window.getBrowserInfo();
    }, 100);
</script>

@code {
    private bool isBlazorReady = false;
    private int clickCount = 0;
    private string lastAction = "None";
    private List<string> logs = new();
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isBlazorReady = true;
            await JSRuntime.InvokeVoidAsync("getBrowserInfo");
            AddLog("Page initialized");
            StateHasChanged();
        }
    }
    
    private void TestBlazorClick()
    {
        clickCount++;
        lastAction = $"Blazor Click at {DateTime.Now:HH:mm:ss}";
        AddLog($"Blazor @onclick fired - Count: {clickCount}");
        StateHasChanged();
    }
    
    private void TestAvatarClick()
    {
        clickCount++;
        lastAction = $"Avatar Button Click at {DateTime.Now:HH:mm:ss}";
        AddLog($"Avatar button clicked - Count: {clickCount}");
        StateHasChanged();
    }
    
    private void TestMixedClick()
    {
        clickCount++;
        lastAction = $"Mixed Button Click at {DateTime.Now:HH:mm:ss}";
        AddLog($"Mixed approach clicked - Count: {clickCount}");
        StateHasChanged();
    }
    
    [JSInvokable]
    public static Task OnJsButtonClick()
    {
        // This would need proper instance handling in production
        Console.WriteLine("JS Interop button clicked");
        return Task.CompletedTask;
    }
    
    private void AddLog(string message)
    {
        logs.Add($"[{DateTime.Now:HH:mm:ss}] {message}");
        if (logs.Count > 20) logs.RemoveAt(0);
    }
}