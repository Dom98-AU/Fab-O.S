@page "/settings/machine-centers"
@page "/settings/business-configuration/machine-centers"
@using Microsoft.EntityFrameworkCore
@using SteelEstimation.Core.Entities
@using SteelEstimation.Infrastructure.Data
@using Microsoft.AspNetCore.Components.Authorization
@using SteelEstimation.Web.Shared.Components
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@attribute [Authorize(Roles = "Administrator")]

<PageTitle>Machine Centers - Settings</PageTitle>

<div class="container-fluid">
    <StandardToolbar 
        Title="Machine Centers"
        Icon="fas fa-cogs"
        ShowAddButton="true"
        AddButtonText="Add Machine Center"
        OnAddClick="ShowAddMachineCenterModal"
        ShowSearchBar="true"
        SearchPlaceholder="Search machines..."
        OnSearchChanged="OnSearchChanged" />
    
    <div class="row mt-3">
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    @if (machineCenters == null)
                    {
                        <div class="text-center py-5">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }
                    else if (!machineCenters.Any())
                    {
                        <div class="alert alert-info">
                            <i class="fas fa-info-circle me-2"></i>
                            No machine centers defined yet. Click "Add Machine Center" to create your first machine.
                        </div>
                    }
                    else
                    {
                        <DataTable TItem="MachineCenter"
                                   Items="filteredMachineCenters"
                                   Columns="tableColumns"
                                   EnableSelection="true"
                                   EnablePagination="true"
                                   PageSize="10"
                                   EnableSorting="true" />
                    }
                </div>
            </div>

            @if (showStats && machineCenters != null && machineCenters.Any())
            {
                <div class="card mt-3">
                    <div class="card-body">
                        <h5 class="card-title">Machine Center Statistics</h5>
                        <div class="row">
                            <div class="col-md-3">
                                <div class="text-center">
                                    <h3>@machineCenters.Count()</h3>
                                    <small class="text-muted">Total Machines</small>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="text-center">
                                    <h3>@machineCenters.Count(m => m.IsActive)</h3>
                                    <small class="text-muted">Active Machines</small>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="text-center">
                                    <h3>@machineCenters.Count(m => m.CurrentStatus == "Available")</h3>
                                    <small class="text-muted">Available</small>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="text-center">
                                    <h3>@machineCenters.Count(m => m.CurrentStatus == "Maintenance")</h3>
                                    <small class="text-muted">In Maintenance</small>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<!-- Add/Edit Machine Center Modal -->
@if (showModal)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        @(editingMachineCenter.Id == 0 ? "Add New Machine Center" : "Edit Machine Center")
                    </h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <EditForm Model="editingMachineCenter" OnValidSubmit="SaveMachineCenter">
                    <DataAnnotationsValidator />
                    <div class="modal-body">
                        <div class="row">
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label">Machine Code <span class="text-danger">*</span></label>
                                    <InputText @bind-Value="editingMachineCenter.MachineCode" class="form-control" placeholder="MC001" />
                                    <ValidationMessage For="@(() => editingMachineCenter.MachineCode)" />
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label">Machine Name <span class="text-danger">*</span></label>
                                    <InputText @bind-Value="editingMachineCenter.MachineName" class="form-control" placeholder="CNC Machine 1" />
                                    <ValidationMessage For="@(() => editingMachineCenter.MachineName)" />
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label">Work Center <span class="text-danger">*</span></label>
                                    <InputSelect @bind-Value="editingMachineCenter.WorkCenterId" class="form-select">
                                        <option value="">Select Work Center</option>
                                        @if (workCenters != null)
                                        {
                                            @foreach (var wc in workCenters)
                                            {
                                                <option value="@wc.Id">@wc.Name (@wc.Code)</option>
                                            }
                                        }
                                    </InputSelect>
                                    <ValidationMessage For="@(() => editingMachineCenter.WorkCenterId)" />
                                </div>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Description</label>
                            <InputTextArea @bind-Value="editingMachineCenter.Description" class="form-control" rows="2" />
                        </div>

                        <div class="row">
                            <div class="col-md-3">
                                <div class="mb-3">
                                    <label class="form-label">Machine Type <span class="text-danger">*</span></label>
                                    <InputSelect @bind-Value="editingMachineCenter.MachineType" class="form-select">
                                        <option value="CNC">CNC</option>
                                        <option value="Laser">Laser</option>
                                        <option value="Press">Press</option>
                                        <option value="Welding">Welding</option>
                                        <option value="Drilling">Drilling</option>
                                        <option value="Grinding">Grinding</option>
                                        <option value="Other">Other</option>
                                    </InputSelect>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="mb-3">
                                    <label class="form-label">Sub Type</label>
                                    <InputText @bind-Value="editingMachineCenter.MachineSubType" class="form-control" />
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="mb-3">
                                    <label class="form-label">Manufacturer</label>
                                    <InputText @bind-Value="editingMachineCenter.Manufacturer" class="form-control" />
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="mb-3">
                                    <label class="form-label">Model</label>
                                    <InputText @bind-Value="editingMachineCenter.Model" class="form-control" />
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-3">
                                <div class="mb-3">
                                    <label class="form-label">Max Capacity</label>
                                    <InputNumber @bind-Value="editingMachineCenter.MaxCapacity" class="form-control" />
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="mb-3">
                                    <label class="form-label">Capacity Unit</label>
                                    <InputText @bind-Value="editingMachineCenter.CapacityUnit" class="form-control" placeholder="tons, kg, pcs" />
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="mb-3">
                                    <label class="form-label">Hourly Rate ($)</label>
                                    <InputNumber @bind-Value="editingMachineCenter.HourlyRate" class="form-control" />
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="mb-3">
                                    <label class="form-label">Efficiency (%)</label>
                                    <InputNumber @bind-Value="editingMachineCenter.EfficiencyPercentage" class="form-control" min="0" max="100" />
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-3">
                                <div class="mb-3">
                                    <label class="form-label">Setup Time (min)</label>
                                    <InputNumber @bind-Value="editingMachineCenter.SetupTimeMinutes" class="form-control" />
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="mb-3">
                                    <label class="form-label">Warmup Time (min)</label>
                                    <InputNumber @bind-Value="editingMachineCenter.WarmupTimeMinutes" class="form-control" />
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="mb-3">
                                    <label class="form-label">Cooldown Time (min)</label>
                                    <InputNumber @bind-Value="editingMachineCenter.CooldownTimeMinutes" class="form-control" />
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="mb-3">
                                    <label class="form-label">Current Status</label>
                                    <InputSelect @bind-Value="editingMachineCenter.CurrentStatus" class="form-select">
                                        <option value="Available">Available</option>
                                        <option value="InUse">In Use</option>
                                        <option value="Maintenance">Maintenance</option>
                                        <option value="Breakdown">Breakdown</option>
                                    </InputSelect>
                                </div>
                            </div>
                        </div>

                        <div class="form-check">
                            <InputCheckbox @bind-Value="editingMachineCenter.IsActive" class="form-check-input" id="isActive" />
                            <label class="form-check-label" for="isActive">
                                Active
                            </label>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                        <button type="submit" class="btn btn-primary">
                            <i class="fas fa-save me-2"></i>Save Machine Center
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private List<MachineCenter>? machineCenters;
    private List<MachineCenter>? filteredMachineCenters;
    private List<WorkCenter>? workCenters;
    private MachineCenter editingMachineCenter = new();
    private bool showModal = false;
    private bool showStats = true;
    private int companyId = 1; // TODO: Get from user context
    private int? currentUserId;
    private string searchTerm = string.Empty;
    private List<TableColumn<MachineCenter>> tableColumns = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userIdClaim = authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier);
        if (userIdClaim != null && int.TryParse(userIdClaim.Value, out var userId))
        {
            currentUserId = userId;
        }
        
        InitializeTableColumns();
        await LoadData();
    }
    
    private void InitializeTableColumns()
    {
        tableColumns = new List<TableColumn<MachineCenter>>
        {
            new TableColumn<MachineCenter> 
            { 
                Field = "MachineCode", 
                Title = "Code", 
                Sortable = true,
                Template = (context) => @<text><code>@context.MachineCode</code></text>
            },
            new TableColumn<MachineCenter> 
            { 
                Field = "MachineName", 
                Title = "Name", 
                Sortable = true,
                Template = (context) => @<text>
                    <strong>@context.MachineName</strong>
                    @if (!string.IsNullOrEmpty(context.Model))
                    {
                        <br />
                        <small class="text-muted">@context.Manufacturer @context.Model</small>
                    }
                </text>
            },
            new TableColumn<MachineCenter> 
            { 
                Field = "MachineType", 
                Title = "Type", 
                Sortable = true,
                Template = (context) => @<span class="badge bg-secondary">@context.MachineType</span>
            },
            new TableColumn<MachineCenter> 
            { 
                Field = "WorkCenter.Name", 
                Title = "Work Center", 
                Sortable = true,
                Template = (context) => @<text>@context.WorkCenter?.Name</text>
            },
            new TableColumn<MachineCenter> 
            { 
                Field = "CurrentStatus", 
                Title = "Status", 
                Sortable = true,
                Template = (context) => 
                {
                    var statusClass = context.CurrentStatus switch
                    {
                        "Available" => "bg-success",
                        "InUse" => "bg-primary",
                        "Maintenance" => "bg-warning",
                        "Breakdown" => "bg-danger",
                        _ => "bg-secondary"
                    };
                    return @<span class="badge @statusClass">@context.CurrentStatus</span>;
                }
            },
            new TableColumn<MachineCenter> 
            { 
                Field = "MaxCapacity", 
                Title = "Capacity", 
                Sortable = true,
                Template = (context) => @<text>@context.MaxCapacity @context.CapacityUnit</text>
            },
            new TableColumn<MachineCenter> 
            { 
                Field = "HourlyRate", 
                Title = "Hourly Rate", 
                Sortable = true,
                Template = (context) => @<text>$@context.HourlyRate.ToString("N2")</text>
            },
            new TableColumn<MachineCenter> 
            { 
                Field = "EfficiencyPercentage", 
                Title = "Efficiency", 
                Sortable = true,
                Template = (context) => @<text>@context.EfficiencyPercentage%</text>
            },
            new TableColumn<MachineCenter> 
            { 
                Field = "Actions", 
                Title = "Actions", 
                Sortable = false,
                Template = (context) => @<div class="btn-group btn-group-sm" role="group">
                    <button class="btn btn-outline-primary" @onclick="() => ViewMachineCenter(context)" title="View Details">
                        <i class="fas fa-eye"></i>
                    </button>
                    <button class="btn btn-outline-secondary" @onclick="() => EditMachineCenter(context)" title="Edit">
                        <i class="fas fa-edit"></i>
                    </button>
                    <button class="btn btn-outline-info" @onclick="() => ManageCapabilities(context)" title="Capabilities">
                        <i class="fas fa-tasks"></i>
                    </button>
                    <button class="btn btn-outline-danger" @onclick="() => DeleteMachineCenter(context)" title="Delete">
                        <i class="fas fa-trash"></i>
                    </button>
                </div>
            }
        };
    }

    private async Task LoadData()
    {
        using var context = await DbFactory.CreateDbContextAsync();
        
        workCenters = await context.WorkCenters
            .Where(w => w.CompanyId == companyId && !w.IsDeleted && w.IsActive)
            .OrderBy(w => w.Name)
            .ToListAsync();
        
        machineCenters = await context.MachineCenters
            .Include(m => m.WorkCenter)
            .Where(m => m.CompanyId == companyId && !m.IsDeleted)
            .OrderBy(m => m.MachineCode)
            .ToListAsync();
            
        FilterMachineCenters();
    }
    
    private void FilterMachineCenters()
    {
        if (machineCenters == null)
        {
            filteredMachineCenters = null;
            return;
        }
        
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredMachineCenters = machineCenters.ToList();
        }
        else
        {
            var term = searchTerm.ToLower();
            filteredMachineCenters = machineCenters.Where(m =>
                m.MachineCode.ToLower().Contains(term) ||
                m.MachineName.ToLower().Contains(term) ||
                (m.Description != null && m.Description.ToLower().Contains(term)) ||
                m.MachineType.ToLower().Contains(term) ||
                (m.Manufacturer != null && m.Manufacturer.ToLower().Contains(term)) ||
                (m.Model != null && m.Model.ToLower().Contains(term)) ||
                (m.WorkCenter?.Name != null && m.WorkCenter.Name.ToLower().Contains(term))
            ).ToList();
        }
    }
    
    private void OnSearchChanged(string value)
    {
        searchTerm = value;
        FilterMachineCenters();
    }

    private void ShowAddMachineCenterModal()
    {
        editingMachineCenter = new MachineCenter
        {
            CompanyId = companyId,
            IsActive = true,
            EfficiencyPercentage = 85,
            CurrentStatus = "Available",
            MachineType = "CNC"
        };
        showModal = true;
    }

    private void EditMachineCenter(MachineCenter machine)
    {
        editingMachineCenter = new MachineCenter
        {
            Id = machine.Id,
            MachineCode = machine.MachineCode,
            MachineName = machine.MachineName,
            Description = machine.Description,
            WorkCenterId = machine.WorkCenterId,
            CompanyId = machine.CompanyId,
            Manufacturer = machine.Manufacturer,
            Model = machine.Model,
            SerialNumber = machine.SerialNumber,
            MachineType = machine.MachineType,
            MachineSubType = machine.MachineSubType,
            MaxCapacity = machine.MaxCapacity,
            CapacityUnit = machine.CapacityUnit,
            SetupTimeMinutes = machine.SetupTimeMinutes,
            WarmupTimeMinutes = machine.WarmupTimeMinutes,
            CooldownTimeMinutes = machine.CooldownTimeMinutes,
            HourlyRate = machine.HourlyRate,
            PowerConsumptionKwh = machine.PowerConsumptionKwh,
            PowerCostPerKwh = machine.PowerCostPerKwh,
            EfficiencyPercentage = machine.EfficiencyPercentage,
            QualityRate = machine.QualityRate,
            AvailabilityRate = machine.AvailabilityRate,
            IsActive = machine.IsActive,
            CurrentStatus = machine.CurrentStatus,
            MaintenanceIntervalHours = machine.MaintenanceIntervalHours,
            CurrentOperatingHours = machine.CurrentOperatingHours,
            RequiresTooling = machine.RequiresTooling,
            ToolingRequirements = machine.ToolingRequirements
        };
        showModal = true;
    }

    private async Task SaveMachineCenter()
    {
        using var context = await DbFactory.CreateDbContextAsync();

        if (editingMachineCenter.Id == 0)
        {
            editingMachineCenter.CreatedDate = DateTime.UtcNow;
            editingMachineCenter.CreatedByUserId = currentUserId;
            context.MachineCenters.Add(editingMachineCenter);
        }
        else
        {
            var existing = await context.MachineCenters.FindAsync(editingMachineCenter.Id);
            if (existing != null)
            {
                existing.MachineCode = editingMachineCenter.MachineCode;
                existing.MachineName = editingMachineCenter.MachineName;
                existing.Description = editingMachineCenter.Description;
                existing.WorkCenterId = editingMachineCenter.WorkCenterId;
                existing.Manufacturer = editingMachineCenter.Manufacturer;
                existing.Model = editingMachineCenter.Model;
                existing.SerialNumber = editingMachineCenter.SerialNumber;
                existing.MachineType = editingMachineCenter.MachineType;
                existing.MachineSubType = editingMachineCenter.MachineSubType;
                existing.MaxCapacity = editingMachineCenter.MaxCapacity;
                existing.CapacityUnit = editingMachineCenter.CapacityUnit;
                existing.SetupTimeMinutes = editingMachineCenter.SetupTimeMinutes;
                existing.WarmupTimeMinutes = editingMachineCenter.WarmupTimeMinutes;
                existing.CooldownTimeMinutes = editingMachineCenter.CooldownTimeMinutes;
                existing.HourlyRate = editingMachineCenter.HourlyRate;
                existing.PowerConsumptionKwh = editingMachineCenter.PowerConsumptionKwh;
                existing.PowerCostPerKwh = editingMachineCenter.PowerCostPerKwh;
                existing.EfficiencyPercentage = editingMachineCenter.EfficiencyPercentage;
                existing.QualityRate = editingMachineCenter.QualityRate;
                existing.AvailabilityRate = editingMachineCenter.AvailabilityRate;
                existing.IsActive = editingMachineCenter.IsActive;
                existing.CurrentStatus = editingMachineCenter.CurrentStatus;
                existing.MaintenanceIntervalHours = editingMachineCenter.MaintenanceIntervalHours;
                existing.CurrentOperatingHours = editingMachineCenter.CurrentOperatingHours;
                existing.RequiresTooling = editingMachineCenter.RequiresTooling;
                existing.ToolingRequirements = editingMachineCenter.ToolingRequirements;
                existing.LastModified = DateTime.UtcNow;
                existing.LastModifiedByUserId = currentUserId;
            }
        }

        await context.SaveChangesAsync();
        await LoadData();
        CloseModal();
    }

    private async Task DeleteMachineCenter(MachineCenter machine)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
            $"Are you sure you want to delete the machine '{machine.MachineName}'?");
        
        if (confirmed)
        {
            using var context = await DbFactory.CreateDbContextAsync();
            var existing = await context.MachineCenters.FindAsync(machine.Id);
            if (existing != null)
            {
                existing.IsDeleted = true;
                existing.LastModified = DateTime.UtcNow;
                existing.LastModifiedByUserId = currentUserId;
                await context.SaveChangesAsync();
                await LoadData();
            }
        }
    }

    private void ViewMachineCenter(MachineCenter machine)
    {
        Navigation.NavigateTo($"/settings/machine-centers/{machine.Id}");
    }

    private void ManageCapabilities(MachineCenter machine)
    {
        Navigation.NavigateTo($"/settings/machine-centers/{machine.Id}/capabilities");
    }

    private void CloseModal()
    {
        showModal = false;
        editingMachineCenter = new();
    }
}