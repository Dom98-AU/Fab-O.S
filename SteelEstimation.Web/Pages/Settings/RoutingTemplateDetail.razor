@page "/settings/business-configuration/routing-templates/{RoutingId:int}"
@using SteelEstimation.Core.Entities
@using SteelEstimation.Infrastructure.Data
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Authorization
@inject ApplicationDbContext DbContext
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@attribute [Authorize(Roles = "Administrator,Project Manager")]

<PageTitle>Configure Routing - @routingTemplate?.Name</PageTitle>

<div class="container-fluid">
    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (routingTemplate == null)
    {
        <div class="alert alert-danger">
            <i class="fas fa-exclamation-circle me-2"></i>
            Routing template not found.
        </div>
        <button class="btn btn-secondary" @onclick="GoBack">
            <i class="fas fa-arrow-left me-2"></i>Back to Routing Templates
        </button>
    }
    else
    {
        <div class="d-flex justify-content-between align-items-center mb-4">
            <div>
                <h3><i class="fas fa-project-diagram me-2"></i>@routingTemplate.Name</h3>
                <p class="text-muted mb-0">@routingTemplate.Description</p>
            </div>
            <div>
                <button class="btn btn-primary" @onclick="SaveChanges" disabled="@(!hasChanges)">
                    <i class="fas fa-save me-2"></i>Save Changes
                </button>
                <button class="btn btn-secondary ms-2" @onclick="GoBack">
                    <i class="fas fa-arrow-left me-2"></i>Back
                </button>
            </div>
        </div>

        <div class="row">
            <!-- Available Work Centers -->
            <div class="col-md-4">
                <div class="card">
                    <div class="card-header bg-secondary text-white">
                        <i class="fas fa-industry me-2"></i>Available Work Centers
                    </div>
                    <div class="card-body" style="max-height: 600px; overflow-y: auto;">
                        @if (availableWorkCenters == null || !availableWorkCenters.Any())
                        {
                            <p class="text-muted">No work centers available</p>
                        }
                        else
                        {
                            <div class="work-center-list">
                                @foreach (var wc in availableWorkCenters)
                                {
                                    <div class="work-center-item"
                                         draggable="true"
                                         @ondragstart="() => StartDrag(wc)"
                                         @ondragend="EndDrag">
                                        <div class="d-flex justify-content-between align-items-center">
                                            <div>
                                                <strong>@wc.Code</strong>
                                                <br />
                                                <small class="text-muted">@wc.Name</small>
                                            </div>
                                            <span class="badge bg-info">$@wc.HourlyRate/hr</span>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                    </div>
                </div>
            </div>

            <!-- Routing Operations -->
            <div class="col-md-8">
                <div class="card">
                    <div class="card-header bg-primary text-white">
                        <i class="fas fa-route me-2"></i>Routing Operations
                        <span class="badge bg-light text-dark ms-2">@operations.Count operations</span>
                        <span class="badge bg-warning text-dark ms-2">@operations.Sum(o => o.EstimatedTimePerUnit).ToString("F2") min total</span>
                    </div>
                    <div class="card-body">
                        <div class="drop-zone @(isDraggingOver ? "drag-over" : "")"
                             @ondragover="PreventDefault"
                             @ondragover:preventDefault="true"
                             @ondrop="() => HandleDrop(null)"
                             @ondrop:preventDefault="true"
                             @ondragenter="() => isDraggingOver = true"
                             @ondragleave="() => isDraggingOver = false">
                            
                            @if (!operations.Any())
                            {
                                <div class="text-center py-5 text-muted">
                                    <i class="fas fa-hand-pointer fa-3x mb-3"></i>
                                    <p>Drag work centers here to create routing operations</p>
                                </div>
                            }
                            else
                            {
                                @foreach (var op in operations.OrderBy(o => o.SequenceNumber))
                                {
                                    <div class="operation-item @(op == draggedOperation ? "dragging" : "")"
                                         draggable="true"
                                         @ondragstart="() => StartDragOperation(op)"
                                         @ondragend="EndDrag"
                                         @ondragover="PreventDefault"
                                         @ondragover:preventDefault="true"
                                         @ondrop="() => HandleDropReorder(op)"
                                         @ondrop:preventDefault="true">
                                        <div class="d-flex justify-content-between align-items-center">
                                            <div class="d-flex align-items-center">
                                                <span class="sequence-number">@op.SequenceNumber</span>
                                                <div class="ms-3">
                                                    <strong>@op.OperationCode - @op.OperationName</strong>
                                                    <br />
                                                    <small class="text-muted">
                                                        @op.WorkCenter.Name | 
                                                        Setup: @op.SetupTimeMinutes min | 
                                                        Process: @op.ProcessingTimePerUnit min/unit
                                                    </small>
                                                </div>
                                            </div>
                                            <div>
                                                <button class="btn btn-sm btn-outline-primary" @onclick="() => EditOperation(op)">
                                                    <i class="fas fa-edit"></i>
                                                </button>
                                                <button class="btn btn-sm btn-outline-danger ms-1" @onclick="() => RemoveOperation(op)">
                                                    <i class="fas fa-trash"></i>
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                }
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<!-- Operation Edit Modal -->
@if (showEditModal && editingOperation != null)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit Operation</h5>
                    <button type="button" class="btn-close" @onclick="CloseEditModal"></button>
                </div>
                <div class="modal-body">
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label class="form-label">Operation Code</label>
                            <input type="text" class="form-control" @bind="editingOperation.OperationCode" />
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Operation Name</label>
                            <input type="text" class="form-control" @bind="editingOperation.OperationName" />
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-4">
                            <label class="form-label">Setup Time (min)</label>
                            <input type="number" class="form-control" @bind="editingOperation.SetupTimeMinutes" step="0.01" />
                        </div>
                        <div class="col-md-4">
                            <label class="form-label">Process Time/Unit (min)</label>
                            <input type="number" class="form-control" @bind="editingOperation.ProcessingTimePerUnit" step="0.01" />
                        </div>
                        <div class="col-md-4">
                            <label class="form-label">Required Operators</label>
                            <input type="number" class="form-control" @bind="editingOperation.RequiredOperators" />
                        </div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Description</label>
                        <textarea class="form-control" @bind="editingOperation.Description" rows="3"></textarea>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Work Instructions</label>
                        <textarea class="form-control" @bind="editingOperation.WorkInstructions" rows="3"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseEditModal">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="SaveOperation">
                        <i class="fas fa-save me-2"></i>Save
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<style>
    .work-center-item {
        padding: 12px;
        margin-bottom: 8px;
        border: 1px solid #dee2e6;
        border-radius: 4px;
        cursor: move;
        background: white;
        transition: all 0.2s;
    }
    
    .work-center-item:hover {
        background: #f8f9fa;
        transform: translateX(5px);
    }
    
    .drop-zone {
        min-height: 400px;
        border: 2px dashed #dee2e6;
        border-radius: 8px;
        padding: 16px;
        transition: all 0.3s;
    }
    
    .drop-zone.drag-over {
        border-color: #0d6efd;
        background: #e7f1ff;
    }
    
    .operation-item {
        padding: 16px;
        margin-bottom: 12px;
        border: 1px solid #dee2e6;
        border-radius: 4px;
        background: white;
        cursor: move;
        transition: all 0.2s;
    }
    
    .operation-item:hover {
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }
    
    .operation-item.dragging {
        opacity: 0.5;
    }
    
    .sequence-number {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        width: 32px;
        height: 32px;
        border-radius: 50%;
        background: #0d6efd;
        color: white;
        font-weight: bold;
    }
</style>

@code {
    [Parameter] public int RoutingId { get; set; }
    
    private RoutingTemplate? routingTemplate;
    private List<RoutingOperation> operations = new();
    private List<WorkCenter> availableWorkCenters = new();
    private User? currentUser;
    private bool isLoading = true;
    private bool hasChanges = false;
    
    // Drag and drop state
    private WorkCenter? draggedWorkCenter;
    private RoutingOperation? draggedOperation;
    private bool isDraggingOver = false;
    
    // Edit modal state
    private bool showEditModal = false;
    private RoutingOperation? editingOperation;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }
    
    private async Task LoadData()
    {
        isLoading = true;
        
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        currentUser = await DbContext.Users
            .Include(u => u.Company)
            .FirstOrDefaultAsync(u => u.Email == authState.User.Identity!.Name);
            
        if (currentUser != null)
        {
            routingTemplate = await DbContext.RoutingTemplates
                .Include(rt => rt.Operations)
                    .ThenInclude(op => op.WorkCenter)
                .FirstOrDefaultAsync(rt => rt.Id == RoutingId && rt.CompanyId == currentUser.CompanyId);
                
            if (routingTemplate != null)
            {
                operations = routingTemplate.Operations.OrderBy(o => o.SequenceNumber).ToList();
            }
            
            availableWorkCenters = await DbContext.WorkCenters
                .Where(wc => wc.CompanyId == currentUser.CompanyId && wc.IsActive)
                .OrderBy(wc => wc.Code)
                .ToListAsync();
        }
        
        isLoading = false;
    }
    
    private void StartDrag(WorkCenter wc)
    {
        draggedWorkCenter = wc;
        draggedOperation = null;
    }
    
    private void StartDragOperation(RoutingOperation op)
    {
        draggedOperation = op;
        draggedWorkCenter = null;
    }
    
    private void EndDrag()
    {
        draggedWorkCenter = null;
        draggedOperation = null;
        isDraggingOver = false;
    }
    
    private void PreventDefault(Microsoft.AspNetCore.Components.Web.DragEventArgs e)
    {
        // Handled by preventDefault attribute
    }
    
    private void HandleDrop(RoutingOperation? targetOp)
    {
        if (draggedWorkCenter != null)
        {
            // Create new operation from work center
            var newOp = new RoutingOperation
            {
                RoutingTemplateId = RoutingId,
                WorkCenterId = draggedWorkCenter.Id,
                WorkCenter = draggedWorkCenter,
                SequenceNumber = operations.Count + 1,
                OperationCode = $"OP{(operations.Count + 1):000}",
                OperationName = draggedWorkCenter.Name,
                OperationType = "Processing",
                SetupTimeMinutes = 10,
                ProcessingTimePerUnit = 5,
                RequiredOperators = 1,
                CalculationMethod = "PerUnit",
                EfficiencyFactor = 100,
                IsActive = true,
                CreatedDate = DateTime.UtcNow,
                LastModified = DateTime.UtcNow,
                CreatedByUserId = currentUser?.Id,
                LastModifiedByUserId = currentUser?.Id
            };
            
            operations.Add(newOp);
            hasChanges = true;
        }
        
        isDraggingOver = false;
        EndDrag();
    }
    
    private void HandleDropReorder(RoutingOperation targetOp)
    {
        if (draggedOperation != null && draggedOperation != targetOp)
        {
            // Reorder operations
            operations.Remove(draggedOperation);
            var targetIndex = operations.IndexOf(targetOp);
            operations.Insert(targetIndex, draggedOperation);
            
            // Update sequence numbers
            for (int i = 0; i < operations.Count; i++)
            {
                operations[i].SequenceNumber = i + 1;
            }
            
            hasChanges = true;
        }
        
        HandleDrop(targetOp);
    }
    
    private void EditOperation(RoutingOperation op)
    {
        editingOperation = op;
        showEditModal = true;
    }
    
    private void RemoveOperation(RoutingOperation op)
    {
        operations.Remove(op);
        
        // Resequence remaining operations
        for (int i = 0; i < operations.Count; i++)
        {
            operations[i].SequenceNumber = i + 1;
        }
        
        hasChanges = true;
    }
    
    private void CloseEditModal()
    {
        showEditModal = false;
        editingOperation = null;
    }
    
    private void SaveOperation()
    {
        hasChanges = true;
        CloseEditModal();
    }
    
    private async Task SaveChanges()
    {
        if (routingTemplate == null || currentUser == null) return;
        
        try
        {
            // Remove existing operations
            var existingOps = await DbContext.RoutingOperations
                .Where(op => op.RoutingTemplateId == RoutingId)
                .ToListAsync();
            DbContext.RoutingOperations.RemoveRange(existingOps);
            
            // Add updated operations
            foreach (var op in operations)
            {
                op.RoutingTemplateId = RoutingId;
                op.LastModified = DateTime.UtcNow;
                op.LastModifiedByUserId = currentUser.Id;
                
                if (op.Id == 0)
                {
                    op.CreatedDate = DateTime.UtcNow;
                    op.CreatedByUserId = currentUser.Id;
                    DbContext.RoutingOperations.Add(op);
                }
            }
            
            // Update template total hours
            routingTemplate.EstimatedTotalHours = operations.Sum(o => o.EstimatedTimePerUnit);
            routingTemplate.LastModified = DateTime.UtcNow;
            routingTemplate.LastModifiedByUserId = currentUser.Id;
            
            await DbContext.SaveChangesAsync();
            hasChanges = false;
            
            // Reload to get updated data
            await LoadData();
        }
        catch (Exception ex)
        {
            // In production, handle error appropriately
            Console.WriteLine($"Error saving routing: {ex.Message}");
        }
    }
    
    private void GoBack()
    {
        Navigation.NavigateTo("/settings/business-configuration/routing-templates");
    }
}