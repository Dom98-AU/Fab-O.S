@page "/estimation/{estimationId:int}/package/{packageId:int}/worksheets"
@using SteelEstimation.Core.Entities
@using SteelEstimation.Core.Enums
@using SteelEstimation.Infrastructure.Data
@using Microsoft.EntityFrameworkCore
@using System.Text.Json
@using Microsoft.AspNetCore.Components.Forms
@using System.Linq.Dynamic.Core
@using Microsoft.JSInterop
@using SteelEstimation.Core.Services
@using SteelEstimation.Web.Services
@inject ApplicationDbContext DbContext
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject IWorksheetFieldService WorksheetFieldService
@inject ILogger<PackageWorksheets> Logger

<PageTitle>Worksheets - @package?.PackageName</PageTitle>

<style>
    .worksheet-page-container {
        padding: 20px;
        background-color: #f8f9fa;
        min-height: 100vh;
    }

    .worksheet-content-wrapper {
        background-color: white;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        padding: 20px;
    }

    .worksheet-tabs {
        border-bottom: 2px solid #dee2e6;
        margin-bottom: 20px;
    }

    .worksheet-tabs .nav-link {
        color: #495057;
        border: none;
        border-bottom: 3px solid transparent;
        padding: 0.5rem 1rem;
        margin-right: 1rem;
        transition: all 0.3s;
    }

    .worksheet-tabs .nav-link:hover {
        color: #007bff;
        border-bottom-color: #bee5eb;
    }

    .worksheet-tabs .nav-link.active {
        color: #007bff;
        border-bottom-color: #007bff;
        font-weight: 600;
    }

    .table-wrapper {
        overflow-x: auto;
        max-width: 100%;
        border: 1px solid #dee2e6;
        border-radius: 4px;
    }

    .worksheet-table {
        margin-bottom: 0;
    }

    .worksheet-table th {
        background-color: #f8f9fa;
        font-weight: 600;
        font-size: 0.875rem;
        color: #495057;
        white-space: nowrap;
        position: sticky;
        top: 0;
        z-index: 10;
        border-bottom: 2px solid #dee2e6;
    }

    .frozen-col {
        position: sticky;
        background-color: white;
        z-index: 5;
    }

    th.frozen-col {
        background-color: #f8f9fa;
        z-index: 11;
    }

    .editable-cell {
        cursor: pointer;
        transition: background-color 0.2s;
    }

    .editable-cell:hover {
        background-color: #e9ecef;
    }

    .editable-cell.editing {
        padding: 0;
    }

    .bundle-badge {
        font-size: 0.75rem;
        padding: 0.25rem 0.5rem;
        border-radius: 12px;
        font-weight: 500;
    }

    .pack-bundle-badge {
        background-color: #17a2b8;
        color: white;
    }

    .delivery-bundle-badge {
        background-color: #28a745;
        color: white;
    }

    /* Toast notifications */
    .toast-container {
        position: fixed;
        bottom: 20px;
        right: 20px;
        z-index: 1050;
        max-width: 400px;
    }

    .field-change-toast {
        margin-bottom: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        animation: slideInRight 0.3s ease-out;
    }

    .field-change-toast.removing {
        animation: slideOutRight 0.3s ease-out;
    }

    @@keyframes slideInRight {
        from {
            transform: translateX(100%);
            opacity: 0;
        }
        to {
            transform: translateX(0);
            opacity: 1;
        }
    }

    @@keyframes slideOutRight {
        from {
            transform: translateX(0);
            opacity: 1;
        }
        to {
            transform: translateX(100%);
            opacity: 0;
        }
    }

    /* Loading spinner */
    .loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 9999;
    }
    
    .empty-state {
        text-align: center;
        padding: 60px 20px;
        color: #6c757d;
    }

    .empty-state i {
        font-size: 4rem;
        margin-bottom: 20px;
        opacity: 0.3;
    }
</style>

@if (!_isDataLoaded || package == null || estimation == null)
{
    <div class="text-center p-5">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-3">Loading package data...</p>
    </div>
}
else
{
    <div class="worksheet-page-container" @onclick="HandlePageClick">
        <div class="worksheet-content-wrapper">
            <!-- Breadcrumb -->
            <nav aria-label="breadcrumb" class="mb-3">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item">
                        <a href="/estimation">
                            <i class="fas fa-folder-open me-1"></i>
                            Estimations
                        </a>
                    </li>
                    <li class="breadcrumb-item">
                        <a href="/estimation/@EstimationId">
                            <i class="fas fa-project-diagram me-1"></i>
                            @estimation.ProjectName
                        </a>
                    </li>
                    <li class="breadcrumb-item">
                        <a href="/estimation/@EstimationId/package/@PackageId">
                            <i class="fas fa-box me-1"></i>
                            @package.PackageName
                        </a>
                    </li>
                    <li class="breadcrumb-item active" aria-current="page">
                        <i class="fas fa-table me-1"></i>
                        Worksheets
                    </li>
                </ol>
            </nav>

            <!-- Header -->
            <div class="d-flex justify-content-between align-items-center mb-3">
                <div class="d-flex align-items-center gap-3">
                    <h4 class="mb-0">@package.PackageName - Worksheets</h4>
                    <TimeTracker EstimationId="@EstimationId" PageName="Package Worksheets" @ref="timeTracker" />
                </div>
                <div class="d-flex gap-2">
                    <button class="btn btn-outline-primary" @onclick="GoBack">
                        <i class="fas fa-arrow-left me-1"></i>
                        Back to Package
                    </button>
                </div>
            </div>

            <!-- Worksheet Tabs -->
            <ul class="nav nav-tabs worksheet-tabs" role="tablist">
                @foreach (var worksheet in worksheets.OrderBy(w => w.DisplayOrder))
                {
                    <li class="nav-item" role="presentation">
                        <button class="nav-link @(activeWorksheet?.Id == worksheet.Id ? "active" : "")"
                                @onclick="() => SelectWorksheet(worksheet)"
                                type="button" role="tab">
                            <i class="@GetWorksheetIcon(worksheet) me-1"></i>
                            @worksheet.Name
                        </button>
                    </li>
                }
            </ul>

            <!-- Tab Content -->
            <div class="tab-content">
                @if (activeWorksheet != null)
                {
                    <div class="tab-pane fade show active">
                        @if (activeWorksheet.WorksheetType == WorksheetTypes.Processing)
                        {
                            <p>Processing worksheet content will go here...</p>
                        }
                        else if (activeWorksheet.WorksheetType == WorksheetTypes.Welding)
                        {
                            <p>Welding worksheet content will go here...</p>
                        }
                    </div>
                }
            </div>

            <!-- Toast notifications -->
            <div class="toast-container">
                @foreach (var notification in _fieldChangeNotifications.ToList())
                {
                    <div class="toast field-change-toast show @(notification.IsRemoving ? "removing" : "")" role="alert">
                        <div class="toast-header">
                            <i class="fas fa-clock text-primary me-2"></i>
                            <strong class="me-auto">Field Updated</strong>
                            <small>@notification.Timestamp.ToString("HH:mm:ss")</small>
                            <button type="button" class="btn-close btn-sm" @onclick="() => RemoveNotification(notification)"></button>
                        </div>
                        <div class="toast-body">
                            <div class="mb-1"><strong>@notification.ItemDescription</strong></div>
                            <div class="text-muted small">@notification.FieldName: @notification.OldValue → @notification.NewValue</div>
                            @if (notification.HoursChange != 0)
                            {
                                <div class="mt-1 text-primary">
                                    <i class="fas fa-clock"></i> Total Hours: @notification.OldHours.ToString("N2") → @notification.NewHours.ToString("N2") 
                                    <span class="badge bg-info ms-1">@(notification.HoursChange > 0 ? "+" : "")@notification.HoursChange.ToString("N2") hrs</span>
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public int EstimationId { get; set; }
    [Parameter] public int PackageId { get; set; }

    private Project? estimation;
    private Package? package;
    private List<PackageWorksheet> worksheets = new();
    private PackageWorksheet? activeWorksheet;
    private TimeTracker? timeTracker;
    private bool _isDataLoaded = false;

    // Notifications
    private List<FieldChangeNotification> _fieldChangeNotifications = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            // Load estimation and package
            estimation = await DbContext.Projects
                .FirstOrDefaultAsync(p => p.Id == EstimationId);

            package = await DbContext.Packages
                .Include(p => p.PackageWorksheets)
                .FirstOrDefaultAsync(p => p.Id == PackageId);

            if (package != null)
            {
                worksheets = package.PackageWorksheets.ToList();
                
                // Select first worksheet by default
                if (worksheets.Any())
                {
                    activeWorksheet = worksheets.OrderBy(w => w.DisplayOrder).First();
                }
            }

            _isDataLoaded = true;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading package data");
        }
    }

    private void SelectWorksheet(PackageWorksheet worksheet)
    {
        activeWorksheet = worksheet;
        StateHasChanged();
    }

    private string GetWorksheetIcon(PackageWorksheet worksheet)
    {
        return worksheet.WorksheetType switch
        {
            WorksheetTypes.Processing => "fas fa-cogs",
            WorksheetTypes.Welding => "fas fa-fire",
            _ => "fas fa-table"
        };
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo($"/estimation/{EstimationId}/package/{PackageId}");
    }

    private void HandlePageClick()
    {
        // Close any open dropdowns or modals
        StateHasChanged();
    }

    private void RemoveNotification(FieldChangeNotification notification)
    {
        notification.IsRemoving = true;
        StateHasChanged();
        
        Task.Delay(300).ContinueWith(_ =>
        {
            _fieldChangeNotifications.Remove(notification);
            InvokeAsync(StateHasChanged);
        });
    }

    // Field change notification class
    public class FieldChangeNotification
    {
        public string ItemDescription { get; set; } = "";
        public string FieldName { get; set; } = "";
        public string OldValue { get; set; } = "";
        public string NewValue { get; set; } = "";
        public double OldHours { get; set; }
        public double NewHours { get; set; }
        public double HoursChange => NewHours - OldHours;
        public DateTime Timestamp { get; set; } = DateTime.Now;
        public bool IsRemoving { get; set; }
    }
}