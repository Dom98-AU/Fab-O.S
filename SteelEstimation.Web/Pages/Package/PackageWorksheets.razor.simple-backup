@page "/estimation/{EstimationId:int}/package/{PackageId:int}"
@using SteelEstimation.Core.Entities
@using SteelEstimation.Infrastructure.Data
@using Microsoft.EntityFrameworkCore
@using SteelEstimation.Core.DTOs
@using SteelEstimation.Core.Services
@using SteelEstimation.Core.Configuration
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Rendering
@using SteelEstimation.Web.Helpers
@using Microsoft.AspNetCore.Http
@using Microsoft.Extensions.Options
@using Newtonsoft.Json
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject IImageUploadService ImageUploadService
@inject IWorksheetChangeService WorksheetChangeService
@inject IOptions<BundleSettings> BundleSettings
@inject IOptions<MaterialMappingSettings> MaterialMappingSettings
@inject IMaterialTypeService MaterialTypeService
@inject IConfiguration Configuration
@inject SteelEstimation.Core.Interfaces.IAuthenticationService AuthenticationService
@inject IWorksheetTemplateService WorksheetTemplateService
@inject IWorksheetFieldService WorksheetFieldService
@implements IDisposable

<PageTitle>Package Worksheets - Steel Estimation Platform</PageTitle>

<style>
    /* Welding worksheet specific styles for larger row height */
    .welding-table tbody tr {
        height: 140px;
        vertical-align: middle;
    }
    
    .welding-table tbody tr td {
        vertical-align: middle;
        padding: 8px;
    }
    
    .welding-table .img-thumbnail {
        width: 120px !important;
        height: 120px !important;
        object-fit: cover;
        padding: 2px;
        border: 2px solid #dee2e6;
        transition: transform 0.2s;
    }
    
    .welding-table .img-thumbnail:hover {
        transform: scale(1.05);
        border-color: #0d6efd;
    }
    
    .welding-table .d-flex.gap-1 {
        align-items: center;
    }
    
    /* Multiple connection time fields */
    .connection-time-fields {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }
    
    .connection-time-row {
        display: flex;
        flex-direction: column;
        gap: 0.25rem;
    }
    
    .connection-time-row small {
        font-size: 0.75rem;
        line-height: 1;
    }
    
    /* Ensure input fields and selects don't expand too much */
    .welding-table input.form-control,
    .welding-table select.form-select {
        height: 38px;
    }
    
    /* Bundle select dropdown styling */
    .bundle-select {
        background-color: #f8f9fa;
        border: 2px dashed #0d6efd;
        font-size: 0.875rem;
    }
    
    .bundle-select:focus {
        background-color: #e7f1ff;
        border-color: #0b5ed7;
        box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
    }
    
    .bundle-select option {
        padding: 0.5rem;
    }
    
    /* Toast notifications for field changes */
    .toast-container {
        position: fixed;
        bottom: 20px;
        right: 20px;
        z-index: 1050;
        max-width: 350px;
    }
    
    .field-change-toast {
        background-color: #e3f2fd;
        border-left: 4px solid #2196f3;
        box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        animation: slideIn 0.3s ease-out;
    }
    
    @@keyframes slideIn {
        from {
            transform: translateX(100%);
            opacity: 0;
        }
        to {
            transform: translateX(0);
            opacity: 1;
        }
    }
    
    .field-change-toast.removing {
        animation: slideOut 0.3s ease-out;
    }
    
    @@keyframes slideOut {
        from {
            transform: translateX(0);
            opacity: 1;
        }
        to {
            transform: translateX(100%);
            opacity: 0;
        }
    }
    
    /* Toolbar styling for better organization */
    .worksheet-header-toolbar {
        background-color: #f8f9fa !important;
        border: 1px solid #dee2e6 !important;
    }
    
    .worksheet-toolbar {
        background-color: #f8f9fa !important;
        border: 1px solid #dee2e6 !important;
    }
    
    .worksheet-toolbar .btn-group {
        margin: 0;
    }
    
    .worksheet-toolbar .dropdown {
        display: inline-block;
    }
    
    /* Responsive button text hiding */
    @@media (max-width: 1200px) {
        .d-xl-inline {
            display: none !important;
        }
    }
    
    /* Vertical separator styling */
    .vr {
        width: 1px;
        min-height: 1.5rem;
        background-color: #dee2e6;
        opacity: 0.5;
    }
</style>

@{
    var renderTime = DateTime.Now.ToString("HH:mm:ss.fff");
    Console.WriteLine($"[Page Render {renderTime}] Starting render - Package: {package?.PackageName ?? "null"}, Estimation: {estimation?.ProjectName ?? "null"}");
    Console.WriteLine($"[Page Render {renderTime}] Active worksheet: {activeWorksheet?.Name ?? "null"}, Processing items: {processingItems?.Count ?? 0}, Welding items: {weldingItems?.Count ?? 0}");
    Console.WriteLine($"[Page Render {renderTime}] Package is null: {package == null}, Estimation is null: {estimation == null}, Data loaded: {_isDataLoaded}");
}

@if (!_isDataLoaded || package == null || estimation == null)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p>Loading package data...</p>
    </div>
}
else
{
    @* Original UI starts here *@
    <div class="worksheet-page-container" @onclick="HandlePageClick">
        <div class="worksheet-content-wrapper">
            <nav aria-label="breadcrumb" class="mb-3">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item">
                        <a href="/estimation">
                            <i class="fas fa-folder-open me-1"></i>
                            Estimations
                        </a>
                    </li>
                    <li class="breadcrumb-item">
                        <a href="/estimation/@EstimationId">
                            <i class="fas fa-project-diagram me-1"></i>
                            @estimation.ProjectName
                        </a>
                    </li>
                    <li class="breadcrumb-item active" aria-current="page">
                        <i class="fas fa-box me-1"></i>
                        @package.PackageName
                    </li>
                </ol>
            </nav>

            <div class="d-flex justify-content-between align-items-center mb-2">
                <div class="d-flex align-items-center gap-3">
                    <h4 class="mb-0">@package.PackageName</h4>
                    <TimeTracker EstimationId="@EstimationId" PageName="Package Worksheets" @ref="timeTracker" />
                </div>
                <span class="badge bg-@GetStatusColor(package.Status)">@package.Status</span>
            </div>
    
    @if (_showAlert && !string.IsNullOrEmpty(_alertMessage))
    {
        <div class="alert alert-@_alertType alert-dismissible fade show" role="alert">
            @_alertMessage
            <button type="button" class="btn-close" @onclick="@(() => _showAlert = false)"></button>
        </div>
    }

    <div class="card shadow-sm mb-2" style="background: linear-gradient(to right, #f8f9fa, #ffffff);">
        <div class="card-body py-1">
            <div class="row align-items-center">
                <div class="col-lg-5">
                    <div class="d-flex align-items-center gap-3">
                        <div class="d-flex align-items-center gap-2">
                            <small class="text-muted">Package:</small>
                            <strong class="text-primary">@package.PackageNumber</strong>
                        </div>
                        @if (!string.IsNullOrWhiteSpace(package.Description))
                        {
                            <div class="border-start ps-2 d-flex align-items-center gap-2">
                                <small class="text-truncate" style="max-width: 150px;" title="@package.Description">@package.Description</small>
                            </div>
                        }
                        <div class="border-start ps-2 d-flex align-items-center gap-2">
                            <small class="text-muted">Sheets:</small>
                            <strong>@worksheets.Count</strong>
                        </div>
                        <div class="border-start ps-2 d-flex align-items-center gap-2">
                            <small class="text-muted">Rate:</small>
                            <div class="input-group input-group-sm" style="width: 80px;">
                                <span class="input-group-text p-1" style="font-size: 0.75rem;">$</span>
                                <input type="number" class="form-control form-control-sm" @bind="package.LaborRatePerHour" 
                                       @bind:event="onchange" @onblur="UpdateLaborRate" 
                                       step="0.01" min="0" max="999.99" style="font-size: 0.75rem;" />
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-lg-7">
                    <div class="d-flex justify-content-end align-items-center gap-2 flex-wrap">
                        <div class="metric-card text-center px-2 py-1 rounded" style="background-color: rgba(13, 110, 253, 0.1); cursor: pointer;" @onclick="@(() => ShowMetricDetails("tonnage"))">
                            <div class="d-flex align-items-center gap-1">
                                <i class="fas fa-weight text-primary small"></i>
                                <div>
                                    <small class="text-muted d-block" style="line-height: 1;">Tonnage</small>
                                    <strong class="text-primary">@CalculateTotalTonnage().ToString("N2")t</strong>
                                </div>
                            </div>
                        </div>
                        <div class="metric-card text-center px-2 py-1 bg-info bg-opacity-10 rounded" style="cursor: pointer;" @onclick="@(() => ShowMetricDetails("total"))">
                            <div class="d-flex align-items-center gap-1">
                                <i class="fas fa-cubes text-info small"></i>
                                <div>
                                    <small class="text-muted d-block" style="line-height: 1;">Items</small>
                                    <strong class="text-info">@_cachedTotalQuantity</strong>
                                </div>
                            </div>
                        </div>
                        <div class="metric-card text-center px-2 py-1 bg-success bg-opacity-10 rounded" style="cursor: pointer;" @onclick="@(() => ShowMetricDetails("beams"))">
                            <div class="d-flex align-items-center gap-1">
                                <i class="fas fa-bars text-success small"></i>
                                <div>
                                    <small class="text-muted d-block" style="line-height: 1;">Beams</small>
                                    <strong class="text-success">@_cachedBeamCount</strong>
                                </div>
                            </div>
                        </div>
                        <div class="metric-card text-center px-2 py-1 rounded" style="background-color: rgba(102, 16, 242, 0.1); cursor: pointer;" @onclick="@(() => ShowMetricDetails("purlins"))">
                            <div class="d-flex align-items-center gap-1">
                                <i class="fas fa-grip-lines small" style="color: #6610f2;"></i>
                                <div>
                                    <small class="text-muted d-block" style="line-height: 1;">Purlins</small>
                                    <strong style="color: #6610f2;">@_cachedPurlinCount <small>(@_cachedPurlinMeters.ToString("N1")m)</small></strong>
                                </div>
                            </div>
                        </div>
                        <div class="metric-card text-center px-2 py-1 bg-warning bg-opacity-10 rounded" style="cursor: pointer;" @onclick="@(() => ShowMetricDetails("plates"))">
                            <div class="d-flex align-items-center gap-1">
                                <i class="fas fa-square text-warning small"></i>
                                <div>
                                    <small class="text-muted d-block" style="line-height: 1;">Plates</small>
                                    <strong class="text-warning">@_cachedPlateCount</strong>
                                </div>
                            </div>
                        </div>
                        <div class="metric-card text-center px-2 py-1 bg-secondary bg-opacity-10 rounded" style="cursor: pointer;" @onclick="@(() => ShowMetricDetails("misc"))">
                            <div class="d-flex align-items-center gap-1">
                                <i class="fas fa-cog text-secondary small"></i>
                                <div>
                                    <small class="text-muted d-block" style="line-height: 1;">Misc</small>
                                    <strong class="text-secondary">@CalculateMiscCount()</strong>
                                </div>
                            </div>
                        </div>
                        <div class="metric-card text-center px-2 py-1 bg-danger bg-opacity-10 rounded" style="cursor: pointer;" @onclick="@(() => ShowMetricDetails("handling"))">
                            <div class="d-flex align-items-center gap-1">
                                <i class="fas fa-clock text-danger small"></i>
                                <div>
                                    <small class="text-muted d-block" style="line-height: 1;">Handling</small>
                                    <strong class="text-danger"><text>@(CalculateTotalHandlingTime().ToString("N1"))h</text></strong>
                                </div>
                            </div>
                        </div>
                        <div class="metric-card text-center px-2 py-1 rounded" style="background-color: rgba(255, 193, 7, 0.1); cursor: pointer;" @onclick="@(() => ShowMetricDetails("tonnerate"))">
                            <div class="d-flex align-items-center gap-1">
                                <i class="fas fa-dollar-sign small" style="color: #ffc107;"></i>
                                <div>
                                    <small class="text-muted d-block" style="line-height: 1;">Tonne Rate</small>
                                    <strong style="color: #ffc107;">$@CalculateTonneRate().ToString("N2")/t</strong>
                                </div>
                            </div>
                        </div>
                        <div class="metric-card text-center px-2 py-1 rounded" style="background-color: rgba(220, 53, 69, 0.1); cursor: pointer;" @onclick="@(() => ShowMetricDetails("welding"))">
                            <div class="d-flex align-items-center gap-1">
                                <i class="fas fa-fire text-danger small"></i>
                                <div>
                                    <small class="text-muted d-block" style="line-height: 1;">Welding</small>
                                    <strong class="text-danger">@CalculateTotalWeldingHours().ToString("N1")h</strong>
                                </div>
                            </div>
                        </div>
                        <div class="metric-card text-center px-2 py-1 rounded" style="background-color: rgba(25, 135, 84, 0.1); cursor: pointer;" @onclick="@(() => ShowMetricDetails("connections"))">
                            <div class="d-flex align-items-center gap-1">
                                <i class="fas fa-link text-success small"></i>
                                <div>
                                    <small class="text-muted d-block" style="line-height: 1;">Connections</small>
                                    <strong class="text-success">@CalculateTotalConnections()</strong>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="border-bottom">
        <div class="d-inline-flex">
            @foreach (var worksheet in worksheets.OrderBy(w => w.DisplayOrder))
            {
                <button class="btn btn-link text-decoration-none px-3 py-2 border border-bottom-0 @(activeWorksheetId == worksheet.Id ? "bg-white text-dark border-top-2" : "bg-light text-secondary")" 
                        style="border-radius: 0.25rem 0.25rem 0 0; margin-bottom: -1px; margin-left: @(worksheet.DisplayOrder > 1 ? "2px" : "0");"
                        @onclick="@(() => SetActiveWorksheet(worksheet.Id))">
                    <i class="@GetWorksheetIcon(worksheet.WorksheetType)"></i> @worksheet.Name
                </button>
            }
        </div>
    </div>

    <div class="tab-content mt-3">
        @if (activeWorksheet != null)
        {
            <div class="tab-pane fade show active">
                <!-- Worksheet Header Toolbar -->
                <div class="worksheet-header-toolbar border rounded p-2 mb-3 bg-light">
                    <div class="d-flex justify-content-between align-items-center">
                        <!-- Left side: Title and view controls -->
                        <div class="d-flex align-items-center gap-3">
                            <h5 class="mb-0">@activeWorksheet.Name</h5>
                            <div class="vr"></div>
                            
                            <!-- History controls -->
                            <div class="btn-group" role="group">
                                <button class="btn btn-sm btn-outline-secondary" @onclick="UndoLastChange" title="Undo (Ctrl+Z)" disabled="@(!canUndo)">
                                    <i class="fas fa-undo"></i>
                                </button>
                                <button class="btn btn-sm btn-outline-secondary" @onclick="RedoLastChange" title="Redo (Ctrl+Y)" disabled="@(!canRedo)">
                                    <i class="fas fa-redo"></i>
                                </button>
                            </div>
                            
                            <!-- Column freezing -->
                            <div class="dropdown" @onclick:stopPropagation="true">
                                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" @onclick="ToggleFrozenColumnsDropdown">
                                    <i class="fas fa-lock"></i>
                                    <span class="d-none d-lg-inline">Freeze Columns</span>
                                </button>
                                @if (showFrozenColumnsDropdown)
                                {
                                    <div class="dropdown-menu show" style="min-width: 250px; max-height: 400px; overflow-y: auto; position: absolute; z-index: 1050;" @onclick:stopPropagation="true">
                                        <h6 class="dropdown-header">Select columns to freeze</h6>
                                        <div class="dropdown-divider"></div>
                                        @foreach (var col in columnOrder)
                                        {
                                            @if (col != "Actions" && !IsCheckboxColumn(col))
                                            {
                                                <label class="dropdown-item d-flex align-items-center" style="cursor: pointer;" @onclick:stopPropagation="true">
                                                    <input type="checkbox" class="form-check-input me-2" 
                                                           checked="@(frozenColumns.ContainsKey(col) && frozenColumns[col])"
                                                           @onchange="@(async (e) => await ToggleFrozenColumn(col))"
                                                           @onclick:stopPropagation="true" />
                                                    @GetColumnDisplayName(col)
                                                </label>
                                            }
                                        }
                                        <div class="dropdown-divider"></div>
                                        <button class="dropdown-item text-center" @onclick="@(() => { showFrozenColumnsDropdown = false; })">
                                            <i class="fas fa-times me-1"></i> Close
                                        </button>
                                    </div>
                                }
                            </div>
                        </div>
                        
                        <!-- Right side: Data controls -->
                        <div class="d-flex gap-2">
                            @if (activeWorksheet.WorksheetType == WorksheetTypes.Processing)
                            {
                                @if (processingItems?.Count == 0)
                                {
                                    <button class="btn btn-primary btn-sm" @onclick="@(() => CreateBlankProcessingItems())">
                                        <i class="fas fa-plus"></i> Create 50 Blank Rows
                                    </button>
                                }
                                else
                                {
                                    <button class="btn btn-danger btn-sm" @onclick="@ClearWorksheet">
                                        <i class="fas fa-trash"></i> Clear Worksheet
                                    </button>
                                }
                            }
                            else if (activeWorksheet.WorksheetType == WorksheetTypes.Welding)
                            {
                                @if (weldingItems?.Count == 0)
                                {
                                    <button class="btn btn-primary btn-sm" @onclick="@(() => CreateBlankWeldingItems(25))">
                                        <i class="fas fa-plus"></i> Create 25 Blank Rows
                                    </button>
                                }
                                else
                                {
                                    <button class="btn btn-danger btn-sm" @onclick="@ClearWorksheet">
                                        <i class="fas fa-trash"></i> Clear Worksheet
                                    </button>
                                }
                            }
                            <button class="btn btn-secondary btn-sm" @onclick="ShowImportModal">
                                <i class="fas fa-file-import"></i> Import from Excel
                            </button>
                        </div>
                    </div>
                </div>

                @if (activeWorksheet.WorksheetType == WorksheetTypes.Processing)
                {
                    <!-- Toolbar organized in two clean rows -->
                    <div class="worksheet-toolbar border rounded p-2 mb-3 bg-light">
                        <!-- First row: Quick filters and info -->
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <div class="d-flex align-items-center gap-3">
                                <small class="text-muted">
                                    <i class="fas fa-info-circle"></i> Auto-saves on focus out
                                </small>
                                <div class="vr"></div>
                                <div class="d-flex align-items-center gap-2">
                                    <small class="text-muted fw-bold">Quick Filters:</small>
                                    <div class="btn-group btn-group-sm" role="group">
                                        <button type="button" class="btn @(activeFilter == "all" ? "btn-primary" : "btn-outline-primary")" @onclick="@(() => SetFilter("all"))">
                                            <i class="fas fa-list"></i> All (@(processingItems?.Count ?? 0))
                                        </button>
                                        @foreach (var materialType in GetQuickFilterTypes())
                                        {
                                            var filterKey = materialType.Key.ToLower();
                                            var isActive = activeFilter == filterKey;
                                            var buttonClass = isActive ? $"btn-{GetButtonColor(materialType.Value.Color)}" : $"btn-outline-{GetButtonColor(materialType.Value.Color)}";
                                            var count = GetMaterialTypeCount(materialType.Key);
                                            
                                            <button type="button" class="btn @buttonClass" 
                                                    @onclick="@(() => SetFilter(filterKey))"
                                                    title="@GetQuickFilterTooltip(materialType.Key)">
                                                <i class="fas @GetMaterialTypeIcon(materialType.Key)"></i> @materialType.Key (@count)
                                            </button>
                                        }
                                        @if (activeFilter != "all" || columnFilters.Any())
                                        {
                                            <button type="button" class="btn btn-outline-danger" @onclick="@ClearAllFilters" title="Clear all filters">
                                                <i class="fas fa-times"></i>
                                            </button>
                                        }
                                    </div>
                                </div>
                            </div>
                            
                            <!-- View controls -->
                            <div class="d-flex gap-2">
                                <button class="btn btn-sm btn-outline-info" @onclick="ShowMaterialMappingSummary" title="View material type distribution">
                                    <i class="fas fa-chart-pie"></i>
                                    <span class="d-none d-lg-inline">Material Mapping</span>
                                </button>
                                <div class="dropdown" @ref="columnSelectorElement">
                                    <button class="btn btn-sm btn-outline-secondary dropdown-toggle" @onclick="@(() => ToggleColumnSelector())" title="Manage column visibility">
                                        <i class="fas fa-columns"></i>
                                        <span class="d-none d-lg-inline">Columns</span>
                                    </button>
                                    @if (_showColumnSelector)
                                    {
                                        <div class="dropdown-menu show" style="max-height: 500px; overflow-y: auto; min-width: 350px;" @onclick:stopPropagation="true">
                                        <h6 class="dropdown-header">Column Settings</h6>
                                        <div class="px-3 py-2">
                                            <table class="table table-sm mb-0">
                                                <thead>
                                                    <tr>
                                                        <th>Column</th>
                                                        <th class="text-center">Visible</th>
                                                        <th class="text-center">Frozen</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    <tr>
                                                        <td>ID</td>
                                                        <td class="text-center">
                                                            <input class="form-check-input" type="checkbox" @bind="@columnVisibility["ID"]" id="col-id">
                                                        </td>
                                                        <td class="text-center">
                                                            <input class="form-check-input" type="checkbox" @bind="@frozenColumns["ID"]" id="frozen-id"
                                                                   @onclick="@(() => ToggleFrozenColumn("ID"))">
                                                        </td>
                                                    </tr>
                                                    <tr>
                                                        <td>Drawing Number</td>
                                                        <td class="text-center">
                                                            <input class="form-check-input" type="checkbox" @bind="@columnVisibility["DrawingNumber"]" id="col-drawing">
                                                        </td>
                                                        <td class="text-center">
                                                            <input class="form-check-input" type="checkbox" @bind="@frozenColumns["DrawingNumber"]" id="frozen-drawing"
                                                                   @onclick="@(() => ToggleFrozenColumn("DrawingNumber"))">
                                                        </td>
                                                    </tr>
                                                    <tr>
                                                        <td>Description</td>
                                                        <td class="text-center">
                                                            <input class="form-check-input" type="checkbox" @bind="@columnVisibility["Description"]" id="col-desc">
                                                        </td>
                                                        <td class="text-center">
                                                            <input class="form-check-input" type="checkbox" @bind="@frozenColumns["Description"]" id="frozen-desc"
                                                                   @onclick="@(() => ToggleFrozenColumn("Description"))">
                                                        </td>
                                                    </tr>
                                                    <tr>
                                                        <td>Material ID</td>
                                                        <td class="text-center">
                                                            <input class="form-check-input" type="checkbox" @bind="@columnVisibility["MaterialId"]" id="col-material">
                                                        </td>
                                                        <td class="text-center">
                                                            <input class="form-check-input" type="checkbox" @bind="@frozenColumns["MaterialId"]" id="frozen-material"
                                                                   @onclick="@(() => ToggleFrozenColumn("MaterialId"))">
                                                        </td>
                                                    </tr>
                                                    <tr>
                                                        <td>Quantity</td>
                                                        <td class="text-center">
                                                            <input class="form-check-input" type="checkbox" @bind="@columnVisibility["Quantity"]" id="col-qty">
                                                        </td>
                                                        <td class="text-center">
                                                            <input class="form-check-input" type="checkbox" @bind="@frozenColumns["Quantity"]" id="frozen-qty"
                                                                   @onclick="@(() => ToggleFrozenColumn("Quantity"))">
                                                        </td>
                                                    </tr>
                                                    <tr>
                                                        <td>Length</td>
                                                        <td class="text-center">
                                                            <input class="form-check-input" type="checkbox" @bind="@columnVisibility["Length"]" id="col-length">
                                                        </td>
                                                        <td class="text-center">
                                                            <input class="form-check-input" type="checkbox" @bind="@frozenColumns["Length"]" id="frozen-length"
                                                                   @onclick="@(() => ToggleFrozenColumn("Length"))">
                                                        </td>
                                                    </tr>
                                                    <tr>
                                                        <td>Weight</td>
                                                        <td class="text-center">
                                                            <input class="form-check-input" type="checkbox" @bind="@columnVisibility["Weight"]" id="col-weight">
                                                        </td>
                                                        <td class="text-center">
                                                            <input class="form-check-input" type="checkbox" @bind="@frozenColumns["Weight"]" id="frozen-weight"
                                                                   @onclick="@(() => ToggleFrozenColumn("Weight"))">
                                                        </td>
                                                    </tr>
                                                    <tr>
                                                        <td>Total Weight</td>
                                                        <td class="text-center">
                                                            <input class="form-check-input" type="checkbox" @bind="@columnVisibility["TotalWeight"]" id="col-totalweight">
                                                        </td>
                                                        <td class="text-center">
                                                            <input class="form-check-input" type="checkbox" @bind="@frozenColumns["TotalWeight"]" id="frozen-totalweight"
                                                                   @onclick="@(() => ToggleFrozenColumn("TotalWeight"))">
                                                        </td>
                                                    </tr>
                                                    <tr>
                                                        <td>Delivery Bundle</td>
                                                        <td class="text-center">
                                                            <input class="form-check-input" type="checkbox" @bind="@columnVisibility["DeliveryBundle"]" id="col-bundle">
                                                        </td>
                                                        <td class="text-center">
                                                            <input class="form-check-input" type="checkbox" @bind="@frozenColumns["DeliveryBundle"]" id="frozen-bundle"
                                                                   @onclick="@(() => ToggleFrozenColumn("DeliveryBundle"))">
                                                        </td>
                                                    </tr>
                                                    <tr>
                                                        <td>Pack Bundle</td>
                                                        <td class="text-center">
                                                            <input class="form-check-input" type="checkbox" @bind="@columnVisibility["PackBundle"]" id="col-pack-bundle">
                                                        </td>
                                                        <td class="text-center">
                                                            <input class="form-check-input" type="checkbox" @bind="@frozenColumns["PackBundle"]" id="frozen-pack-bundle"
                                                                   @onclick="@(() => ToggleFrozenColumn("PackBundle"))">
                                                        </td>
                                                    </tr>
                                                    <tr class="table-secondary">
                                                        <td colspan="3"><strong>Time Fields</strong></td>
                                                    </tr>
                                                    <tr>
                                                        <td>Unload Time/Bundle</td>
                                                        <td class="text-center">
                                                            <input class="form-check-input" type="checkbox" @bind="@columnVisibility["UnloadTime"]" id="col-unload">
                                                        </td>
                                                        <td class="text-center">
                                                            <input class="form-check-input" type="checkbox" @bind="@frozenColumns["UnloadTime"]" id="frozen-unload"
                                                                   @onclick="@(() => ToggleFrozenColumn("UnloadTime"))">
                                                        </td>
                                                    </tr>
                                                    <tr>
                                                        <td>Mark/Measure/Cut</td>
                                                        <td class="text-center">
                                                            <input class="form-check-input" type="checkbox" @bind="@columnVisibility["MarkMeasureCut"]" id="col-mark">
                                                        </td>
                                                        <td class="text-center">
                                                            <input class="form-check-input" type="checkbox" @bind="@frozenColumns["MarkMeasureCut"]" id="frozen-mark"
                                                                   @onclick="@(() => ToggleFrozenColumn("MarkMeasureCut"))">
                                                        </td>
                                                    </tr>
                                                    <tr>
                                                        <td>Quality Check/Clean</td>
                                                        <td class="text-center">
                                                            <input class="form-check-input" type="checkbox" @bind="@columnVisibility["QualityCheck"]" id="col-quality">
                                                        </td>
                                                        <td class="text-center">
                                                            <input class="form-check-input" type="checkbox" @bind="@frozenColumns["QualityCheck"]" id="frozen-quality"
                                                                   @onclick="@(() => ToggleFrozenColumn("QualityCheck"))">
                                                        </td>
                                                    </tr>
                                                    <tr>
                                                        <td>Move to Assembly</td>
                                                        <td class="text-center">
                                                            <input class="form-check-input" type="checkbox" @bind="@columnVisibility["MoveToAssembly"]" id="col-assembly">
                                                        </td>
                                                        <td class="text-center">
                                                            <input class="form-check-input" type="checkbox" @bind="@frozenColumns["MoveToAssembly"]" id="frozen-assembly"
                                                                   @onclick="@(() => ToggleFrozenColumn("MoveToAssembly"))">
                                                        </td>
                                                    </tr>
                                                    <tr>
                                                        <td>Move After Weld</td>
                                                        <td class="text-center">
                                                            <input class="form-check-input" type="checkbox" @bind="@columnVisibility["MoveAfterWeld"]" id="col-weld">
                                                        </td>
                                                        <td class="text-center">
                                                            <input class="form-check-input" type="checkbox" @bind="@frozenColumns["MoveAfterWeld"]" id="frozen-weld"
                                                                   @onclick="@(() => ToggleFrozenColumn("MoveAfterWeld"))">
                                                        </td>
                                                    </tr>
                                                    <tr>
                                                        <td>Loading Time/Bundle</td>
                                                        <td class="text-center">
                                                            <input class="form-check-input" type="checkbox" @bind="@columnVisibility["LoadingTime"]" id="col-loading">
                                                        </td>
                                                        <td class="text-center">
                                                            <input class="form-check-input" type="checkbox" @bind="@frozenColumns["LoadingTime"]" id="frozen-loading"
                                                                   @onclick="@(() => ToggleFrozenColumn("LoadingTime"))">
                                                        </td>
                                                    </tr>
                                                </tbody>
                                            </table>
                                            <div class="mt-3">
                                                <button class="btn btn-sm btn-outline-secondary w-100" @onclick="@ResetColumnOrder">
                                                    <i class="fas fa-undo"></i> Reset Column Order
                                                </button>
                                                <small class="text-muted d-block mt-2 text-center">
                                                    <i class="fas fa-info-circle"></i> Drag column headers to reorder
                                                </small>
                                            </div>
                                        </div>
                                        <div class="dropdown-divider"></div>
                                        <div class="px-3 py-2 d-flex justify-content-between">
                                            <button class="btn btn-sm btn-link" @onclick="ShowAllColumns">Show All</button>
                                            <button class="btn btn-sm btn-link" @onclick="HideTimeColumns">Hide Time Fields</button>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                        
                        <!-- Second row: Action buttons organized by category -->
                        <div class="d-flex justify-content-between align-items-center">
                            <div class="d-flex gap-2">
                                <!-- Data Management Actions -->
                                <div class="btn-group" role="group">
                                    <button class="btn btn-sm btn-outline-primary" @onclick="async () => await ShowBulkUpdateModal()" title="Bulk update selected rows">
                                        <i class="fas fa-edit"></i>
                                        <span class="d-none d-xl-inline">Bulk Update</span>
                                    </button>
                                    <button class="btn btn-sm btn-info" @onclick="ShowBulkSplitModal" title="Split selected rows with quantity > 1">
                                        <i class="fas fa-cut"></i>
                                        <span class="d-none d-xl-inline">Split Rows</span>
                                    </button>
                                </div>
                                
                                <div class="vr"></div>
                                
                                <!-- Bundle Actions Dropdown -->
                                <div class="dropdown">
                                    <button class="btn btn-sm btn-outline-success dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                        <i class="fas fa-box"></i> Bundle Actions
                                    </button>
                                    <ul class="dropdown-menu dropdown-menu-end">
                                        <li><h6 class="dropdown-header">Delivery Bundles</h6></li>
                                        <li><a class="dropdown-item" href="#" @onclick:preventDefault @onclick="ShowAutoBundleModal">
                                            <i class="fas fa-magic"></i> Auto Delivery Bundle
                                        </a></li>
                                        <li><a class="dropdown-item" href="#" @onclick:preventDefault @onclick="@(async () => await ShowBulkBundleModal())">
                                            <i class="fas fa-boxes"></i> Bulk Delivery Bundle
                                        </a></li>
                                        @if (deliveryBundles.Any())
                                        {
                                            <li><a class="dropdown-item" href="#" @onclick:preventDefault @onclick="ShowUnbundleAllConfirmation">
                                                <i class="fas fa-unlink"></i> Unbundle All Delivery
                                            </a></li>
                                        }
                                        <li><hr class="dropdown-divider"></li>
                                        <li><h6 class="dropdown-header">Pack Bundles</h6></li>
                                        <li><a class="dropdown-item" href="#" @onclick:preventDefault @onclick="ShowAutoPackBundleModal">
                                            <i class="fas fa-magic"></i> Auto Pack Bundle
                                        </a></li>
                                        <li><a class="dropdown-item" href="#" @onclick:preventDefault @onclick="ShowBulkPackBundleModal">
                                            <i class="fas fa-boxes"></i> Bulk Pack Bundle
                                        </a></li>
                                        @if (packBundles.Any())
                                        {
                                            <li><a class="dropdown-item" href="#" @onclick:preventDefault @onclick="ShowUnbundleAllPackConfirmation">
                                                <i class="fas fa-unlink"></i> Unbundle All Pack
                                            </a></li>
                                        }
                                        <li><hr class="dropdown-divider"></li>
                                        <li><a class="dropdown-item" href="#" @onclick:preventDefault @onclick="ShowBundleManagementWindow">
                                            <i class="fas fa-list-alt"></i> Manage All Bundles
                                        </a></li>
                                    </ul>
                                </div>
                            </div>
                            
                            <!-- Right side actions -->
                            <div class="d-flex gap-2">
                                <button class="btn btn-sm btn-outline-danger" @onclick="ShowBulkDeleteConfirmation" title="Delete selected rows">
                                    <i class="fas fa-trash-alt"></i>
                                    <span class="d-none d-xl-inline">Bulk Delete</span>
                                </button>
                            </div>
                        </div>
                    </div>
                    <div class="worksheet-table-container">
                    <div class="table-wrapper">
                        <table class="table table-striped table-sm table-resizable">
                            <thead>
                                <tr>
                                    <th style="width: 30px;" class="@(frozenColumnsEnabled ? "frozen-col frozen-col-0" : "")"></th>
                                    <th style="width: 40px;" class="@(frozenColumnsEnabled ? "frozen-col frozen-col-1" : "")">
                                        <input type="checkbox" class="bundle-select-all" @onchange="@ToggleSelectAll" />
                                    </th>
                                    @{
                                        var columnDefs = GetColumnDefinitions();
                                        foreach (var columnKey in columnOrder)
                                        {
                                            if (columnVisibility.ContainsKey(columnKey) && columnVisibility[columnKey] && columnDefs.ContainsKey(columnKey))
                                            {
                                                var colDef = columnDefs[columnKey];
                                                <th style="width: @colDef.Width;" 
                                                    class="@(frozenColumnsEnabled && colDef.IsFrozen ? $"frozen-col frozen-col-{colDef.FrozenIndex}" : "")"
                                                    data-column-key="@columnKey"
                                                    data-is-frozen="@(frozenColumns.ContainsKey(columnKey) && frozenColumns[columnKey] ? "true" : "false")">
                                                    @colDef.DisplayName
                                                    @if (colDef.HasFilter)
                                                    {
                                                        <ColumnFilterDropdown ColumnKey="@columnKey" 
                                                                            ColumnName="@colDef.DisplayName"
                                                                            ColumnType="@colDef.FilterType"
                                                                            UniqueValues="@GetUniqueValues(columnKey)"
                                                                            OnFilterChanged="@HandleColumnFilter"
                                                                            OnSortChanged="@((dir) => HandleColumnSort(columnKey, dir))" />
                                                    }
                                                </th>
                                            }
                                        }
                                    }
                                    <th style="width: 100px; background-color: #f0f8ff;">Total Hours</th>
                                    <th style="width: 120px;">Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (processingItems == null || processingItems.Count == 0)
                                {
                                    <tr>
                                        <td colspan="21" class="text-center text-muted">No processing items added yet.</td>
                                    </tr>
                                }
                                else
                                {
                                    int rowNumber = 0;
                                    @foreach (var item in GetVisibleProcessingItems())
                                    {
                                        rowNumber++;
                                        <tr class="@GetRowClass(item)" data-item-id="@item.Id">
                                            <td class="@(frozenColumnsEnabled ? "frozen-col frozen-col-0" : "")" style="width: 30px;">
                                                @if (item.DeliveryBundleId != null && item.IsParentInBundle)
                                                {
                                                    <button class="btn btn-link btn-sm p-0" @onclick="@(() => ToggleBundleCollapse(item.DeliveryBundleId.Value))">
                                                        <i class="fas @(collapsedBundles.Contains(item.DeliveryBundleId.Value) ? "fa-plus-square" : "fa-minus-square") text-primary"></i>
                                                    </button>
                                                }
                                            </td>
                                            <td class="@(frozenColumnsEnabled ? "frozen-col frozen-col-1" : "")">
                                                <input type="checkbox" class="bundle-select-checkbox" data-item-id="@item.Id" 
                                                       checked="@selectedItems.Contains(item.Id)" 
                                                       @onchange="@((e) => ToggleItemSelection(item.Id, e))" />
                                            </td>
                                            @foreach (var columnKey in columnOrder)
                                            {
                                                if (columnVisibility.ContainsKey(columnKey) && columnVisibility[columnKey])
                                                {
                                                    @RenderTableCell(columnKey, item, rowNumber)
                                                }
                                            }
                                            <td style="background-color: #f0f8ff; font-weight: 600; text-align: right;">
                                                @CalculateTotalHours(item).ToString("N2")
                                            </td>
                                            <td style="white-space: nowrap;">
                                                <button class="btn btn-sm btn-primary me-1" @onclick="() => ShowSplitModal(item)" title="Split Row (Ctrl+S)" disabled="@(item.Quantity <= 1)">
                                                    <i class="fas fa-cut"></i> Split
                                                </button>
                                                <button class="btn btn-sm btn-outline-danger p-1" @onclick="() => DeleteProcessingItem(item)" title="Delete">
                                                    <i class="fas fa-trash"></i>
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                    <tr class="table-info fw-bold">
                                        @{
                                            // Calculate visible columns before frozen section
                                            var preWeightCols = 2; // Expand button + checkbox (always visible)
                                            if (columnVisibility["ID"]) preWeightCols++;
                                            if (columnVisibility["DrawingNumber"]) preWeightCols++;
                                            if (columnVisibility["Description"]) preWeightCols++;
                                            if (columnVisibility["MaterialId"]) preWeightCols++;
                                            if (columnVisibility["Quantity"]) preWeightCols++;
                                            if (columnVisibility["Length"]) preWeightCols++;
                                            if (columnVisibility["Weight"]) preWeightCols++;
                                            
                                            // Calculate visible columns after weight section
                                            var postWeightCols = 2; // Total Hours + Actions column (always visible)
                                            if (columnVisibility["DeliveryBundle"]) postWeightCols++;
                                            if (columnVisibility["PackBundle"]) postWeightCols++;
                                            if (columnVisibility["UnloadTime"]) postWeightCols++;
                                            if (columnVisibility["MarkMeasureCut"]) postWeightCols++;
                                            if (columnVisibility["QualityCheck"]) postWeightCols++;
                                            if (columnVisibility["MoveToAssembly"]) postWeightCols++;
                                            if (columnVisibility["MoveAfterWeld"]) postWeightCols++;
                                            if (columnVisibility["LoadingTime"]) postWeightCols++;
                                        }
                                        <td colspan="@preWeightCols">Total (Non-blank items)</td>
                                        @if (columnVisibility["TotalWeight"])
                                        {
                                            <td class="text-end">@processingItems.Where(p => p.Quantity > 0).Sum(p => p.TotalWeight).ToString("N2") kg</td>
                                        }
                                        <td colspan="@postWeightCols">Total Processing Time: @processingItems.Where(p => p.Quantity > 0).Sum(p => p.TotalProcessingMinutes / 60m).ToString("N2") hrs</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                    </div>
                    
                    @if (selectedItems.Count > 0)
                    {
                        <div class="selection-summary">
                            <div class="selection-info">
                                <strong>@selectedItems.Count</strong> items selected
                                <span class="ms-2">(<strong>@GetSelectedWeight().ToString("N2")</strong> kg)</span>
                            </div>
                            <button class="btn btn-light btn-sm" @onclick="ShowCreateBundleModal">
                                <i class="fas fa-box"></i> Create Delivery Bundle
                            </button>
                            <button class="btn btn-info btn-sm" @onclick="ShowCreatePackBundleModal">
                                <i class="fas fa-cube"></i> Create Pack Bundle
                            </button>
                            <button class="btn btn-outline-light btn-sm" @onclick="ClearSelection">
                                <i class="fas fa-times"></i> Clear
                            </button>
                        </div>
                    }
                    
                    @* Add rows buttons for processing worksheet *@
                    <div class="d-flex justify-content-center mt-3 gap-2">
                        <button class="btn btn-outline-primary" @onclick="() => AddProcessingRows(1)">
                            <i class="fas fa-plus"></i> Add Row
                        </button>
                        <button class="btn btn-outline-primary" @onclick="() => AddProcessingRows(5)">
                            <i class="fas fa-plus"></i> Add 5 Rows
                        </button>
                        <button class="btn btn-outline-primary" @onclick="() => AddProcessingRows(25)">
                            <i class="fas fa-plus"></i> Add 25 Rows
                        </button>
                    </div>
                }
                else if (activeWorksheet.WorksheetType == WorksheetTypes.Welding)
                {
                    <!-- Welding Toolbar -->
                    <div class="worksheet-toolbar border rounded p-2 mb-3 bg-light">
                        <div class="d-flex justify-content-between align-items-center">
                            <!-- Left side: Search and filters -->
                            <div class="d-flex align-items-center gap-3">
                                <div class="input-group" style="width: 250px;">
                                    <span class="input-group-text"><i class="fas fa-search"></i></span>
                                    <input type="text" class="form-control" placeholder="Search welding items..." 
                                           @bind="weldingSearchFilter" @bind:event="oninput" />
                                </div>
                                
                                <div class="vr"></div>
                                
                                <div class="btn-group btn-group-sm" role="group">
                                    <button class="btn @(weldingActiveFilter == "all" ? "btn-primary" : "btn-outline-primary")" 
                                            @onclick="@(() => SetWeldingFilter("all"))">
                                        <i class="fas fa-list"></i> All <span class="badge bg-light text-dark ms-1">@(weldingItems?.Count ?? 0)</span>
                                    </button>
                                    <button class="btn @(weldingActiveFilter == "active" ? "btn-success" : "btn-outline-success")" 
                                            @onclick="@(() => SetWeldingFilter("active"))">
                                        <i class="fas fa-fire"></i> Active <span class="badge bg-light text-dark ms-1">@(weldingItems?.Count(w => w.ConnectionQty > 0) ?? 0)</span>
                                    </button>
                                    <button class="btn @(weldingActiveFilter == "blank" ? "btn-secondary" : "btn-outline-secondary")" 
                                            @onclick="@(() => SetWeldingFilter("blank"))">
                                        <i class="fas fa-square"></i> Blank <span class="badge bg-light text-dark ms-1">@(weldingItems?.Count(w => w.ConnectionQty == 0) ?? 0)</span>
                                    </button>
                                </div>
                                
                                @if (selectedWeldingItems.Any())
                                {
                                    <div class="vr"></div>
                                    <span class="text-info">
                                        <i class="fas fa-check-square"></i> <strong>@selectedWeldingItems.Count</strong> selected
                                    </span>
                                }
                            </div>
                            
                            <!-- Right side: View controls -->
                            <div class="d-flex gap-2">
                                <small class="text-muted align-self-center me-2">
                                    <i class="fas fa-info-circle"></i> Auto-saves on focus out
                                </small>
                                <div class="vr"></div>
                                <div class="dropdown">
                                    <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" 
                                            data-bs-toggle="dropdown" aria-expanded="false">
                                        <i class="fas fa-columns"></i>
                                        <span class="d-none d-lg-inline">Columns</span>
                                    </button>
                                    <ul class="dropdown-menu dropdown-menu-end" style="min-width: 200px;">
                                        @foreach (var col in weldingColumnVisibility)
                                        {
                                            <li>
                                                <label class="dropdown-item">
                                                    <input type="checkbox" class="form-check-input me-2" 
                                                           checked="@col.Value" 
                                                           @onchange="@((e) => ToggleWeldingColumnVisibility(col.Key, e))" />
                                                    @GetWeldingColumnDisplayName(col.Key)
                                                </label>
                                            </li>
                                        }
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="worksheet-table-container">
                    <div class="table-wrapper @(frozenColumnsEnabled ? "frozen-table-wrapper" : "")">
                        <table class="table table-striped table-sm table-resizable welding-table @(frozenColumnsEnabled ? "frozen-table" : "")">
                            <thead>
                                <tr>
                                    <th style="width: 30px;" class="@(frozenColumnsEnabled ? "frozen-col frozen-col-0" : "")"></th>
                                    <th style="width: 40px;" class="@(frozenColumnsEnabled ? "frozen-col frozen-col-1" : "")">
                                        <input type="checkbox" @onchange="@((e) => ToggleAllWeldingItems(e))" />
                                    </th>
                                    @if (weldingColumnVisibility["ID"])
                                    {
                                        <th style="width: 50px;" class="@(frozenColumnsEnabled ? "frozen-col frozen-col-2" : "")">
                                            ID
                                            <ColumnFilterDropdown ColumnKey="WeldingID" 
                                                                ColumnName="ID"
                                                                ColumnType="number"
                                                                OnFilterChanged="@HandleWeldingColumnFilter"
                                                                OnSortChanged="@((dir) => HandleWeldingColumnSort("ID", dir))" />
                                        </th>
                                    }
                                    @if (weldingColumnVisibility["DrawingNumber"])
                                    {
                                        <th style="width: 120px;" class="@(frozenColumnsEnabled ? "frozen-col frozen-col-3" : "")">
                                            Drawing #
                                            <ColumnFilterDropdown ColumnKey="DrawingNumber" 
                                                                ColumnName="Drawing Number"
                                                                ColumnType="text"
                                                                UniqueValues="@GetUniqueWeldingValues("DrawingNumber")"
                                                                OnFilterChanged="@HandleWeldingColumnFilter"
                                                                OnSortChanged="@((dir) => HandleWeldingColumnSort("DrawingNumber", dir))" />
                                        </th>
                                    }
                                    @if (weldingColumnVisibility["Images"])
                                    {
                                        <th style="width: 150px;">Images</th>
                                    }
                                    @if (weldingColumnVisibility["ConnectionType"])
                                    {
                                        <th style="width: 250px;">
                                            Connection Type
                                            <ColumnFilterDropdown ColumnKey="ConnectionType" 
                                                                ColumnName="Connection Type"
                                                                ColumnType="text"
                                                                UniqueValues="@GetUniqueWeldingConnectionTypes()"
                                                                OnFilterChanged="@HandleWeldingColumnFilter"
                                                                OnSortChanged="@((dir) => HandleWeldingColumnSort("ConnectionType", dir))" />
                                        </th>
                                    }
                                    @if (weldingColumnVisibility["ConnectionQty"])
                                    {
                                        <th style="width: 100px;">
                                            Conn Qty
                                            <ColumnFilterDropdown ColumnKey="ConnectionQty" 
                                                                ColumnName="Connection Quantity"
                                                                ColumnType="number"
                                                                OnFilterChanged="@HandleWeldingColumnFilter"
                                                                OnSortChanged="@((dir) => HandleWeldingColumnSort("ConnectionQty", dir))" />
                                        </th>
                                    }
                                    @if (weldingColumnVisibility["AssembleFitTack"])
                                    {
                                        <th style="width: 100px;">
                                            Assemble
                                            <ColumnFilterDropdown ColumnKey="AssembleFitTack" 
                                                                ColumnName="Assemble/Fit/Tack"
                                                                ColumnType="number"
                                                                OnFilterChanged="@HandleWeldingColumnFilter"
                                                                OnSortChanged="@((dir) => HandleWeldingColumnSort("AssembleFitTack", dir))" />
                                        </th>
                                    }
                                    @if (weldingColumnVisibility["Weld"])
                                    {
                                        <th style="width: 80px;">
                                            Weld
                                            <ColumnFilterDropdown ColumnKey="Weld" 
                                                                ColumnName="Weld"
                                                                ColumnType="number"
                                                                OnFilterChanged="@HandleWeldingColumnFilter"
                                                                OnSortChanged="@((dir) => HandleWeldingColumnSort("Weld", dir))" />
                                        </th>
                                    }
                                    @if (weldingColumnVisibility["WeldCheck"])
                                    {
                                        <th style="width: 80px;">
                                            Check
                                            <ColumnFilterDropdown ColumnKey="WeldCheck" 
                                                                ColumnName="Weld Check"
                                                                ColumnType="number"
                                                                OnFilterChanged="@HandleWeldingColumnFilter"
                                                                OnSortChanged="@((dir) => HandleWeldingColumnSort("WeldCheck", dir))" />
                                        </th>
                                    }
                                    @if (weldingColumnVisibility["ConnectionHours"])
                                    {
                                        <th style="width: 250px;">Connection Hours</th>
                                    }
                                    @if (weldingColumnVisibility["TotalMinutes"])
                                    {
                                        <th style="width: 100px;">
                                            Total (hrs)
                                            <ColumnFilterDropdown ColumnKey="TotalMinutes" 
                                                                ColumnName="Total Hours"
                                                                ColumnType="number"
                                                                OnFilterChanged="@HandleWeldingColumnFilter"
                                                                OnSortChanged="@((dir) => HandleWeldingColumnSort("TotalMinutes", dir))" />
                                        </th>
                                    }
                                    <th style="width: 120px;">Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (filteredWeldingItems.Count == 0)
                                {
                                    <tr>
                                        <td colspan="12" class="text-center text-muted">No welding items found.</td>
                                    </tr>
                                }
                                else
                                {
                                    int rowNumber = 0;
                                    @foreach (var item in filteredWeldingItems)
                                    {
                                        rowNumber++;
                                        <tr class="@(selectedWeldingItems.Contains(item.Id) ? "table-active" : "")">
                                            <td class="@(frozenColumnsEnabled ? "frozen-col frozen-col-0" : "")" style="width: 30px;"></td>
                                            <td class="@(frozenColumnsEnabled ? "frozen-col frozen-col-1" : "")">
                                                <input type="checkbox" checked="@selectedWeldingItems.Contains(item.Id)" 
                                                       @onchange="@((e) => ToggleWeldingItemSelection(item.Id, e))" />
                                            </td>
                                            @if (weldingColumnVisibility["ID"])
                                            {
                                                <td class="@(frozenColumnsEnabled ? "frozen-col frozen-col-2" : "")">@rowNumber</td>
                                            }
                                            @if (weldingColumnVisibility["DrawingNumber"])
                                            {
                                                <td class="@(frozenColumnsEnabled ? "frozen-col frozen-col-3" : "")">
                                                    <input type="text" class="form-control form-control-sm" @bind="item.DrawingNumber" 
                                                           @onfocusout="() => AutoSaveWeldingRow(item)" />
                                                </td>
                                            }
                                            @if (weldingColumnVisibility["Images"])
                                            {
                                                <td>
                                                    <div class="d-flex align-items-center gap-2">
                                                        @if (item.Images != null && item.Images.Any())
                                                        {
                                                            <div class="d-flex gap-1">
                                                                @foreach (var img in item.Images.Take(3))
                                                                {
                                                                    <div class="position-relative">
                                                                        <img src="/uploads/@(img.ThumbnailPath ?? img.FilePath)" class="img-thumbnail" 
                                                                             style="cursor: pointer;" 
                                                                             @onclick="() => ShowImageModal(img)" alt="@img.FileName" />
                                                                        <button class="btn btn-danger btn-sm position-absolute top-0 end-0 p-0" 
                                                                                style="width: 20px; height: 20px; line-height: 1;" 
                                                                                @onclick:stopPropagation="true"
                                                                                @onclick="() => DeleteWeldingImage(item, img)"
                                                                                title="Delete Image">
                                                                            <i class="fas fa-times" style="font-size: 0.7rem;"></i>
                                                                        </button>
                                                                    </div>
                                                                }
                                                                @if (item.Images.Count > 3)
                                                                {
                                                                    <span class="badge bg-secondary align-self-center">+@(item.Images.Count - 3)</span>
                                                                }
                                                            </div>
                                                        }
                                                        else
                                                        {
                                                            <button class="btn btn-sm btn-outline-primary p-1" @onclick="() => ShowImageUploadModal(item)" 
                                                                    title="Upload Images">
                                                                <i class="fas fa-camera"></i>
                                                            </button>
                                                        }
                                                    </div>
                                                </td>
                                            }
                                            @if (weldingColumnVisibility["ConnectionType"])
                                            {
                                                <td>
                                                    <MultiConnectionEditor WeldingItem="item"
                                                                         AvailableConnections="weldingConnections"
                                                                         ItemConnections="@(item.ItemConnections?.ToList() ?? new())"
                                                                         OnConnectionAdded="@(conn => AddWeldingConnection(item, conn))"
                                                                         OnConnectionRemoved="@(conn => RemoveWeldingConnection(item, conn))"
                                                                         OnConnectionUpdated="@(conn => UpdateWeldingConnection(item, conn))" />
                                                </td>
                                            }
                                            @if (weldingColumnVisibility["ConnectionQty"])
                                            {
                                                <td>
                                                    @if (item.ItemConnections != null && item.ItemConnections.Any())
                                                    {
                                                        <!-- For multiple connections, show shared quantity -->
                                                        <input type="number" class="form-control form-control-sm" 
                                                               value="@item.ItemConnections.First().Quantity" 
                                                               @onchange="(e) => UpdateAllConnectionQuantities(item, e)" min="0" />
                                                    }
                                                    else
                                                    {
                                                        <!-- Legacy single connection -->
                                                        <input type="number" class="form-control form-control-sm" @bind="item.ConnectionQty" 
                                                               @onfocusout="() => AutoSaveWeldingRow(item)" min="0" />
                                                    }
                                                </td>
                                            }
                                            @if (weldingColumnVisibility["AssembleFitTack"])
                                            {
                                                <td>
                                                    @if (item.ItemConnections != null && item.ItemConnections.Any())
                                                    {
                                                        <!-- Show fields for each connection -->
                                                        <div class="connection-time-fields">
                                                            @foreach (var conn in item.ItemConnections)
                                                            {
                                                                <div class="connection-time-row">
                                                                    <small class="text-muted">@conn.WeldingConnection?.Name:</small>
                                                                    <input type="number" class="form-control form-control-sm" 
                                                                           value="@conn.ActualAssembleFitTack" 
                                                                           @onchange="@((e) => UpdateConnectionTime(conn, "AssembleFitTack", e))"
                                                                           min="0" step="0.1" />
                                                                </div>
                                                            }
                                                        </div>
                                                    }
                                                    else
                                                    {
                                                        <!-- Legacy single connection -->
                                                        <input type="number" class="form-control form-control-sm" @bind="item.AssembleFitTack" 
                                                               @onfocusout="() => AutoSaveWeldingRow(item)" min="0" step="0.1" />
                                                    }
                                                </td>
                                            }
                                            @if (weldingColumnVisibility["Weld"])
                                            {
                                                <td>
                                                    @if (item.ItemConnections != null && item.ItemConnections.Any())
                                                    {
                                                        <!-- Show fields for each connection -->
                                                        <div class="connection-time-fields">
                                                            @foreach (var conn in item.ItemConnections)
                                                            {
                                                                <div class="connection-time-row">
                                                                    <small class="text-muted">@conn.WeldingConnection?.Name:</small>
                                                                    <input type="number" class="form-control form-control-sm" 
                                                                           value="@conn.ActualWeld" 
                                                                           @onchange="@((e) => UpdateConnectionTime(conn, "Weld", e))"
                                                                           min="0" step="0.1" />
                                                                </div>
                                                            }
                                                        </div>
                                                    }
                                                    else
                                                    {
                                                        <!-- Legacy single connection -->
                                                        <input type="number" class="form-control form-control-sm" @bind="item.Weld" 
                                                               @onfocusout="() => AutoSaveWeldingRow(item)" min="0" step="0.1" />
                                                    }
                                                </td>
                                            }
                                            @if (weldingColumnVisibility["WeldCheck"])
                                            {
                                                <td>
                                                    @if (item.ItemConnections != null && item.ItemConnections.Any())
                                                    {
                                                        <!-- Show fields for each connection -->
                                                        <div class="connection-time-fields">
                                                            @foreach (var conn in item.ItemConnections)
                                                            {
                                                                <div class="connection-time-row">
                                                                    <small class="text-muted">@conn.WeldingConnection?.Name:</small>
                                                                    <input type="number" class="form-control form-control-sm" 
                                                                           value="@conn.ActualWeldCheck" 
                                                                           @onchange="@((e) => UpdateConnectionTime(conn, "WeldCheck", e))"
                                                                           min="0" step="0.1" />
                                                                </div>
                                                            }
                                                        </div>
                                                    }
                                                    else
                                                    {
                                                        <!-- Legacy single connection -->
                                                        <input type="number" class="form-control form-control-sm" @bind="item.WeldCheck" 
                                                               @onfocusout="() => AutoSaveWeldingRow(item)" min="0" step="0.1" />
                                                    }
                                                </td>
                                            }
                                            @if (weldingColumnVisibility["ConnectionHours"])
                                            {
                                                <td>
                                                    @if (item.ItemConnections != null && item.ItemConnections.Any())
                                                    {
                                                        <small class="text-muted">
                                                            @foreach (var conn in item.ItemConnections.OrderBy(c => c.WeldingConnection?.DisplayOrder))
                                                            {
                                                                <div>@conn.WeldingConnection?.Name: @((conn.TotalMinutes / 60m).ToString("N2")) hrs</div>
                                                            }
                                                        </small>
                                                    }
                                                    else
                                                    {
                                                        <span class="text-muted">-</span>
                                                    }
                                                </td>
                                            }
                                            @if (weldingColumnVisibility["TotalMinutes"])
                                            {
                                                <td><span class="text-muted">@((item.TotalWeldingMinutes / 60m).ToString("N2"))</span></td>
                                            }
                                            <td>
                                                <button class="btn btn-sm btn-outline-primary p-1 me-1" @onclick="() => DuplicateWeldingItem(item)" 
                                                        title="Copy/Duplicate">
                                                    <i class="fas fa-copy"></i>
                                                </button>
                                                <button class="btn btn-sm btn-outline-danger p-1" @onclick="() => DeleteWeldingItem(item)" 
                                                        title="Delete">
                                                    <i class="fas fa-trash"></i>
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                    <tr class="table-info fw-bold">
                                        <td colspan="@(GetWeldingColumnCount() - 1)">Total (Non-blank items)</td>
                                        <td>@((filteredWeldingItems.Where(w => w.ConnectionQty > 0).Sum(w => w.TotalWeldingMinutes) / 60m).ToString("N2")) hrs</td>
                                        <td></td>
                                    </tr>
                                    @if (package?.ProcessingEfficiency != null && package.ProcessingEfficiency != 100)
                                    {
                                        var totalHours = filteredWeldingItems.Where(w => w.ConnectionQty > 0).Sum(w => w.TotalWeldingMinutes) / 60m;
                                        var adjustedHours = totalHours * (package.ProcessingEfficiency.Value / 100m);
                                        <tr class="table-warning fw-bold">
                                            <td colspan="@(GetWeldingColumnCount() - 1)">Efficiency Adjusted (@package.ProcessingEfficiency.Value%)</td>
                                            <td>@adjustedHours.ToString("N2") hrs</td>
                                            <td></td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                    </div>
                    
                    @* Add rows buttons for welding worksheet *@
                    <div class="d-flex justify-content-center mt-3 gap-2">
                        <button class="btn btn-outline-primary" @onclick="() => AddWeldingRows(1)">
                            <i class="fas fa-plus"></i> Add Row
                        </button>
                        <button class="btn btn-outline-primary" @onclick="() => AddWeldingRows(5)">
                            <i class="fas fa-plus"></i> Add 5 Rows
                        </button>
                        <button class="btn btn-outline-primary" @onclick="() => AddWeldingRows(25)">
                            <i class="fas fa-plus"></i> Add 25 Rows
                        </button>
                    </div>
                }
                else if (activeWorksheet.WorksheetType == WorksheetTypes.Fabrication)
                {
                    <div class="alert alert-info">
                        <i class="fas fa-info-circle"></i> Fabrication worksheet functionality coming soon.
                    </div>
                }
            </div>
        }
    </div>
    
    @* Toast notifications for field changes *@
    <div class="toast-container">
        @foreach (var notification in _fieldChangeNotifications.ToList())
        {
            <div class="toast field-change-toast show @(notification.IsRemoving ? "removing" : "")" role="alert">
                <div class="toast-header">
                    <i class="fas fa-clock text-primary me-2"></i>
                    <strong class="me-auto">Field Updated</strong>
                    <small>@notification.Timestamp.ToString("HH:mm:ss")</small>
                    <button type="button" class="btn-close btn-sm" @onclick="() => RemoveNotification(notification)"></button>
                </div>
                <div class="toast-body">
                    <div class="mb-1"><strong>@notification.ItemDescription</strong></div>
                    <div class="text-muted small">@notification.FieldName: @notification.OldValue → @notification.NewValue</div>
                    @if (notification.HoursChange != 0)
                    {
                        <div class="mt-1 text-primary">
                            <i class="fas fa-clock"></i> Total Hours: @notification.OldHours.ToString("N2") → @notification.NewHours.ToString("N2") 
                            <span class="badge bg-info ms-1">@(notification.HoursChange > 0 ? "+" : "")@notification.HoursChange.ToString("N2") hrs</span>
                        </div>
                    }
                </div>
            </div>
        }
    </div>
        </div>
    </div>
}

@code {
    [Parameter] public int EstimationId { get; set; }
    [Parameter] public int PackageId { get; set; }
    
    private Project? estimation;
    private Package? package;
    private List<PackageWorksheet> worksheets = new();
    private int activeWorksheetId;
    private PackageWorksheet? activeWorksheet;
    
    private List<ProcessingItem> processingItems = new();
    private List<WeldingItem> weldingItems = new();
    private ExcelImportModal? _importModal;
    private TimeTracker? timeTracker;
    
    // Filtering
    private string activeFilter = "all";
    private Dictionary<string, ColumnFilterDropdown.FilterConfig> columnFilters = new();
    private Dictionary<string, string> columnSorts = new();
    private List<ProcessingItem> filteredProcessingItems => GetFilteredProcessingItems();
    
    // Modal state
    private bool _showConfirmation = false;
    private bool _showAlert = false;
    private string _confirmMessage = "";
    
    // Cached counts to avoid recalculation during render
    private int _cachedBeamCount = 0;
    private int _cachedPurlinCount = 0;
    private decimal _cachedPurlinMeters = 0;
    private int _cachedPlateCount = 0;
    private int _cachedTotalQuantity = 0;
    private string _alertMessage = "";
    private string _alertType = "info";
    private Func<Task>? _pendingConfirmAction;
    
    // Metric details modal state
    private bool _showMetricDetails = false;
    private string _selectedMetricType = "";
    
    // Field change notifications
    private List<FieldChangeNotification> _fieldChangeNotifications = new();
    
    private class FieldChangeNotification
    {
        public string ItemDescription { get; set; } = "";
        public string FieldName { get; set; } = "";
        public string OldValue { get; set; } = "";
        public string NewValue { get; set; } = "";
        public decimal OldHours { get; set; }
        public decimal NewHours { get; set; }
        public decimal HoursChange => NewHours - OldHours;
        public DateTime Timestamp { get; set; } = DateTime.Now;
        public bool IsRemoving { get; set; }
    }
    private string _metricTitle = "";
    
    // Bundle selection state
    private HashSet<int> selectedItems = new();
    private List<DeliveryBundle> deliveryBundles = new();
    private List<PackBundle> packBundles = new();
    private bool _showCreateBundleModal = false;
    private string _newBundleName = "";
    private bool _showCreatePackBundleModal = false;
    private string _newPackBundleName = "";
    private HashSet<int> collapsedPackBundles = new();
    
    // UI state
    private bool frozenColumnsEnabled = true;
    private bool showFrozenColumnsDropdown = false;
    private bool _showBulkUpdateModal = false;
    private HashSet<int> collapsedBundles = new();
    
    // Template state
    private WorksheetTemplate? processingTemplate;
    private WorksheetTemplate? weldingTemplate;
    private List<WorksheetTemplateField> processingFields = new();
    private List<WorksheetTemplateField> weldingFields = new();
    private List<string> processingVisibleButtons = new();
    private List<string> weldingVisibleButtons = new();
    
    // Undo/Redo state
    private bool canUndo = false;
    private bool canRedo = false;
    private int? currentUserId;
    
    // Bulk update state
    private string bulkUpdateScope = "all";
    private int? selectedBundleId;
    private string? selectedMaterialType;
    private BulkUpdateFieldsModel bulkUpdateFields = new();
    private BulkUpdateValuesModel bulkUpdateValues = new();
    
    // Change tracking for bulk update
    private decimal originalTotalHours = 0;
    private decimal currentTotalHours = 0;
    private int totalItemsModified = 0;
    private int updatesSaved = 0;
    private List<string> changeHistory = new();
    
    // Copy operation state
    private string bulkOperationTab = "update";
    private string copyDirection = "from";
    private int? selectedCopyPackageId;
    private bool copyAllFields = false;
    private BulkUpdateFieldsModel copyFields = new();
    private List<Package>? otherPackages;
    
    // Auto-bundle state
    private bool _showAutoBundleModal = false;
    private decimal maxBundleWeight = 1000; // kg
    private bool separateByType = true;
    private bool groupSimilarBeams = true;
    
    // Bulk bundle state
    private bool _showBulkBundleModal = false;
    private string bulkBundleDescriptionFilter = "";
    private HashSet<string> bulkBundleSelectedTypes = new() { "beams", "plates", "purlins", "misc" };
    private bool excludeAlreadyBundled = true;
    private string bulkBundleNameTemplate = "Bundle {0}";
    private decimal bulkBundleMaxWeight = 1000; // kg
    
    // Bulk bundle session tracking
    private List<string> bulkBundleSessionMessages = new();
    private int bulkBundleSessionBundlesCreated = 0;
    private int bulkBundleSessionItemsBundled = 0;
    
    // Pack bundle state
    private bool _showAutoPackBundleModal = false;
    private bool _showBulkPackBundleModal = false;
    private string bulkPackBundleDescriptionFilter = "";
    private HashSet<string> bulkPackBundleSelectedTypes = new() { "beams", "plates", "purlins", "misc" };
    private bool excludeAlreadyPackBundled = true;
    private string bulkPackBundleNameTemplate = "Pack Bundle {0}";
    private decimal bulkPackBundleMaxWeight = 1000; // kg
    
    // Pack bundle session tracking
    private List<string> bulkPackBundleSessionMessages = new();
    private int bulkPackBundleSessionBundlesCreated = 0;
    private int bulkPackBundleSessionItemsBundled = 0;
    
    // Bundle management window state
    private bool _showBundleManagementModal = false;
    private string bundleManagementTab = "delivery"; // "delivery" or "pack"
    private string bundleSearchFilter = "";
    private DeliveryBundle? selectedDeliveryBundleToEdit = null;
    private PackBundle? selectedPackBundleToEdit = null;
    
    // Split row state
    private bool _showSplitModal = false;
    private ProcessingItem? itemToSplit = null;
    private int numberOfSplits = 2;
    private string splitMethod = "even"; // "even" or "custom"
    private List<int> customQuantities = new() { 0, 0 };
    private bool copyTimeValues = true;
    
    // Column visibility state
    private bool _showColumnSelector = false;
    private ElementReference columnSelectorElement;
    private DotNetObjectReference<PackageWorksheets>? objRef;
    private Dictionary<string, bool> columnVisibility = new()
    {
        { "ID", true },
        { "DrawingNumber", true },
        { "Description", true },
        { "MaterialId", true },
        { "Quantity", true },
        { "Length", true },
        { "Weight", true },
        { "TotalWeight", true },
        { "DeliveryBundle", true },
        { "PackBundle", true },
        { "UnloadTime", true },
        { "MarkMeasureCut", true },
        { "QualityCheck", true },
        { "MoveToAssembly", true },
        { "MoveAfterWeld", true },
        { "LoadingTime", true }
    };
    
    // Frozen columns state - which columns are frozen (start with none frozen)
    private Dictionary<string, bool> frozenColumns = new()
    {
        { "ID", false },
        { "DrawingNumber", false },
        { "Description", false },
        { "MaterialId", false },
        { "Quantity", false },
        { "Length", false },
        { "Weight", false },
        { "TotalWeight", false },
        { "DeliveryBundle", false },
        { "PackBundle", false },
        { "UnloadTime", false },
        { "MarkMeasureCut", false },
        { "QualityCheck", false },
        { "MoveToAssembly", false },
        { "MoveAfterWeld", false },
        { "LoadingTime", false }
    };
    
    // Column order state - defines the display order of columns
    private List<string> columnOrder = new()
    {
        "ID", "DrawingNumber", "Description", "MaterialId", "Quantity", 
        "Length", "Weight", "TotalWeight", "DeliveryBundle", "UnloadTime",
        "MarkMeasureCut", "QualityCheck", "MoveToAssembly", "MoveAfterWeld", 
        "LoadingTime", "PackBundle"
    };
    
    // Bulk delete state
    private bool _showBulkDeleteModal = false;
    private string bulkDeleteScope = "selected";
    private string? deleteByMaterialType;
    
    // Unbundle all state
    private bool _showUnbundleAllModal = false;
    
    // Material mapping summary state
    private bool _showMaterialMappingSummary = false;
    private bool _showChangeMaterialTypeModal = false;
    private string? _selectedMaterialIdToChange;
    private string _newMaterialType = "Misc";
    private bool _showAddPrefixModal = false;
    private string _newPrefix = "";
    private string _newPrefixType = "Misc";
    private Dictionary<string, string> _customPrefixMappings = new();
    
    // Image upload state
    private bool _showImageUploadModal = false;
    private bool _showImageViewModal = false;
    
    // DotNet object reference for JS interop
    private DotNetObjectReference<PackageWorksheets>? _dotNetHelper;
    
    // Clipboard paste state
    private bool _isClipboardPaste = false;
    private string? _clipboardFileName;
    private WeldingItem? _selectedWeldingItem;
    private ImageUpload? _selectedImage;
    private InputFile? fileInput;
    private List<string> _uploadErrors = new();
    private bool _isDragging = false;
    
    // Data loading state
    private bool _isDataLoaded = false;
    private bool _isColumnReorderInitialized = false;
    
    // Welding connections
    private List<WeldingConnection> weldingConnections = new();
    
    // Welding worksheet specific state
    private string weldingSearchFilter = "";
    private string weldingActiveFilter = "all";
    private HashSet<int> selectedWeldingItems = new();
    private Dictionary<string, ColumnFilterDropdown.FilterConfig> weldingColumnFilters = new();
    private Dictionary<string, string> weldingColumnSorts = new();
    private List<WeldingItem> filteredWeldingItems => GetFilteredWeldingItems();
    
    private Dictionary<string, bool> weldingColumnVisibility = new()
    {
        { "ID", true },
        { "DrawingNumber", true },
        { "Images", true },
        { "ConnectionType", true },
        { "ConnectionQty", false },
        { "AssembleFitTack", true },
        { "Weld", true },
        { "WeldCheck", true },
        { "ConnectionHours", true },
        { "TotalMinutes", true }
    };
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            Console.WriteLine($"[OnInitializedAsync] Starting initialization for EstimationId: {EstimationId}, PackageId: {PackageId}");
            
            // Load bundle settings
            var settings = BundleSettings.Value;
            bulkBundleMaxWeight = settings.DefaultMaxBundleWeight;
            
            Console.WriteLine($"[OnInitializedAsync] About to call LoadData");
            await LoadData();
            
            Console.WriteLine($"[OnInitializedAsync] LoadData completed, updating cached counts");
            UpdateCachedCounts();
            
            Console.WriteLine($"[OnInitializedAsync] Initialization complete");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[OnInitializedAsync] Error during initialization: {ex.Message}");
            Console.WriteLine($"[OnInitializedAsync] Stack trace: {ex.StackTrace}");
        }
    }
    
    private void UpdateCachedCounts()
    {
        try
        {
            // Always recalculate counts to ensure they're accurate
            _cachedTotalQuantity = CalculateTotalQuantity();
            _cachedBeamCount = CalculateBeamCount();
            _cachedPurlinCount = CalculatePurlinCount();
            _cachedPurlinMeters = CalculatePurlinMeters();
            _cachedPlateCount = CalculatePlateCount();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating cached counts: {ex.Message}");
        }
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (firstRender)
            {
                // Initialize undo/redo keyboard shortcuts
                try
                {
                    await JSRuntime.InvokeVoidAsync("safeCall", "undoRedoManager.initialize");
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"[OnAfterRenderAsync] Failed to initialize undoRedoManager: {ex.Message}");
                }
                
                // Initialize clipboard paste handler
                try
                {
                    _dotNetHelper = DotNetObjectReference.Create(this);
                    await JSRuntime.InvokeVoidAsync("handleClipboardPaste", _dotNetHelper);
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"[OnAfterRenderAsync] Failed to initialize clipboard handler: {ex.Message}");
                }
                
                // Get current user ID from authentication service
                var currentUser = await AuthenticationService.GetCurrentUserAsync();
                currentUserId = currentUser?.Id;
                
                // Load saved column order
                await LoadColumnOrder();
                
                // Load frozen column preferences
                await LoadFrozenColumnPreferences();
            }
            
            if (firstRender || activeWorksheet != null)
            {
                // Add a small delay to ensure DOM is fully rendered
                await Task.Delay(200);
                try
                {
                    await JSRuntime.InvokeVoidAsync("safeCall", "initializeWorksheetTables");
                    
                    // Update frozen column positions after table initialization
                    if (frozenColumns.Any(kvp => kvp.Value))
                    {
                        await Task.Delay(100); // Small delay to ensure DOM is ready
                        await JSRuntime.InvokeVoidAsync("safeCall", "updateFrozenColumns");
                    }
                    
                    // Initialize column reordering when we have data loaded
                    if (_dotNetHelper != null && _isDataLoaded && activeWorksheet != null && !_isColumnReorderInitialized)
                    {
                        await JSRuntime.InvokeVoidAsync("columnReorder.initialize", _dotNetHelper, ".table-wrapper table");
                        _isColumnReorderInitialized = true;
                        
                        // Initialize bundle drag functionality for processing worksheets
                        if (activeWorksheet?.WorksheetType == WorksheetTypes.Processing)
                        {
                            await JSRuntime.InvokeVoidAsync("bundleDrag.initialize", _dotNetHelper);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"[OnAfterRenderAsync] Failed to initialize worksheet tables: {ex.Message}");
                }
            }
        }
        catch (JSDisconnectedException)
        {
            // Circuit has disconnected, ignore JavaScript interop errors
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in OnAfterRenderAsync: {ex.Message}");
        }
    }
    
    private async Task LoadData()
    {
        try
        {
            Console.WriteLine($"[LoadData] Starting to load data for EstimationId: {EstimationId}, PackageId: {PackageId}");
            using var dbContext = await DbContextFactory.CreateDbContextAsync();
            
            // Load estimation
            estimation = await dbContext.Projects
                .FirstOrDefaultAsync(p => p.Id == EstimationId && !p.IsDeleted);
                
            if (estimation == null)
            {
                Navigation.NavigateTo("/estimation");
                return;
            }
            
            // Load package with worksheets
            Console.WriteLine($"[LoadData] Loading package...");
            package = await dbContext.Packages
                .Include(p => p.Worksheets)
                .FirstOrDefaultAsync(p => p.Id == PackageId && p.ProjectId == EstimationId && !p.IsDeleted);
                
            if (package == null)
            {
                Navigation.NavigateTo($"/estimation/{EstimationId}");
                return;
            }
            
            Console.WriteLine($"[LoadData] Package loaded, loading worksheets...");
            worksheets = package.Worksheets.OrderBy(w => w.DisplayOrder).ToList();
            Console.WriteLine($"[LoadData] Found {worksheets.Count} worksheets");
            
            // Load worksheet templates
            var user = await AuthenticationService.GetCurrentUserAsync();
            if (user != null)
            {
                Console.WriteLine($"[LoadData] Loading worksheet templates for user {user.Id}");
                processingTemplate = await WorksheetTemplateService.GetActiveTemplateAsync(user.Id, "Processing");
                weldingTemplate = await WorksheetTemplateService.GetActiveTemplateAsync(user.Id, "Welding");
                
                if (processingTemplate != null)
                {
                    processingFields = await WorksheetTemplateService.GetVisibleFieldsAsync(processingTemplate.Id);
                    processingVisibleButtons = WorksheetFieldService.GetVisibleButtons("Processing", processingFields.Select(f => f.FieldName).ToList());
                }
                
                if (weldingTemplate != null)
                {
                    weldingFields = await WorksheetTemplateService.GetVisibleFieldsAsync(weldingTemplate.Id);
                    weldingVisibleButtons = WorksheetFieldService.GetVisibleButtons("Welding", weldingFields.Select(f => f.FieldName).ToList());
                }
            }
            
            // Set first worksheet as active
            if (worksheets.Count > 0 && activeWorksheetId == 0)
            {
                activeWorksheetId = worksheets.First().Id;
                activeWorksheet = worksheets.First();
            }
            else
            {
                activeWorksheet = worksheets.FirstOrDefault(w => w.Id == activeWorksheetId);
            }
            
            // Load items for active worksheet
            if (activeWorksheet != null)
            {
                Console.WriteLine($"[LoadData] Loading items for worksheet: {activeWorksheet.Name}");
                await LoadWorksheetItems();
            }
            Console.WriteLine($"[LoadData] Data loading complete");
            
            // Mark data as loaded
            _isDataLoaded = true;
            Console.WriteLine($"[LoadData] Data loaded flag set to true");
            
            // Force UI update
            try
            {
                Console.WriteLine($"[LoadData] About to call StateHasChanged");
                await InvokeAsync(StateHasChanged);
                Console.WriteLine($"[LoadData] StateHasChanged called successfully");
                await Task.Delay(10);
                Console.WriteLine($"[LoadData] Delay completed");
            }
            catch (Exception stateEx)
            {
                Console.WriteLine($"[LoadData] Error calling StateHasChanged: {stateEx.Message}");
                Console.WriteLine($"[LoadData] Stack trace: {stateEx.StackTrace}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading package data: {ex.Message}");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
        }
    }
    
    // Column reordering methods
    [JSInvokable]
    public async Task ReorderColumns(string draggedColumn, string targetColumn, bool dropBefore = true)
    {
        try
        {
            var draggedIndex = columnOrder.IndexOf(draggedColumn);
            var targetIndex = columnOrder.IndexOf(targetColumn);
            
            if (draggedIndex >= 0 && targetIndex >= 0 && draggedIndex != targetIndex)
            {
                // Remove the dragged column from its current position
                columnOrder.RemoveAt(draggedIndex);
                
                // Find the new target index after removal
                targetIndex = columnOrder.IndexOf(targetColumn);
                
                // Insert at the correct position based on dropBefore flag
                if (dropBefore)
                {
                    columnOrder.Insert(targetIndex, draggedColumn);
                }
                else
                {
                    columnOrder.Insert(targetIndex + 1, draggedColumn);
                }
                
                // Save the new order
                await SaveColumnOrder();
                
                // Refresh the UI
                StateHasChanged();
                
                // Update frozen column positions after reordering
                await Task.Delay(100); // Allow DOM to update
                await UpdateFrozenColumnPositions();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error reordering columns: {ex.Message}");
        }
    }
    
    [JSInvokable]
    public async Task ResetColumnOrder()
    {
        // Reset to default order
        columnOrder = new List<string>
        {
            "ID", "DrawingNumber", "Description", "MaterialId", "Quantity", 
            "Length", "Weight", "TotalWeight", "DeliveryBundle", "UnloadTime",
            "MarkMeasureCut", "QualityCheck", "MoveToAssembly", "MoveAfterWeld", 
            "LoadingTime", "PackBundle"
        };
        
        await SaveColumnOrder();
        StateHasChanged();
    }
    
    [JSInvokable]
    public async Task AssignItemToBundleFromDrag(int itemId, int bundleId)
    {
        try
        {
            var item = processingItems.FirstOrDefault(p => p.Id == itemId);
            var bundle = deliveryBundles.FirstOrDefault(b => b.Id == bundleId);
            
            if (item != null && bundle != null && item.DeliveryBundleId == null)
            {
                using var dbContext = await DbContextFactory.CreateDbContextAsync();
                
                // Update the item
                item.DeliveryBundleId = bundleId;
                item.DeliveryBundle = bundle;
                
                // Update in database
                dbContext.ProcessingItems.Update(item);
                await dbContext.SaveChangesAsync();
                
                // Reload to ensure parent flags are correct
                await LoadWorksheetItems();
                
                // Show success message
                _alertMessage = $"Item added to bundle: {bundle.BundleName}";
                _alertType = "success";
                _showAlert = true;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error assigning item to bundle from drag: {ex.Message}");
            _alertMessage = "Error assigning item to bundle. Please try again.";
            _alertType = "danger";
            _showAlert = true;
        }
    }
    
    [JSInvokable]
    public async Task AssignItemToPackBundleFromDrag(int itemId, int bundleId)
    {
        try
        {
            var item = processingItems.FirstOrDefault(p => p.Id == itemId);
            var bundle = packBundles.FirstOrDefault(b => b.Id == bundleId);
            
            if (item != null && bundle != null && item.PackBundleId == null)
            {
                using var dbContext = await DbContextFactory.CreateDbContextAsync();
                
                // Update the item
                item.PackBundleId = bundleId;
                item.PackBundle = bundle;
                
                // Update in database
                dbContext.ProcessingItems.Update(item);
                await dbContext.SaveChangesAsync();
                
                // Reload to ensure parent flags are correct
                await LoadWorksheetItems();
                
                // Show success message
                _alertMessage = $"Item added to pack bundle: {bundle.BundleName}";
                _alertType = "success";
                _showAlert = true;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error assigning item to pack bundle from drag: {ex.Message}");
            _alertMessage = "Error assigning item to pack bundle. Please try again.";
            _alertType = "danger";
            _showAlert = true;
        }
    }
    
    private async Task SaveColumnOrder()
    {
        try
        {
            // Save to localStorage via JavaScript
            await JSRuntime.InvokeVoidAsync("columnReorder.saveColumnOrder", PackageId, columnOrder);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving column order: {ex.Message}");
        }
    }
    
    private async Task LoadColumnOrder()
    {
        try
        {
            // Load from localStorage via JavaScript
            var savedOrder = await JSRuntime.InvokeAsync<List<string>?>("columnReorder.loadColumnOrder", PackageId);
            if (savedOrder != null && savedOrder.Count > 0)
            {
                // Validate that all columns are present
                var allColumnsPresent = columnOrder.All(col => savedOrder.Contains(col));
                if (allColumnsPresent)
                {
                    columnOrder = savedOrder;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading column order: {ex.Message}");
        }
    }
    
    // Helper method to get column definition
    private class ColumnDefinition
    {
        public string Key { get; set; } = "";
        public string DisplayName { get; set; } = "";
        public string Width { get; set; } = "100px";
        public bool IsFrozen { get; set; }
        public int FrozenIndex { get; set; }
        public bool HasFilter { get; set; }
        public string FilterType { get; set; } = "text";
    }
    
    private Dictionary<string, ColumnDefinition> GetColumnDefinitions()
    {
        // Get frozen columns and visible columns to calculate frozen indexes
        var visibleColumns = columnOrder.Where(col => columnVisibility.ContainsKey(col) && columnVisibility[col]).ToList();
        var frozenColumnsList = visibleColumns.Where(col => frozenColumns.ContainsKey(col) && frozenColumns[col]).ToList();
        
        var definitions = new Dictionary<string, ColumnDefinition>
        {
            ["ID"] = new ColumnDefinition { Key = "ID", DisplayName = "ID", Width = "50px", HasFilter = false },
            ["DrawingNumber"] = new ColumnDefinition { Key = "DrawingNumber", DisplayName = "Drawing Number", Width = "120px", HasFilter = true, FilterType = "text" },
            ["Description"] = new ColumnDefinition { Key = "Description", DisplayName = "Description", Width = "200px", HasFilter = true, FilterType = "text" },
            ["MaterialId"] = new ColumnDefinition { Key = "MaterialId", DisplayName = "MBE ID", Width = "100px", HasFilter = true, FilterType = "text" },
            ["Quantity"] = new ColumnDefinition { Key = "Quantity", DisplayName = "QTY", Width = "60px", HasFilter = true, FilterType = "number" },
            ["Length"] = new ColumnDefinition { Key = "Length", DisplayName = "Length (mm)", Width = "100px", HasFilter = true, FilterType = "number" },
            ["Weight"] = new ColumnDefinition { Key = "Weight", DisplayName = "Weight (kg)", Width = "100px", HasFilter = true, FilterType = "number" },
            ["TotalWeight"] = new ColumnDefinition { Key = "TotalWeight", DisplayName = "Total Weight", Width = "120px", HasFilter = false },
            ["DeliveryBundle"] = new ColumnDefinition { Key = "DeliveryBundle", DisplayName = "Delivery Bundle", Width = "150px", HasFilter = false },
            ["PackBundle"] = new ColumnDefinition { Key = "PackBundle", DisplayName = "Pack Bundle", Width = "150px", HasFilter = false },
            ["UnloadTime"] = new ColumnDefinition { Key = "UnloadTime", DisplayName = "Unload Time/Bundle", Width = "120px", HasFilter = false },
            ["MarkMeasureCut"] = new ColumnDefinition { Key = "MarkMeasureCut", DisplayName = "Mark/Measure/Cut", Width = "120px", HasFilter = false },
            ["QualityCheck"] = new ColumnDefinition { Key = "QualityCheck", DisplayName = "Quality Check/Clean", Width = "120px", HasFilter = false },
            ["MoveToAssembly"] = new ColumnDefinition { Key = "MoveToAssembly", DisplayName = "Move to Assembly", Width = "120px", HasFilter = false },
            ["MoveAfterWeld"] = new ColumnDefinition { Key = "MoveAfterWeld", DisplayName = "Move After Weld", Width = "120px", HasFilter = false },
            ["LoadingTime"] = new ColumnDefinition { Key = "LoadingTime", DisplayName = "Loading Time/Bundle", Width = "120px", HasFilter = false }
        };
        
        // Set IsFrozen and FrozenIndex based on dynamic frozen columns
        int frozenIndex = 2; // Start after expand button and checkbox
        foreach (var col in frozenColumnsList)
        {
            if (definitions.ContainsKey(col))
            {
                definitions[col].IsFrozen = true;
                definitions[col].FrozenIndex = frozenIndex++;
            }
        }
        
        return definitions;
    }
    
    // Helper to check if a column should be rendered
    private bool ShouldRenderColumn(string columnKey)
    {
        return columnVisibility.ContainsKey(columnKey) && columnVisibility[columnKey];
    }
    
    // Helper to get CSS class for a column
    private string GetColumnClass(string columnKey, bool isFrozen)
    {
        if (!isFrozen) return "";
        
        var colDef = GetColumnDefinitions().GetValueOrDefault(columnKey);
        return colDef != null && colDef.IsFrozen ? $"frozen-col frozen-col-{colDef.FrozenIndex}" : "";
    }
    
    // Helper to get dynamic CSS class based on column position in current order
    private string GetDynamicColumnClass(string columnKey)
    {
        if (!frozenColumnsEnabled) return "";
        
        // Check if this column is frozen
        if (!frozenColumns.ContainsKey(columnKey) || !frozenColumns[columnKey]) return "";
        
        // Find the actual position of this column in the current order
        var visibleColumns = columnOrder.Where(col => columnVisibility.ContainsKey(col) && columnVisibility[col]).ToList();
        var visibleFrozenColumns = visibleColumns.Where(col => frozenColumns.ContainsKey(col) && frozenColumns[col]).ToList();
        
        var frozenIndex = visibleFrozenColumns.IndexOf(columnKey);
        if (frozenIndex == -1) return "";
        
        // Add 2 for the expand button and checkbox columns
        var actualIndex = frozenIndex + 2;
        return $"frozen-col frozen-col-{actualIndex}";
    }
    
    // Render table cell content based on column key
    private RenderFragment RenderTableCell(string columnKey, ProcessingItem item, int rowNumber) => builder =>
    {
        builder.OpenElement(0, "td");
        
        // Add data-is-frozen attribute for JavaScript to use
        builder.AddAttribute(1, "data-is-frozen", frozenColumns.ContainsKey(columnKey) && frozenColumns[columnKey] ? "true" : "false");
        
        // Handle special case for TotalWeight which needs text-end class
        if (columnKey == "TotalWeight")
        {
            var totalWeightClass = GetDynamicColumnClass(columnKey);
            builder.AddAttribute(2, "class", string.IsNullOrEmpty(totalWeightClass) ? "text-end" : $"{totalWeightClass} text-end");
        }
        else
        {
            builder.AddAttribute(2, "class", GetDynamicColumnClass(columnKey));
        }
        
        switch (columnKey)
        {
            case "ID":
                builder.AddContent(2, rowNumber);
                break;
            
            case "DrawingNumber":
                builder.OpenElement(3, "input");
                builder.AddAttribute(4, "type", "text");
                builder.AddAttribute(5, "class", "form-control form-control-sm");
                builder.AddAttribute(6, "value", item.DrawingNumber ?? "");
                builder.AddAttribute(7, "onchange", EventCallback.Factory.CreateBinder(this, value => item.DrawingNumber = value, item.DrawingNumber ?? ""));
                builder.AddAttribute(8, "onfocusout", EventCallback.Factory.Create(this, () => AutoSaveProcessingRow(item)));
                builder.CloseElement();
                break;
            
            case "Description":
                builder.OpenElement(3, "input");
                builder.AddAttribute(4, "type", "text");
                builder.AddAttribute(5, "class", "form-control form-control-sm");
                builder.AddAttribute(6, "value", item.Description ?? "");
                builder.AddAttribute(7, "onchange", EventCallback.Factory.CreateBinder(this, value => item.Description = value, item.Description ?? ""));
                builder.AddAttribute(8, "onfocusout", EventCallback.Factory.Create(this, () => AutoSaveProcessingRow(item)));
                builder.CloseElement();
                break;
            
            case "MaterialId":
                builder.OpenElement(3, "div");
                builder.AddAttribute(4, "class", "d-flex align-items-center gap-1");
                
                builder.OpenElement(5, "input");
                builder.AddAttribute(6, "type", "text");
                builder.AddAttribute(7, "class", "form-control form-control-sm");
                builder.AddAttribute(8, "value", item.MaterialId ?? "");
                builder.AddAttribute(9, "onchange", EventCallback.Factory.CreateBinder(this, value => item.MaterialId = value, item.MaterialId ?? ""));
                builder.AddAttribute(10, "onfocusout", EventCallback.Factory.Create(this, () => AutoSaveProcessingRow(item)));
                builder.CloseElement();
                
                if (!string.IsNullOrEmpty(item.MaterialId))
                {
                    builder.OpenElement(11, "span");
                    builder.AddAttribute(12, "class", $"badge bg-{GetMaterialTypeBadgeColor(item.MaterialId)} text-white");
                    builder.AddAttribute(13, "style", "font-size: 0.7rem; padding: 2px 6px;");
                    builder.AddAttribute(14, "title", GetMaterialTypeTooltip(item.MaterialId));
                    builder.AddContent(15, GetMaterialTypeAbbreviation(item.MaterialId));
                    builder.CloseElement();
                }
                
                builder.CloseElement(); // div
                break;
            
            case "Quantity":
                builder.OpenElement(3, "input");
                builder.AddAttribute(4, "type", "number");
                builder.AddAttribute(5, "class", "form-control form-control-sm");
                builder.AddAttribute(6, "value", item.Quantity);
                builder.AddAttribute(7, "onchange", EventCallback.Factory.CreateBinder(this, value => item.Quantity = value, item.Quantity));
                builder.AddAttribute(8, "onfocusout", EventCallback.Factory.Create(this, () => AutoSaveProcessingRow(item)));
                builder.AddAttribute(9, "min", "0");
                builder.CloseElement();
                break;
            
            case "Length":
                builder.OpenElement(3, "input");
                builder.AddAttribute(4, "type", "number");
                builder.AddAttribute(5, "class", "form-control form-control-sm");
                builder.AddAttribute(6, "value", item.Length);
                builder.AddAttribute(7, "onchange", EventCallback.Factory.CreateBinder(this, value => item.Length = value, item.Length));
                builder.AddAttribute(8, "onfocusout", EventCallback.Factory.Create(this, () => AutoSaveProcessingRow(item)));
                builder.AddAttribute(9, "step", "0.01");
                builder.CloseElement();
                break;
            
            case "Weight":
                builder.OpenElement(3, "input");
                builder.AddAttribute(4, "type", "number");
                builder.AddAttribute(5, "class", "form-control form-control-sm");
                builder.AddAttribute(6, "value", item.Weight);
                builder.AddAttribute(7, "onchange", EventCallback.Factory.CreateBinder(this, value => item.Weight = value, item.Weight));
                builder.AddAttribute(8, "onfocusout", EventCallback.Factory.Create(this, () => AutoSaveProcessingRow(item)));
                builder.AddAttribute(9, "step", "0.01");
                builder.CloseElement();
                break;
            
            case "TotalWeight":
                builder.OpenElement(3, "span");
                builder.AddAttribute(4, "class", "text-muted");
                builder.AddContent(5, item.TotalWeight.ToString("N2"));
                builder.CloseElement();
                break;
            
            case "DeliveryBundle":
                RenderDeliveryBundleCell(builder, item);
                break;
            
            case "PackBundle":
                RenderPackBundleCell(builder, item);
                break;
            
            case "UnloadTime":
                if (item.DeliveryBundleId != null && !item.IsParentInBundle)
                {
                    builder.OpenElement(3, "span");
                    builder.AddAttribute(4, "class", "text-muted");
                    builder.AddContent(5, "-");
                    builder.CloseElement();
                }
                else
                {
                    builder.OpenElement(3, "input");
                    builder.AddAttribute(4, "type", "number");
                    builder.AddAttribute(5, "class", "form-control form-control-sm");
                    builder.AddAttribute(6, "value", item.UnloadTimePerBundle);
                    builder.AddAttribute(7, "onchange", EventCallback.Factory.CreateBinder(this, value => item.UnloadTimePerBundle = value, item.UnloadTimePerBundle));
                    builder.AddAttribute(8, "onfocusout", EventCallback.Factory.Create(this, () => AutoSaveProcessingRow(item)));
                    builder.AddAttribute(9, "min", "0");
                    builder.CloseElement();
                }
                break;
            
            case "MarkMeasureCut":
                builder.OpenElement(3, "input");
                builder.AddAttribute(4, "type", "number");
                builder.AddAttribute(5, "class", "form-control form-control-sm");
                builder.AddAttribute(6, "value", item.MarkMeasureCut);
                builder.AddAttribute(7, "onchange", EventCallback.Factory.CreateBinder(this, value => item.MarkMeasureCut = value, item.MarkMeasureCut));
                builder.AddAttribute(8, "onfocusout", EventCallback.Factory.Create(this, () => AutoSaveProcessingRow(item)));
                builder.AddAttribute(9, "min", "0");
                builder.CloseElement();
                break;
            
            case "QualityCheck":
                builder.OpenElement(3, "input");
                builder.AddAttribute(4, "type", "number");
                builder.AddAttribute(5, "class", "form-control form-control-sm");
                builder.AddAttribute(6, "value", item.QualityCheckClean);
                builder.AddAttribute(7, "onchange", EventCallback.Factory.CreateBinder(this, value => item.QualityCheckClean = value, item.QualityCheckClean));
                builder.AddAttribute(8, "onfocusout", EventCallback.Factory.Create(this, () => AutoSaveProcessingRow(item)));
                builder.AddAttribute(9, "min", "0");
                builder.CloseElement();
                break;
            
            case "MoveToAssembly":
                if (item.PackBundleId != null && !item.IsParentInPackBundle)
                {
                    builder.OpenElement(3, "span");
                    builder.AddAttribute(4, "class", "text-muted");
                    builder.AddContent(5, "-");
                    builder.CloseElement();
                }
                else
                {
                    builder.OpenElement(3, "input");
                    builder.AddAttribute(4, "type", "number");
                    builder.AddAttribute(5, "class", "form-control form-control-sm");
                    builder.AddAttribute(6, "value", item.MoveToAssembly);
                    builder.AddAttribute(7, "onchange", EventCallback.Factory.CreateBinder(this, value => item.MoveToAssembly = value, item.MoveToAssembly));
                    builder.AddAttribute(8, "onfocusout", EventCallback.Factory.Create(this, () => AutoSaveProcessingRow(item)));
                    builder.AddAttribute(9, "min", "0");
                    builder.CloseElement();
                }
                break;
            
            case "MoveAfterWeld":
                if (item.PackBundleId != null && !item.IsParentInPackBundle)
                {
                    builder.OpenElement(3, "span");
                    builder.AddAttribute(4, "class", "text-muted");
                    builder.AddContent(5, "-");
                    builder.CloseElement();
                }
                else
                {
                    builder.OpenElement(3, "input");
                    builder.AddAttribute(4, "type", "number");
                    builder.AddAttribute(5, "class", "form-control form-control-sm");
                    builder.AddAttribute(6, "value", item.MoveAfterWeld);
                    builder.AddAttribute(7, "onchange", EventCallback.Factory.CreateBinder(this, value => item.MoveAfterWeld = value, item.MoveAfterWeld));
                    builder.AddAttribute(8, "onfocusout", EventCallback.Factory.Create(this, () => AutoSaveProcessingRow(item)));
                    builder.AddAttribute(9, "min", "0");
                    builder.CloseElement();
                }
                break;
            
            case "LoadingTime":
                if (item.PackBundleId != null && !item.IsParentInPackBundle)
                {
                    builder.OpenElement(3, "span");
                    builder.AddAttribute(4, "class", "text-muted");
                    builder.AddContent(5, "-");
                    builder.CloseElement();
                }
                else
                {
                    builder.OpenElement(3, "input");
                    builder.AddAttribute(4, "type", "number");
                    builder.AddAttribute(5, "class", "form-control form-control-sm");
                    builder.AddAttribute(6, "value", item.LoadingTimePerBundle);
                    builder.AddAttribute(7, "onchange", EventCallback.Factory.CreateBinder(this, value => item.LoadingTimePerBundle = value, item.LoadingTimePerBundle));
                    builder.AddAttribute(8, "onfocusout", EventCallback.Factory.Create(this, () => AutoSaveProcessingRow(item)));
                    builder.AddAttribute(9, "min", "0");
                    builder.CloseElement();
                }
                break;
        }
        
        builder.CloseElement(); // td
    };
    
    // Helper method to render delivery bundle cell
    private void RenderDeliveryBundleCell(RenderTreeBuilder builder, ProcessingItem item)
    {
        if (item.DeliveryBundle != null && item.DeliveryBundleId.HasValue)
        {
            builder.OpenElement(3, "div");
            builder.AddAttribute(4, "class", "bundle-name-edit");
            
            if (item.IsParentInBundle)
            {
                builder.OpenElement(5, "button");
                builder.AddAttribute(6, "class", "btn btn-link btn-sm p-0 me-1");
                builder.AddAttribute(7, "onclick", EventCallback.Factory.Create(this, () => ToggleBundleCollapse(item.DeliveryBundleId.Value)));
                builder.OpenElement(8, "i");
                builder.AddAttribute(9, "class", $"fas {(collapsedBundles.Contains(item.DeliveryBundleId.Value) ? "fa-plus-square" : "fa-minus-square")} text-primary");
                builder.CloseElement(); // i
                builder.CloseElement(); // button
            }
            
            builder.OpenElement(10, "span");
            builder.AddAttribute(11, "class", "bundle-badge");
            builder.AddContent(12, item.DeliveryBundle.BundleNumber);
            builder.CloseElement(); // span
            
            builder.OpenElement(13, "small");
            builder.AddContent(14, item.DeliveryBundle.BundleName);
            builder.CloseElement(); // small
            
            if (item.IsParentInBundle && collapsedBundles.Contains(item.DeliveryBundleId.Value))
            {
                builder.OpenElement(15, "small");
                builder.AddAttribute(16, "class", "text-muted ms-1");
                builder.AddContent(17, $"({GetBundleChildCount(item.DeliveryBundleId.Value)} hidden)");
                builder.CloseElement(); // small
            }
            
            if (item.IsParentInBundle)
            {
                builder.OpenElement(18, "button");
                builder.AddAttribute(19, "class", "btn btn-link btn-sm p-0 ms-2 text-danger");
                builder.AddAttribute(20, "onclick", EventCallback.Factory.Create(this, () => UnbundleItems(item.DeliveryBundleId.Value)));
                builder.AddAttribute(21, "title", "Unbundle");
                builder.OpenElement(22, "i");
                builder.AddAttribute(23, "class", "fas fa-unlink");
                builder.CloseElement(); // i
                builder.CloseElement(); // button
            }
            
            builder.CloseElement(); // div
        }
        else if (deliveryBundles.Any())
        {
            builder.OpenElement(3, "select");
            builder.AddAttribute(4, "class", "form-select form-select-sm bundle-select");
            builder.AddAttribute(5, "style", "width: 220px;");
            builder.AddAttribute(6, "onchange", EventCallback.Factory.Create<ChangeEventArgs>(this, (e) => AddItemToBundle(item, e)));
            
            builder.OpenElement(7, "option");
            builder.AddAttribute(8, "value", "");
            builder.AddContent(9, "-- Add to Bundle --");
            builder.CloseElement(); // option
            
            int seq = 10;
            foreach (var bundle in deliveryBundles.OrderBy(b => b.BundleNumber))
            {
                var bundleWeight = GetBundleWeight(bundle.Id);
                builder.OpenElement(seq++, "option");
                builder.AddAttribute(seq++, "value", bundle.Id.ToString());
                builder.AddContent(seq++, $"{bundle.BundleNumber} - {bundle.BundleName} ({bundleWeight.ToString("N0")} kg)");
                builder.CloseElement(); // option
            }
            
            builder.CloseElement(); // select
        }
    }
    
    // Helper method to render pack bundle cell
    private void RenderPackBundleCell(RenderTreeBuilder builder, ProcessingItem item)
    {
        if (item.PackBundle != null && item.PackBundleId.HasValue)
        {
            builder.OpenElement(3, "div");
            builder.AddAttribute(4, "class", "bundle-name-edit");
            
            if (item.IsParentInPackBundle)
            {
                builder.OpenElement(5, "button");
                builder.AddAttribute(6, "class", "btn btn-link btn-sm p-0 me-1");
                builder.AddAttribute(7, "onclick", EventCallback.Factory.Create(this, () => TogglePackBundleCollapse(item.PackBundleId.Value)));
                builder.OpenElement(8, "i");
                builder.AddAttribute(9, "class", $"fas {(collapsedPackBundles.Contains(item.PackBundleId.Value) ? "fa-plus-square" : "fa-minus-square")} text-info");
                builder.CloseElement(); // i
                builder.CloseElement(); // button
            }
            
            builder.OpenElement(10, "span");
            builder.AddAttribute(11, "class", "bundle-badge bg-info");
            builder.AddContent(12, item.PackBundle.BundleNumber);
            builder.CloseElement(); // span
            
            builder.OpenElement(13, "small");
            builder.AddContent(14, item.PackBundle.BundleName);
            builder.CloseElement(); // small
            
            if (item.IsParentInPackBundle && collapsedPackBundles.Contains(item.PackBundleId.Value))
            {
                builder.OpenElement(15, "small");
                builder.AddAttribute(16, "class", "text-muted ms-1");
                builder.AddContent(17, $"({GetPackBundleChildCount(item.PackBundleId.Value)} hidden)");
                builder.CloseElement(); // small
            }
            
            if (item.IsParentInPackBundle)
            {
                builder.OpenElement(18, "button");
                builder.AddAttribute(19, "class", "btn btn-link btn-sm p-0 ms-1");
                builder.AddAttribute(20, "onclick", EventCallback.Factory.Create(this, () => EditPackBundleName(item.PackBundleId.Value)));
                builder.AddAttribute(21, "title", "Edit bundle name");
                builder.OpenElement(22, "i");
                builder.AddAttribute(23, "class", "fas fa-pencil-alt");
                builder.CloseElement(); // i
                builder.CloseElement(); // button
                
                builder.OpenElement(24, "button");
                builder.AddAttribute(25, "class", "btn btn-link btn-sm p-0 ms-1 text-danger");
                builder.AddAttribute(26, "onclick", EventCallback.Factory.Create(this, () => ConfirmUnpackBundle(item.PackBundleId.Value)));
                builder.AddAttribute(27, "title", "Unpack bundle");
                builder.OpenElement(28, "i");
                builder.AddAttribute(29, "class", "fas fa-unlink");
                builder.CloseElement(); // i
                builder.CloseElement(); // button
            }
            
            builder.CloseElement(); // div
        }
        else if (packBundles.Any())
        {
            builder.OpenElement(3, "select");
            builder.AddAttribute(4, "class", "form-select form-select-sm bundle-select bg-info bg-opacity-10");
            builder.AddAttribute(5, "onchange", EventCallback.Factory.Create<ChangeEventArgs>(this, (e) => AssignToPackBundle(item, e)));
            
            builder.OpenElement(6, "option");
            builder.AddAttribute(7, "value", "");
            builder.AddContent(8, "Select pack bundle...");
            builder.CloseElement(); // option
            
            int seq = 9;
            foreach (var bundle in packBundles.OrderBy(b => b.BundleNumber))
            {
                var bundleWeight = processingItems.Where(p => p.PackBundleId == bundle.Id).Sum(p => p.TotalWeight);
                builder.OpenElement(seq++, "option");
                builder.AddAttribute(seq++, "value", bundle.Id.ToString());
                builder.AddContent(seq++, $"{bundle.BundleNumber} - {bundle.BundleName} ({bundleWeight.ToString("N0")} kg)");
                builder.CloseElement(); // option
            }
            
            builder.CloseElement(); // select
        }
    }
    
    private async Task LoadWorksheetItems()
    {
        if (activeWorksheet == null) return;
        
        Console.WriteLine($"[LoadWorksheetItems] Loading items for worksheet type: {activeWorksheet.WorksheetType}");
        using var dbContext = await DbContextFactory.CreateDbContextAsync();
        
        if (activeWorksheet.WorksheetType == WorksheetTypes.Processing)
        {
            processingItems = await dbContext.ProcessingItems
                .Include(p => p.DeliveryBundle)
                .Include(p => p.PackBundle)
                .Where(p => p.PackageWorksheetId == activeWorksheet.Id)
                .OrderBy(p => p.Id)  // Order by ID to maintain consistent row order
                .ToListAsync();
                
            // Load delivery bundles for this package
            await LoadDeliveryBundles();
            
            // Load pack bundles for this package
            await LoadPackBundles();
                
            // If worksheet is empty, create 25 blank rows
            if (processingItems.Count == 0)
            {
                await CreateBlankProcessingItems(25);
            }
            
            // Update cached counts
            UpdateCachedCounts();
            Console.WriteLine($"[LoadWorksheetItems] Items loaded, updating UI...");
            
            // Update UI after data load
            StateHasChanged();
            
            // Refresh bundle drag for processing worksheets
            if (_dotNetHelper != null && activeWorksheet.WorksheetType == WorksheetTypes.Processing)
            {
                try
                {
                    await Task.Delay(100);
                    await JSRuntime.InvokeVoidAsync("safeCall", "bundleDrag.refresh");
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"[LoadWorksheetItems] Failed to refresh bundle drag: {ex.Message}");
                }
            }
        }
        else if (activeWorksheet.WorksheetType == WorksheetTypes.Welding)
        {
            weldingItems = await dbContext.WeldingItems
                .Include(w => w.Images)
                .Include(w => w.WeldingConnection)
                .Include(w => w.ItemConnections)
                    .ThenInclude(ic => ic.WeldingConnection)
                .Where(w => w.PackageWorksheetId == activeWorksheet.Id)
                .OrderBy(w => w.DrawingNumber)
                .ThenBy(w => w.ItemDescription)
                .ToListAsync();
                
            // Load welding connections
            await LoadWeldingConnections();
                
            // If worksheet is empty, create 25 blank rows
            if (weldingItems.Count == 0)
            {
                await CreateBlankWeldingItems(25);
            }
        }
    }
    
    private async Task SetActiveWorksheet(int worksheetId)
    {
        activeWorksheetId = worksheetId;
        activeWorksheet = worksheets.FirstOrDefault(w => w.Id == worksheetId);
        await LoadWorksheetItems();
        await UpdateUndoRedoState();
        
        // Reinitialize table scrolling after switching worksheets
        StateHasChanged();
        await Task.Delay(100);
        try
        {
            await JSRuntime.InvokeVoidAsync("safeCall", "initializeWorksheetTables");
            
            // Refresh bundle drag for processing worksheets
            if (_dotNetHelper != null && _isDataLoaded && activeWorksheet?.WorksheetType == WorksheetTypes.Processing)
            {
                await JSRuntime.InvokeVoidAsync("bundleDrag.refresh");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[SetActiveWorksheet] JavaScript call failed: {ex.Message}");
        }
    }
    
    private async Task SwitchWorksheet(int worksheetId)
    {
        await SetActiveWorksheet(worksheetId);
    }
    
    private string GetWorksheetIcon(string worksheetType)
    {
        return worksheetType switch
        {
            WorksheetTypes.Processing => "fas fa-cogs",
            WorksheetTypes.Welding => "fas fa-fire",
            WorksheetTypes.Fabrication => "fas fa-hammer",
            _ => "fas fa-file-alt"
        };
    }
    
    private string GetStatusColor(string status)
    {
        return status switch
        {
            "Active" => "success",
            "Completed" => "primary",
            "On Hold" => "warning",
            "Draft" => "secondary",
            _ => "secondary"
        };
    }
    
    private async Task CreateBlankProcessingItems(int count = 50)
    {
        if (activeWorksheet == null) return;
        
        try
        {
            var blankItems = new List<ProcessingItem>();
            for (int i = 1; i <= count; i++)
            {
                blankItems.Add(new ProcessingItem
                {
                    ProjectId = EstimationId,
                    PackageWorksheetId = activeWorksheet.Id,
                    DrawingNumber = null,
                    Description = null,
                    MaterialId = null,
                    Quantity = 0,
                    Weight = 0,
                    Length = 0,
                    DeliveryBundleQty = 1,
                    PackBundleQty = 1,
                    UnloadTimePerBundle = 15,
                    MarkMeasureCut = 30,
                    QualityCheckClean = 15,
                    MoveToAssembly = 20,
                    MoveAfterWeld = 20,
                    LoadingTimePerBundle = 15
                });
            }
            
            using var dbContext = await DbContextFactory.CreateDbContextAsync();
            dbContext.ProcessingItems.AddRange(blankItems);
            await dbContext.SaveChangesAsync();
            await LoadWorksheetItems();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error creating blank items: {ex.Message}");
        }
    }
    
    private async Task AddProcessingRows(int count)
    {
        if (activeWorksheet == null || activeWorksheet.WorksheetType != WorksheetTypes.Processing) return;
        
        try
        {
            var blankItems = new List<ProcessingItem>();
            for (int i = 1; i <= count; i++)
            {
                blankItems.Add(new ProcessingItem
                {
                    ProjectId = EstimationId,
                    PackageWorksheetId = activeWorksheet.Id,
                    DrawingNumber = null,
                    Description = null,
                    MaterialId = null,
                    Quantity = 0,
                    Weight = 0,
                    Length = 0,
                    DeliveryBundleQty = 1,
                    PackBundleQty = 1,
                    UnloadTimePerBundle = 15,
                    MarkMeasureCut = 30,
                    QualityCheckClean = 15,
                    MoveToAssembly = 20,
                    MoveAfterWeld = 20,
                    LoadingTimePerBundle = 15
                });
            }
            
            using var dbContext = await DbContextFactory.CreateDbContextAsync();
            dbContext.ProcessingItems.AddRange(blankItems);
            await dbContext.SaveChangesAsync();
            
            // Reload items
            await LoadWorksheetItems();
            
            // Show success message
            _alertMessage = $"Added {count} new row{(count > 1 ? "s" : "")} to the processing worksheet.";
            _alertType = "success";
            _showAlert = true;
            
            // Scroll to bottom after a short delay to ensure the DOM is updated
            await Task.Delay(100);
            await JSRuntime.InvokeVoidAsync("scrollToBottom", "worksheet-content");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding processing rows: {ex.Message}");
            _alertMessage = "Error adding rows. Please try again.";
            _alertType = "danger";
            _showAlert = true;
        }
    }
    
    
    private async Task CreateBlankWeldingItems(int count = 50)
    {
        if (activeWorksheet == null) return;
        
        try
        {
            var blankItems = new List<WeldingItem>();
            for (int i = 1; i <= count; i++)
            {
                blankItems.Add(new WeldingItem
                {
                    ProjectId = EstimationId,
                    PackageWorksheetId = activeWorksheet.Id,
                    DrawingNumber = null,
                    ItemDescription = null,
                    WeldType = null,
                    WeldLength = 0,
                    ConnectionQty = 0,
                    AssembleFitTack = 5,
                    Weld = 3,
                    WeldCheck = 2,
                    WeldTest = 0
                });
            }
            
            using var dbContext = await DbContextFactory.CreateDbContextAsync();
            dbContext.WeldingItems.AddRange(blankItems);
            await dbContext.SaveChangesAsync();
            await LoadWorksheetItems();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error creating blank welding items: {ex.Message}");
        }
    }
    
    private async Task AddWeldingRows(int count)
    {
        if (activeWorksheet == null || activeWorksheet.WorksheetType != WorksheetTypes.Welding) return;
        
        try
        {
            var blankItems = new List<WeldingItem>();
            for (int i = 1; i <= count; i++)
            {
                blankItems.Add(new WeldingItem
                {
                    ProjectId = EstimationId,
                    PackageWorksheetId = activeWorksheet.Id,
                    DrawingNumber = null,
                    ItemDescription = null,
                    WeldType = null,
                    WeldLength = 0,
                    ConnectionQty = 0,
                    AssembleFitTack = 5,
                    Weld = 3,
                    WeldCheck = 2,
                    WeldTest = 0
                });
            }
            
            using var dbContext = await DbContextFactory.CreateDbContextAsync();
            dbContext.WeldingItems.AddRange(blankItems);
            await dbContext.SaveChangesAsync();
            
            // Reload items
            await LoadWorksheetItems();
            
            // Show success message
            _alertMessage = $"Added {count} new row{(count > 1 ? "s" : "")} to the welding worksheet.";
            _alertType = "success";
            _showAlert = true;
            
            // Scroll to bottom after a short delay to ensure the DOM is updated
            await Task.Delay(100);
            await JSRuntime.InvokeVoidAsync("scrollToBottom", "worksheet-content");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding welding rows: {ex.Message}");
            _alertMessage = "Error adding rows. Please try again.";
            _alertType = "danger";
            _showAlert = true;
        }
    }
    
    private async Task AutoSaveProcessingRow(ProcessingItem item)
    {
        try
        {
            using var dbContext = await DbContextFactory.CreateDbContextAsync();
            var existingItem = await dbContext.ProcessingItems.AsNoTracking().FirstOrDefaultAsync(p => p.Id == item.Id);
            if (existingItem != null)
            {
                // Calculate old total hours before changes
                var oldHours = CalculateTotalHours(existingItem);
                
                // Track individual field changes
                var changes = new List<(string fieldName, object? oldValue, object? newValue)>();
                
                // Check time field changes
                if (existingItem.UnloadTimePerBundle != item.UnloadTimePerBundle)
                    changes.Add(("Unload Time", existingItem.UnloadTimePerBundle, item.UnloadTimePerBundle));
                    
                if (existingItem.MarkMeasureCut != item.MarkMeasureCut)
                    changes.Add(("Mark/Measure/Cut", existingItem.MarkMeasureCut, item.MarkMeasureCut));
                    
                if (existingItem.QualityCheckClean != item.QualityCheckClean)
                    changes.Add(("Quality Check", existingItem.QualityCheckClean, item.QualityCheckClean));
                    
                if (existingItem.MoveToAssembly != item.MoveToAssembly)
                    changes.Add(("Move to Assembly", existingItem.MoveToAssembly, item.MoveToAssembly));
                    
                if (existingItem.MoveAfterWeld != item.MoveAfterWeld)
                    changes.Add(("Move After Weld", existingItem.MoveAfterWeld, item.MoveAfterWeld));
                    
                if (existingItem.LoadingTimePerBundle != item.LoadingTimePerBundle)
                    changes.Add(("Loading Time", existingItem.LoadingTimePerBundle, item.LoadingTimePerBundle));
                
                // Update the database
                var dbItem = await dbContext.ProcessingItems.FindAsync(item.Id);
                if (dbItem != null)
                {
                    dbItem.DrawingNumber = item.DrawingNumber;
                    dbItem.Description = item.Description;
                    dbItem.MaterialId = item.MaterialId;
                    dbItem.Quantity = item.Quantity;
                    dbItem.Length = item.Length;
                    dbItem.Weight = item.Weight;
                    dbItem.DeliveryBundleQty = item.DeliveryBundleQty;
                    dbItem.UnloadTimePerBundle = item.UnloadTimePerBundle;
                    dbItem.MarkMeasureCut = item.MarkMeasureCut;
                    dbItem.QualityCheckClean = item.QualityCheckClean;
                    dbItem.MoveToAssembly = item.MoveToAssembly;
                    dbItem.MoveAfterWeld = item.MoveAfterWeld;
                    dbItem.LoadingTimePerBundle = item.LoadingTimePerBundle;
                    dbItem.LastModified = DateTime.UtcNow;
                    
                    await dbContext.SaveChangesAsync();
                    
                    // Record change for undo/redo
                    if (currentUserId.HasValue && activeWorksheet != null)
                    {
                        var oldValues = new Dictionary<string, object?>
                        {
                            { "DrawingNumber", existingItem.DrawingNumber },
                            { "Description", existingItem.Description },
                            { "MaterialId", existingItem.MaterialId },
                            { "Quantity", existingItem.Quantity },
                            { "Length", existingItem.Length },
                            { "Weight", existingItem.Weight },
                            { "UnloadTimePerBundle", existingItem.UnloadTimePerBundle },
                            { "MarkMeasureCut", existingItem.MarkMeasureCut },
                            { "QualityCheckClean", existingItem.QualityCheckClean },
                            { "MoveToAssembly", existingItem.MoveToAssembly },
                            { "MoveAfterWeld", existingItem.MoveAfterWeld },
                            { "LoadingTimePerBundle", existingItem.LoadingTimePerBundle }
                        };
                        
                        var newValues = new Dictionary<string, object?>
                        {
                            { "DrawingNumber", item.DrawingNumber },
                            { "Description", item.Description },
                            { "MaterialId", item.MaterialId },
                            { "Quantity", item.Quantity },
                            { "Length", item.Length },
                            { "Weight", item.Weight },
                            { "UnloadTimePerBundle", item.UnloadTimePerBundle },
                            { "MarkMeasureCut", item.MarkMeasureCut },
                            { "QualityCheckClean", item.QualityCheckClean },
                            { "MoveToAssembly", item.MoveToAssembly },
                            { "MoveAfterWeld", item.MoveAfterWeld },
                            { "LoadingTimePerBundle", item.LoadingTimePerBundle }
                        };
                        
                        var change = new WorksheetChange
                        {
                            PackageWorksheetId = activeWorksheet.Id,
                            UserId = currentUserId.Value,
                            ChangeType = "Update",
                            EntityType = "ProcessingItem",
                            EntityId = item.Id,
                            OldValues = JsonConvert.SerializeObject(oldValues),
                            NewValues = JsonConvert.SerializeObject(newValues),
                            Timestamp = DateTime.UtcNow
                        };
                        
                        await WorksheetChangeService.RecordChangeAsync(change);
                        await UpdateUndoRedoState();
                    }
                    
                    // Show notifications for time field changes
                    if (changes.Any())
                    {
                        var newHours = CalculateTotalHours(item);
                        var itemDesc = !string.IsNullOrEmpty(item.DrawingNumber) 
                            ? $"Drawing #{item.DrawingNumber}" 
                            : !string.IsNullOrEmpty(item.Description) 
                                ? item.Description 
                                : $"Row {processingItems.IndexOf(item) + 1}";
                        
                        foreach (var (fieldName, oldValue, newValue) in changes)
                        {
                            var notification = new FieldChangeNotification
                            {
                                ItemDescription = itemDesc,
                                FieldName = fieldName,
                                OldValue = $"{oldValue ?? 0} min",
                                NewValue = $"{newValue ?? 0} min",
                                OldHours = oldHours,
                                NewHours = newHours
                            };
                            
                            _fieldChangeNotifications.Add(notification);
                            
                            // Auto-remove notification after 5 seconds
                            _ = Task.Run(async () =>
                            {
                                await Task.Delay(5000);
                                await InvokeAsync(() => RemoveNotification(notification));
                            });
                        }
                    }
                    
                    StateHasChanged();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error auto-saving processing row: {ex.Message}");
        }
    }
    
    private async Task AutoSaveWeldingRow(WeldingItem item)
    {
        try
        {
            using var dbContext = await DbContextFactory.CreateDbContextAsync();
            var existingItem = await dbContext.WeldingItems.FindAsync(item.Id);
            if (existingItem != null)
            {
                // Track changes for undo/redo if worksheet and user are available
                if (activeWorksheet != null && currentUserId.HasValue)
                {
                    var oldValues = new Dictionary<string, object?>
                    {
                        ["DrawingNumber"] = existingItem.DrawingNumber,
                        ["ItemDescription"] = existingItem.ItemDescription,
                        ["WeldType"] = existingItem.WeldType,
                        ["WeldLength"] = existingItem.WeldLength,
                        ["ConnectionQty"] = existingItem.ConnectionQty,
                        ["LocationComments"] = existingItem.LocationComments,
                        ["PhotoReference"] = existingItem.PhotoReference,
                        ["AssembleFitTack"] = existingItem.AssembleFitTack,
                        ["Weld"] = existingItem.Weld,
                        ["WeldCheck"] = existingItem.WeldCheck,
                        ["WeldTest"] = existingItem.WeldTest,
                        ["WeldingConnectionId"] = existingItem.WeldingConnectionId
                    };

                    var newValues = new Dictionary<string, object?>
                    {
                        ["DrawingNumber"] = item.DrawingNumber,
                        ["ItemDescription"] = item.ItemDescription,
                        ["WeldType"] = item.WeldType,
                        ["WeldLength"] = item.WeldLength,
                        ["ConnectionQty"] = item.ConnectionQty,
                        ["LocationComments"] = item.LocationComments,
                        ["PhotoReference"] = item.PhotoReference,
                        ["AssembleFitTack"] = item.AssembleFitTack,
                        ["Weld"] = item.Weld,
                        ["WeldCheck"] = item.WeldCheck,
                        ["WeldTest"] = item.WeldTest,
                        ["WeldingConnectionId"] = item.WeldingConnectionId
                    };

                    var change = new WorksheetChange
                    {
                        PackageWorksheetId = activeWorksheet.Id,
                        UserId = currentUserId.Value,
                        ChangeType = "Update",
                        EntityType = "WeldingItem",
                        EntityId = item.Id,
                        OldValues = System.Text.Json.JsonSerializer.Serialize(oldValues),
                        NewValues = System.Text.Json.JsonSerializer.Serialize(newValues),
                        Description = $"Updated welding item: {item.DrawingNumber ?? item.ItemDescription}"
                    };
                    
                    await WorksheetChangeService.RecordChangeAsync(change);
                }

                existingItem.DrawingNumber = item.DrawingNumber;
                existingItem.ItemDescription = item.ItemDescription;
                existingItem.WeldType = item.WeldType;
                existingItem.WeldLength = item.WeldLength;
                existingItem.ConnectionQty = item.ConnectionQty;
                existingItem.LocationComments = item.LocationComments;
                existingItem.PhotoReference = item.PhotoReference;
                existingItem.AssembleFitTack = item.AssembleFitTack;
                existingItem.Weld = item.Weld;
                existingItem.WeldCheck = item.WeldCheck;
                existingItem.WeldTest = item.WeldTest;
                existingItem.WeldingConnectionId = item.WeldingConnectionId;
                existingItem.LastModified = DateTime.UtcNow;
                
                await dbContext.SaveChangesAsync();
                
                // Update undo/redo state
                await UpdateUndoRedoState();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error auto-saving welding row: {ex.Message}");
        }
    }
    
    private async Task DeleteProcessingItem(ProcessingItem item)
    {
        try
        {
            // Track deletion for undo/redo
            if (activeWorksheet != null && currentUserId.HasValue)
            {
                var oldValues = new Dictionary<string, object?>
                {
                    ["DrawingNumber"] = item.DrawingNumber,
                    ["Description"] = item.Description,
                    ["MaterialId"] = item.MaterialId,
                    ["Quantity"] = item.Quantity,
                    ["Weight"] = item.Weight,
                    ["Length"] = item.Length,
                    ["TotalWeight"] = item.TotalWeight,
                    ["DeliveryBundleQty"] = item.DeliveryBundleQty,
                    ["PackBundleQty"] = item.PackBundleQty,
                    ["BundleGroup"] = item.BundleGroup,
                    ["PackGroup"] = item.PackGroup,
                    ["UnloadTimePerBundle"] = item.UnloadTimePerBundle,
                    ["MarkMeasureCut"] = item.MarkMeasureCut,
                    ["QualityCheckClean"] = item.QualityCheckClean,
                    ["MoveToAssembly"] = item.MoveToAssembly,
                    ["MoveAfterWeld"] = item.MoveAfterWeld,
                    ["LoadingTimePerBundle"] = item.LoadingTimePerBundle,
                    ["DeliveryBundleId"] = item.DeliveryBundleId,
                    ["IsParentInBundle"] = item.IsParentInBundle
                };

                var change = new WorksheetChange
                {
                    PackageWorksheetId = activeWorksheet.Id,
                    UserId = currentUserId.Value,
                    ChangeType = "Delete",
                    EntityType = "ProcessingItem",
                    EntityId = item.Id,
                    OldValues = JsonConvert.SerializeObject(oldValues),
                    NewValues = null,
                    Timestamp = DateTime.UtcNow
                };
                
                await WorksheetChangeService.RecordChangeAsync(change);
            }

            using var dbContext = await DbContextFactory.CreateDbContextAsync();
            dbContext.ProcessingItems.Remove(item);
            await dbContext.SaveChangesAsync();
            processingItems.Remove(item);
            
            // Update undo/redo state
            await UpdateUndoRedoState();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting processing item: {ex.Message}");
            _alertMessage = "Error deleting item. Please try again.";
            _showAlert = true;
        }
    }
    
    private async Task DuplicateWeldingItem(WeldingItem item)
    {
        try
        {
            using var dbContext = await DbContextFactory.CreateDbContextAsync();
            
            // Create a copy of the welding item
            var newItem = new WeldingItem
            {
                ProjectId = item.ProjectId,
                PackageWorksheetId = item.PackageWorksheetId,
                DrawingNumber = item.DrawingNumber + " (Copy)",
                ItemDescription = item.ItemDescription,
                WeldType = item.WeldType,
                WeldLength = item.WeldLength,
                ConnectionQty = item.ConnectionQty,
                LocationComments = item.LocationComments,
                PhotoReference = item.PhotoReference,
                AssembleFitTack = item.AssembleFitTack,
                Weld = item.Weld,
                WeldCheck = item.WeldCheck,
                WeldTest = item.WeldTest,
                WeldingConnectionId = item.WeldingConnectionId,
                CreatedDate = DateTime.UtcNow,
                LastModified = DateTime.UtcNow
            };
            
            dbContext.WeldingItems.Add(newItem);
            await dbContext.SaveChangesAsync();
            
            // If the original item has ItemConnections, duplicate those too
            if (item.ItemConnections != null && item.ItemConnections.Any())
            {
                // Load the ItemConnections for the original item
                var originalConnections = await dbContext.WeldingItemConnections
                    .Where(wic => wic.WeldingItemId == item.Id)
                    .ToListAsync();
                
                foreach (var originalConnection in originalConnections)
                {
                    var newConnection = new WeldingItemConnection
                    {
                        WeldingItemId = newItem.Id,
                        WeldingConnectionId = originalConnection.WeldingConnectionId,
                        Quantity = originalConnection.Quantity,
                        AssembleFitTack = originalConnection.AssembleFitTack,
                        Weld = originalConnection.Weld,
                        WeldCheck = originalConnection.WeldCheck,
                        WeldTest = originalConnection.WeldTest
                    };
                    
                    dbContext.WeldingItemConnections.Add(newConnection);
                }
                
                await dbContext.SaveChangesAsync();
            }
            
            // Reload the new item with its connections
            newItem = await dbContext.WeldingItems
                .Include(w => w.ItemConnections)
                .ThenInclude(ic => ic.WeldingConnection)
                .Include(w => w.WeldingConnection)
                .FirstOrDefaultAsync(w => w.Id == newItem.Id);
            
            // Add the new item to the list
            if (newItem != null)
            {
                weldingItems.Add(newItem);
                
                // Track the duplication for undo/redo
                if (activeWorksheet != null && currentUserId.HasValue)
                {
                    var change = new WorksheetChange
                    {
                        PackageWorksheetId = activeWorksheet.Id,
                        UserId = currentUserId.Value,
                        ChangeType = "Create",
                        EntityType = "WeldingItem",
                        EntityId = newItem.Id,
                    OldValues = null,
                    NewValues = System.Text.Json.JsonSerializer.Serialize(new
                    {
                        newItem.DrawingNumber,
                        newItem.ItemDescription,
                        newItem.WeldType,
                        newItem.WeldLength,
                        newItem.ConnectionQty,
                        Source = $"Duplicated from ID {item.Id}"
                    }),
                    Description = $"Duplicated welding item: {newItem.DrawingNumber}"
                };
                
                await WorksheetChangeService.RecordChangeAsync(change);
                }
                
                // Update undo/redo state
                await UpdateUndoRedoState();
                StateHasChanged();
                
                _alertMessage = $"Successfully duplicated welding item: {newItem.DrawingNumber}";
                _alertType = "success";
                _showAlert = true;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error duplicating welding item: {ex.Message}");
            _alertMessage = "Error duplicating welding item. Please try again.";
            _alertType = "danger";
            _showAlert = true;
        }
    }

    private async Task DeleteWeldingItem(WeldingItem item)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete '{item.ItemDescription}'?");
        if (confirmed)
        {
            try
            {
                // Track deletion for undo/redo
                if (activeWorksheet != null && currentUserId.HasValue)
                {
                    var oldValues = new Dictionary<string, object?>
                    {
                        ["DrawingNumber"] = item.DrawingNumber,
                        ["ItemDescription"] = item.ItemDescription,
                        ["WeldType"] = item.WeldType,
                        ["WeldLength"] = item.WeldLength,
                        ["ConnectionQty"] = item.ConnectionQty,
                        ["LocationComments"] = item.LocationComments,
                        ["PhotoReference"] = item.PhotoReference,
                        ["AssembleFitTack"] = item.AssembleFitTack,
                        ["Weld"] = item.Weld,
                        ["WeldCheck"] = item.WeldCheck,
                        ["WeldTest"] = item.WeldTest,
                        ["WeldingConnectionId"] = item.WeldingConnectionId
                    };

                    var change = new WorksheetChange
                    {
                        PackageWorksheetId = activeWorksheet.Id,
                        UserId = currentUserId.Value,
                        ChangeType = "Delete",
                        EntityType = "WeldingItem",
                        EntityId = item.Id,
                        OldValues = System.Text.Json.JsonSerializer.Serialize(oldValues),
                        NewValues = null,
                        Description = $"Deleted welding item: {item.DrawingNumber ?? item.ItemDescription}"
                    };
                    
                    await WorksheetChangeService.RecordChangeAsync(change);
                }

                using var dbContext = await DbContextFactory.CreateDbContextAsync();
                dbContext.WeldingItems.Remove(item);
                await dbContext.SaveChangesAsync();
                weldingItems.Remove(item);
                
                // Update undo/redo state
                await UpdateUndoRedoState();
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error deleting welding item: {ex.Message}");
            }
        }
    }
    
    private async Task LoadWeldingConnections()
    {
        using var dbContext = await DbContextFactory.CreateDbContextAsync();
        
        // First, check if there are any inactive connections that should be visible
        var allConnections = await dbContext.WeldingConnections
            .Where(w => w.PackageId == null || w.PackageId == PackageId)
            .ToListAsync();
            
        Console.WriteLine($"Total welding connections found: {allConnections.Count}");
        Console.WriteLine($"Active connections: {allConnections.Count(c => c.IsActive)}");
        Console.WriteLine($"Inactive connections: {allConnections.Count(c => !c.IsActive)}");
        
        // Load global connections and package-specific connections
        weldingConnections = await dbContext.WeldingConnections
            .Where(w => w.PackageId == null || w.PackageId == PackageId)
            .Where(w => w.IsActive)
            .OrderBy(w => w.DisplayOrder)
            .ToListAsync();
            
        // If no active connections found, show a warning and load all connections
        if (weldingConnections.Count == 0 && allConnections.Count > 0)
        {
            _alertMessage = $"Warning: Found {allConnections.Count} connection types but all are inactive. Showing all connections temporarily. Please check the Connection Types admin page to activate them.";
            _alertType = "warning";
            _showAlert = true;
            
            // Temporarily show all connections so work can continue
            weldingConnections = allConnections.OrderBy(w => w.DisplayOrder).ToList();
        }
        else if (weldingConnections.Count == 0)
        {
            _alertMessage = "No welding connection types found. Please add connection types in the Admin section.";
            _alertType = "info";
            _showAlert = true;
        }
    }
    
    private async Task OnWeldingConnectionChanged(WeldingItem item)
    {
        if (item.WeldingConnectionId.HasValue && item.WeldingConnectionId.Value > 0)
        {
            var connection = weldingConnections.FirstOrDefault(c => c.Id == item.WeldingConnectionId.Value);
            if (connection != null)
            {
                // Apply default values from connection
                item.AssembleFitTack = connection.DefaultAssembleFitTack;
                item.Weld = connection.DefaultWeld;
                item.WeldCheck = connection.DefaultWeldCheck;
                item.WeldTest = connection.DefaultWeldTest;
                
                // Auto-save the changes
                await AutoSaveWeldingRow(item);
            }
        }
    }
    
    private async Task AddWeldingConnection(WeldingItem item, WeldingItemConnection connection)
    {
        try
        {
            using var dbContext = await DbContextFactory.CreateDbContextAsync();
            
            // Set the foreign keys instead of navigation properties to avoid tracking issues
            connection.WeldingItemId = item.Id;
            // WeldingConnectionId should already be set by MultiConnectionEditor
            
            // Clear navigation properties to prevent EF from trying to insert them
            connection.WeldingItem = null!;
            connection.WeldingConnection = null!;
            
            // Add only the connection
            dbContext.WeldingItemConnections.Add(connection);
            await dbContext.SaveChangesAsync();
            
            // Reload the item with its connections from the database
            var reloadedItem = await dbContext.WeldingItems
                .Include(w => w.ItemConnections)
                    .ThenInclude(ic => ic.WeldingConnection)
                .FirstOrDefaultAsync(w => w.Id == item.Id);
            
            if (reloadedItem != null)
            {
                // Update the item's connections with the reloaded data
                item.ItemConnections = reloadedItem.ItemConnections;
            }
            
            // Update the UI
            StateHasChanged();
        }
        catch (Microsoft.EntityFrameworkCore.DbUpdateException dbEx) when (dbEx.InnerException?.Message.Contains("IX_WeldingItemConnections_Unique") == true)
        {
            Console.WriteLine($"Duplicate connection attempted: {dbEx.Message}");
            _alertMessage = "This connection type has already been added to this item. To change the quantity, please remove the existing connection first.";
            _alertType = "warning";
            _showAlert = true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding welding connection: {ex.Message}");
            _alertMessage = "Error adding connection. Please try again.";
            _alertType = "danger";
            _showAlert = true;
        }
    }
    
    private async Task RemoveWeldingConnection(WeldingItem item, WeldingItemConnection connection)
    {
        try
        {
            // Remove from database
            using var dbContext = await DbContextFactory.CreateDbContextAsync();
            dbContext.WeldingItemConnections.Remove(connection);
            await dbContext.SaveChangesAsync();
            
            // Remove from the item's collection
            item.ItemConnections?.Remove(connection);
            
            // Update the UI
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error removing welding connection: {ex.Message}");
            _alertMessage = "Error removing connection. Please try again.";
            _alertType = "danger";
            _showAlert = true;
        }
    }
    
    private async Task UpdateWeldingConnection(WeldingItem item, WeldingItemConnection connection)
    {
        try
        {
            using var dbContext = await DbContextFactory.CreateDbContextAsync();
            
            // Attach and update the connection
            dbContext.WeldingItemConnections.Update(connection);
            await dbContext.SaveChangesAsync();
            
            // Reload the item with its connections from the database
            var reloadedItem = await dbContext.WeldingItems
                .Include(w => w.ItemConnections)
                    .ThenInclude(ic => ic.WeldingConnection)
                .FirstOrDefaultAsync(w => w.Id == item.Id);
            
            if (reloadedItem != null)
            {
                // Update the item's connections with the reloaded data
                item.ItemConnections = reloadedItem.ItemConnections;
            }
            
            // Update the UI
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating welding connection: {ex.Message}");
            _alertMessage = "Error updating connection. Please try again.";
            _alertType = "danger";
            _showAlert = true;
        }
    }
    
    private void ShowImageUploadModal(WeldingItem item)
    {
        _selectedWeldingItem = item;
        _uploadErrors.Clear();
        _showImageUploadModal = true;
    }
    
    private void ShowImageModal(ImageUpload image)
    {
        _selectedImage = image;
        _showImageViewModal = true;
    }
    
    private bool _isProcessingUpload = false;
    private string? _lastProcessedFileName = null;
    private DateTime? _lastProcessedTime = null;
    
    private async Task HandleFileSelection(InputFileChangeEventArgs e)
    {
        // Prevent duplicate processing
        if (_isProcessingUpload)
        {
            Console.WriteLine("Already processing an upload, ignoring");
            return;
        }
        
        _uploadErrors.Clear();
        _isProcessingUpload = true;
        
        try
        {
            foreach (var file in e.GetMultipleFiles())
            {
                try
                {
                    // Check for duplicate clipboard paste within 1 second
                    if (_isClipboardPaste && 
                        _lastProcessedFileName == file.Name && 
                        _lastProcessedTime.HasValue && 
                        (DateTime.Now - _lastProcessedTime.Value).TotalSeconds < 1)
                    {
                        Console.WriteLine($"Ignoring duplicate clipboard paste: {file.Name}");
                        continue;
                    }
                    
                    // Log clipboard paste attempt
                    if (_isClipboardPaste)
                    {
                        Console.WriteLine($"Processing clipboard paste: {file.Name}");
                    }
                    
                    // Convert IBrowserFile to IFormFile with larger size limit for clipboard images
                    var maxSize = _isClipboardPaste ? 20L * 1024 * 1024 : 10L * 1024 * 1024; // 20MB for clipboard, 10MB for regular
                    
                    // Use the same approach for both clipboard and regular uploads
                    var formFile = await file.ToFormFileAsync(maxSize);
                    
                    if (formFile != null)
                    {
                        var upload = await ImageUploadService.UploadImageAsync(formFile, _selectedWeldingItem?.Id, null);
                        
                        // Add to welding item's images collection
                        if (_selectedWeldingItem != null)
                        {
                            _selectedWeldingItem.Images.Add(upload);
                            StateHasChanged();
                        }
                        
                        // Track processed file
                        _lastProcessedFileName = file.Name;
                        _lastProcessedTime = DateTime.Now;
                    }
                    else
                    {
                        _uploadErrors.Add($"{file.Name}: Failed to convert file");
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Upload error for {file.Name}: {ex}");
                    _uploadErrors.Add($"{file.Name}: {ex.Message}");
                }
            }
        }
        finally
        {
            // Reset flags
            _isProcessingUpload = false;
            _isClipboardPaste = false;
            _clipboardFileName = null;
        }
    }
    
    private async Task HandleDragOver(DragEventArgs e)
    {
        _isDragging = true;
        await Task.CompletedTask;
    }
    
    private async Task HandleDragLeave(DragEventArgs e)
    {
        _isDragging = false;
        await Task.CompletedTask;
    }
    
    private async Task HandleDrop(DragEventArgs e)
    {
        _isDragging = false;
        
        // Note: Blazor doesn't support DataTransfer.files yet
        // This would need JavaScript interop for full drag-drop support
        await JSRuntime.InvokeVoidAsync("alert", "Please use the file browser or paste from clipboard for now.");
    }
    
    private async Task TriggerFileInput()
    {
        if (fileInput != null)
        {
            await fileInput.Element!.Value.FocusAsync();
            await JSRuntime.InvokeVoidAsync("eval", "document.querySelector('input[type=file]').click()");
        }
    }
    
    private async Task DeleteImage(ImageUpload image)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this image?");
        if (confirmed)
        {
            try
            {
                await ImageUploadService.DeleteImageAsync(image.Id);
                
                if (_selectedWeldingItem != null)
                {
                    _selectedWeldingItem.Images.Remove(image);
                    StateHasChanged();
                }
            }
            catch (Exception ex)
            {
                _uploadErrors.Add($"Error deleting image: {ex.Message}");
            }
        }
    }
    
    private void ShowImportModal()
    {
        _importModal?.Show();
    }
    
    private async Task HandleExcelImport(List<ExcelImportDto> importedItems)
    {
        if (activeWorksheet == null || activeWorksheet.WorksheetType != WorksheetTypes.Processing)
            return;
            
        using var dbContext = await DbContextFactory.CreateDbContextAsync();
        Console.WriteLine($"HandleExcelImport received {importedItems.Count} items to import");
        
        // Get existing blank rows from the database (not from the cached collection)
        var blankRowIds = processingItems
            .Where(p => p.Quantity == 0 && string.IsNullOrWhiteSpace(p.Description))
            .OrderBy(p => p.Id)
            .Select(p => p.Id)
            .ToList();
        
        try
        {
            
            var itemsToCreate = new List<ProcessingItem>();
            var importIndex = 0;
            
            // First, update existing blank rows directly in the database
            foreach (var blankRowId in blankRowIds)
            {
                if (importIndex >= importedItems.Count)
                    break;
                    
                var importItem = importedItems[importIndex];
                
                // Load the item from the database in this context with tracking
                var blankRow = await dbContext.ProcessingItems
                    .AsTracking()
                    .FirstOrDefaultAsync(p => p.Id == blankRowId);
                    
                if (blankRow != null)
                {
                    // Update the existing blank row
                    blankRow.DrawingNumber = importItem.Remark; // Remark maps to Drawing Number
                    blankRow.Description = importItem.Description;
                    blankRow.MaterialId = importItem.MaterialId ?? "";
                    blankRow.Quantity = int.TryParse(importItem.Quantity, out var qty) ? qty : 0;
                    blankRow.Length = decimal.TryParse(importItem.Length, out var len) ? len : 0;
                    blankRow.Weight = decimal.TryParse(importItem.PartWeight, out var weight) ? weight : 0;
                    
                    // Keep existing handling values if they're not default, otherwise set defaults
                    if (blankRow.DeliveryBundleQty == 0) blankRow.DeliveryBundleQty = 1;
                    if (blankRow.PackBundleQty == 0) blankRow.PackBundleQty = 1;
                    if (blankRow.UnloadTimePerBundle == 0) blankRow.UnloadTimePerBundle = 15;
                    if (blankRow.MarkMeasureCut == 0) blankRow.MarkMeasureCut = 30;
                    if (blankRow.QualityCheckClean == 0) blankRow.QualityCheckClean = 15;
                    if (blankRow.MoveToAssembly == 0) blankRow.MoveToAssembly = 20;
                    if (blankRow.MoveAfterWeld == 0) blankRow.MoveAfterWeld = 20;
                    if (blankRow.LoadingTimePerBundle == 0) blankRow.LoadingTimePerBundle = 15;
                    
                    blankRow.LastModified = DateTime.UtcNow;
                    
                    // Mark as modified to ensure EF tracks the changes
                    dbContext.Entry(blankRow).State = Microsoft.EntityFrameworkCore.EntityState.Modified;
                }
                importIndex++;
            }
            
            // If we have more items to import than blank rows, create new rows
            while (importIndex < importedItems.Count)
            {
                var importItem = importedItems[importIndex];
                
                var newItem = new ProcessingItem
                {
                    ProjectId = EstimationId,
                    PackageWorksheetId = activeWorksheet.Id,
                    DrawingNumber = importItem.Remark, // Remark maps to Drawing Number
                    Description = importItem.Description,
                    MaterialId = importItem.MaterialId ?? "",
                    Quantity = int.TryParse(importItem.Quantity, out var qty) ? qty : 0,
                    Length = decimal.TryParse(importItem.Length, out var len) ? len : 0,
                    Weight = decimal.TryParse(importItem.PartWeight, out var weight) ? weight : 0,
                    // Set default handling values
                    DeliveryBundleQty = 1,
                    PackBundleQty = 1,
                    UnloadTimePerBundle = 15,
                    MarkMeasureCut = 30,
                    QualityCheckClean = 15,
                    MoveToAssembly = 20,
                    MoveAfterWeld = 20,
                    LoadingTimePerBundle = 15,
                    CreatedDate = DateTime.UtcNow,
                    LastModified = DateTime.UtcNow
                };
                
                itemsToCreate.Add(newItem);
                importIndex++;
            }
            
            // Add new items if any
            if (itemsToCreate.Count > 0)
            {
                await dbContext.ProcessingItems.AddRangeAsync(itemsToCreate);
            }
            
            // Save all changes
            if (blankRowIds.Count > 0 || itemsToCreate.Count > 0)
            {
                await dbContext.SaveChangesAsync();
                
                // Record changes for undo/redo
                if (activeWorksheet != null && currentUserId.HasValue)
                {
                    // Note: Undo/redo tracking for import operations is disabled
                    // due to the complexity of tracking bulk operations
                    
                    // Record additions for new items
                    foreach (var item in itemsToCreate)
                    {
                        var newValues = new Dictionary<string, object?>
                        {
                            ["DrawingNumber"] = item.DrawingNumber,
                            ["Description"] = item.Description,
                            ["MaterialId"] = item.MaterialId,
                            ["Quantity"] = item.Quantity,
                            ["Weight"] = item.Weight,
                            ["Length"] = item.Length,
                            ["DeliveryBundleQty"] = item.DeliveryBundleQty,
                            ["PackBundleQty"] = item.PackBundleQty,
                            ["UnloadTimePerBundle"] = item.UnloadTimePerBundle,
                            ["MarkMeasureCut"] = item.MarkMeasureCut,
                            ["QualityCheckClean"] = item.QualityCheckClean,
                            ["MoveToAssembly"] = item.MoveToAssembly,
                            ["MoveAfterWeld"] = item.MoveAfterWeld,
                            ["LoadingTimePerBundle"] = item.LoadingTimePerBundle
                        };
                        
                        var addChange = new WorksheetChange
                        {
                            PackageWorksheetId = activeWorksheet.Id,
                            UserId = currentUserId.Value,
                            ChangeType = "Add",
                            EntityType = "ProcessingItem",
                            EntityId = item.Id,
                            OldValues = null,
                            NewValues = JsonConvert.SerializeObject(newValues),
                            Timestamp = DateTime.UtcNow
                        };
                        await WorksheetChangeService.RecordChangeAsync(addChange);
                    }
                }
                
                await LoadWorksheetItems();
                
                // Update undo/redo state
                await UpdateUndoRedoState();
                
                // Force UI refresh to update dashboard metrics
                StateHasChanged();
                
                // Trigger table re-initialization for column resizing
                await JSRuntime.InvokeVoidAsync("safeCall", "initializeWorksheetTables");
                
                // Show success notification
                var updatedCount = Math.Min(blankRowIds.Count, importedItems.Count);
                var message = $"Successfully imported {importedItems.Count} items";
                if (updatedCount > 0)
                {
                    message += $" ({updatedCount} existing rows updated";
                    if (itemsToCreate.Count > 0)
                    {
                        message += $", {itemsToCreate.Count} new rows created";
                    }
                    message += ")";
                }
                else if (itemsToCreate.Count > 0)
                {
                    message += $" ({itemsToCreate.Count} new rows created)";
                }
                
                _alertMessage = message;
                _showAlert = true;
            }
        }
        catch (Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException ex)
        {
            Console.WriteLine($"Concurrency error during import: {ex.Message}");
            
            // Fallback approach: Use raw SQL to avoid concurrency checks
            try
            {
                var updatedCount = 0;
                var importIndex = 0;
                
                foreach (var blankRowId in blankRowIds)
                {
                    if (importIndex >= importedItems.Count)
                        break;
                        
                    var importItem = importedItems[importIndex];
                    
                    // Use raw SQL update to bypass concurrency check
                    await dbContext.Database.ExecuteSqlRawAsync(
                        @"UPDATE ProcessingItems 
                          SET DrawingNumber = {0}, 
                              Description = {1}, 
                              MaterialId = {2}, 
                              Quantity = {3}, 
                              Length = {4}, 
                              Weight = {5},
                              LastModified = {6}
                          WHERE Id = {7}",
                        importItem.Remark ?? "",
                        importItem.Description ?? "",
                        importItem.MaterialId ?? "",
                        int.TryParse(importItem.Quantity, out var qty) ? qty : 0,
                        decimal.TryParse(importItem.Length, out var len) ? len : 0,
                        decimal.TryParse(importItem.PartWeight, out var weight) ? weight : 0,
                        DateTime.UtcNow,
                        blankRowId
                    );
                    
                    updatedCount++;
                    importIndex++;
                }
                
                // Create new items for any remaining import items
                var newItemsCreated = 0;
                while (importIndex < importedItems.Count)
                {
                    var importItem = importedItems[importIndex];
                    
                    var newItem = new ProcessingItem
                    {
                        ProjectId = EstimationId,
                        PackageWorksheetId = activeWorksheet.Id,
                        DrawingNumber = importItem.Remark,
                        Description = importItem.Description,
                        MaterialId = importItem.MaterialId ?? "",
                        Quantity = int.TryParse(importItem.Quantity, out var qty) ? qty : 0,
                        Length = decimal.TryParse(importItem.Length, out var len) ? len : 0,
                        Weight = decimal.TryParse(importItem.PartWeight, out var weight) ? weight : 0,
                        DeliveryBundleQty = 1,
                        PackBundleQty = 1,
                        UnloadTimePerBundle = 15,
                        MarkMeasureCut = 30,
                        QualityCheckClean = 15,
                        MoveToAssembly = 20,
                        MoveAfterWeld = 20,
                        LoadingTimePerBundle = 15,
                        CreatedDate = DateTime.UtcNow,
                        LastModified = DateTime.UtcNow
                    };
                    
                    await dbContext.ProcessingItems.AddAsync(newItem);
                    newItemsCreated++;
                    importIndex++;
                }
                
                if (newItemsCreated > 0)
                {
                    await dbContext.SaveChangesAsync();
                }
                
                // Reload the worksheet items
                await LoadWorksheetItems();
                StateHasChanged();
                
                _alertMessage = "Import completed successfully!";
                _showAlert = true;
            }
            catch (Exception fallbackEx)
            {
                Console.WriteLine($"Fallback import also failed: {fallbackEx.Message}");
                _alertMessage = "Failed to import items. Please try again.";
                _showAlert = true;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error importing items: {ex.Message}");
            _alertMessage = $"Error importing items: {ex.Message}";
            _showAlert = true;
        }
    }
    
    // Calculation methods for dashboard
    private decimal CalculateTotalTonnage()
    {
        if (processingItems == null || processingItems.Count == 0)
            return 0;
            
        // Convert from kg to tonnes
        return processingItems.Where(p => p.Quantity > 0).Sum(p => p.TotalWeight) / 1000m;
    }
    
    private int CalculateTotalQuantity()
    {
        if (processingItems == null || processingItems.Count == 0)
            return 0;
            
        return processingItems.Sum(p => p.Quantity);
    }
    
    private int CalculateBeamCount()
    {
        if (processingItems == null || processingItems.Count == 0)
            return 0;
        
        try
        {
            var beamItems = processingItems
                .Where(p => p.Quantity > 0 && IsBeamMaterial(p.MaterialId))
                .ToList();
                
            var count = beamItems.Sum(p => p.Quantity);
            return count;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error calculating beam count: {ex.Message}");
            return 0;
        }
    }
    
    private int CalculatePlateCount()
    {
        if (processingItems == null || processingItems.Count == 0)
            return 0;
        
        // Console.WriteLine("=== Calculating Plate Count ===");
        var plateItems = processingItems
            .Where(p => p.Quantity > 0 && IsPlateMaterial(p.MaterialId))
            .ToList();
            
        var count = plateItems.Sum(p => p.Quantity);
        // Console.WriteLine($"Found {plateItems.Count} plate items with total quantity: {count}");
        
        return count;
    }
    
    private decimal CalculateTotalHours(ProcessingItem item)
    {
        if (item == null) return 0;
        
        decimal totalMinutes = 0;
        
        // Add all time fields
        totalMinutes += item.UnloadTimePerBundle;
        totalMinutes += item.MarkMeasureCut;
        totalMinutes += item.QualityCheckClean;
        totalMinutes += item.MoveToAssembly;
        totalMinutes += item.MoveAfterWeld;
        totalMinutes += item.LoadingTimePerBundle;
        
        // Convert to hours
        return totalMinutes / 60m;
    }
    
    private async Task RemoveNotification(FieldChangeNotification notification)
    {
        notification.IsRemoving = true;
        StateHasChanged();
        
        await Task.Delay(300); // Wait for animation
        _fieldChangeNotifications.Remove(notification);
        StateHasChanged();
    }
    
    private int CalculatePurlinCount()
    {
        if (processingItems == null || processingItems.Count == 0)
            return 0;
        
        // Console.WriteLine("=== Calculating Purlin Count ===");
        var purlinItems = processingItems
            .Where(p => p.Quantity > 0 && IsPurlinMaterial(p.MaterialId))
            .ToList();
            
        var count = purlinItems.Sum(p => p.Quantity);
        // Console.WriteLine($"Found {purlinItems.Count} purlin items with total quantity: {count}");
        
        return count;
    }
    
    private decimal CalculatePurlinMeters()
    {
        if (processingItems == null || processingItems.Count == 0)
            return 0;
        
        var purlinItems = processingItems
            .Where(p => p.Quantity > 0 && IsPurlinMaterial(p.MaterialId))
            .ToList();
            
        // Calculate total meters (length in mm converted to meters)
        var totalMeters = purlinItems.Sum(p => (p.Length / 1000m) * p.Quantity);
        // Console.WriteLine($"Total purlin meters: {totalMeters:N2}m");
        
        return totalMeters;
    }
    
    private int CalculateMiscCount()
    {
        if (processingItems == null || processingItems.Count == 0)
            return 0;
        
        // Console.WriteLine("=== Calculating Misc Count ===");
        var miscItems = processingItems
            .Where(p => p.Quantity > 0 && !string.IsNullOrEmpty(p.MaterialId) && 
                   !IsBeamMaterial(p.MaterialId) && !IsPurlinMaterial(p.MaterialId) && !IsPlateMaterial(p.MaterialId))
            .ToList();
            
        var count = miscItems.Sum(p => p.Quantity);
        // Console.WriteLine($"Found {miscItems.Count} misc items with total quantity: {count}");
        
        // Log some sample MaterialIds that are misc
        // foreach (var item in miscItems.Take(5))
        // {
        //     Console.WriteLine($"  Misc item: MaterialId='{item.MaterialId}', Qty={item.Quantity}");
        // }
        
        return count;
    }
    
    private Dictionary<string, MaterialType> GetQuickFilterTypes()
    {
        var materialTypes = Configuration.GetSection("MaterialMappings:MaterialTypes").Get<Dictionary<string, MaterialType>>() ?? new();
        return materialTypes
            .Where(mt => mt.Value.ShowInQuickFilter)
            .OrderBy(mt => mt.Value.DisplayOrder)
            .ToDictionary(kvp => kvp.Key, kvp => kvp.Value);
    }
    
    private int GetMaterialTypeCount(string typeName)
    {
        return typeName.ToLower() switch
        {
            "beam" => CalculateBeamCount(),
            "plate" => CalculatePlateCount(),
            "purlin" => CalculatePurlinCount(),
            "misc" => CalculateMiscCount(),
            _ => 0  // For any other types, return 0 to avoid service calls during rendering
        };
    }
    
    private string GetButtonColor(string color)
    {
        return color == "purple" ? "secondary" : color;
    }
    
    private string GetMaterialTypeIcon(string typeName)
    {
        return typeName.ToLower() switch
        {
            "beam" => "fa-bars",
            "plate" => "fa-square",
            "purlin" => "fa-grip-lines",
            "fastener" => "fa-link",
            "misc" => "fa-cog",
            _ => "fa-cube"
        };
    }
    
    private string GetQuickFilterTooltip(string typeName)
    {
        return typeName.ToLower() switch
        {
            "beam" => "Patterns: BEAM, UB, UC, PFC, RSJ, HE, IPE, UKB, UKC",
            "plate" => "Patterns: PLATE, FL, PL, FLT, PLT, SHS, RHS",
            "purlin" => "Patterns: PURLIN, C15-C30, Z15-Z30",
            "misc" => "Everything else or no pattern match",
            _ => ""
        };
    }
    
    private void ClearWorksheet()
    {
        if (activeWorksheet == null) return;
        
        var worksheetType = activeWorksheet.WorksheetType;
        var itemCount = worksheetType == WorksheetTypes.Processing ? processingItems.Count : weldingItems.Count;
        
        if (itemCount == 0)
        {
            _alertMessage = "The worksheet is already empty.";
            _showAlert = true;
            return;
        }
        
        _confirmMessage = $"Are you sure you want to clear all {itemCount} items from this worksheet? This action cannot be undone.";
        _showConfirmation = true;
        _pendingConfirmAction = async () =>
        {
            try
            {
                using var dbContext = await DbContextFactory.CreateDbContextAsync();
                
                if (worksheetType == WorksheetTypes.Processing)
                {
                    // Get IDs of items to delete
                    var itemIds = processingItems.Select(p => p.Id).ToList();
                    
                    // Load and delete items in the current context
                    var itemsToDelete = await dbContext.ProcessingItems
                        .Where(p => itemIds.Contains(p.Id))
                        .ToListAsync();
                    
                    dbContext.ProcessingItems.RemoveRange(itemsToDelete);
                }
                else if (worksheetType == WorksheetTypes.Welding)
                {
                    // Get IDs of items to delete
                    var itemIds = weldingItems.Select(w => w.Id).ToList();
                    
                    // Load and delete items in the current context
                    var itemsToDelete = await dbContext.WeldingItems
                        .Where(w => itemIds.Contains(w.Id))
                        .ToListAsync();
                    
                    dbContext.WeldingItems.RemoveRange(itemsToDelete);
                }
                
                await dbContext.SaveChangesAsync();
                await LoadWorksheetItems();
                
                _alertMessage = $"Successfully cleared {itemCount} items from the worksheet.";
                _showAlert = true;
            }
            catch (Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException ex)
            {
                Console.WriteLine($"Concurrency error clearing worksheet: {ex.Message}");
                
                // Fallback: Use raw SQL to delete items
                try
                {
                    using var dbContext = await DbContextFactory.CreateDbContextAsync();
                    
                    if (worksheetType == WorksheetTypes.Processing)
                    {
                        var itemIds = processingItems.Select(p => p.Id).ToList();
                        if (itemIds.Any())
                        {
                            var idsParam = string.Join(",", itemIds);
                            await dbContext.Database.ExecuteSqlRawAsync(
                                $"DELETE FROM ProcessingItems WHERE Id IN ({idsParam})");
                        }
                    }
                    else if (worksheetType == WorksheetTypes.Welding)
                    {
                        var itemIds = weldingItems.Select(w => w.Id).ToList();
                        if (itemIds.Any())
                        {
                            var idsParam = string.Join(",", itemIds);
                            await dbContext.Database.ExecuteSqlRawAsync(
                                $"DELETE FROM WeldingItems WHERE Id IN ({idsParam})");
                        }
                    }
                    
                    await LoadWorksheetItems();
                    _alertMessage = $"Successfully cleared {itemCount} items from the worksheet.";
                    _showAlert = true;
                }
                catch (Exception fallbackEx)
                {
                    Console.WriteLine($"Fallback clear also failed: {fallbackEx.Message}");
                    _alertMessage = "Failed to clear worksheet. Please refresh and try again.";
                    _showAlert = true;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error clearing worksheet: {ex.Message}");
                _alertMessage = $"Error clearing worksheet: {ex.Message}";
                _showAlert = true;
            }
        };
    }
    
    // Filtering methods
    private void SetFilter(string filter)
    {
        Console.WriteLine($"[SetFilter] Setting filter to: {filter} (was: {activeFilter})");
        activeFilter = filter;
        UpdateCachedCounts();
        StateHasChanged();
        Console.WriteLine($"[SetFilter] Filter set, visible items: {GetVisibleProcessingItems().Count}");
    }
    
    private void HandleColumnFilter(ColumnFilterDropdown.FilterConfig? config)
    {
        if (config == null || string.IsNullOrEmpty(config.ColumnKey))
        {
            // Clear filter for this column
            if (config != null)
                columnFilters.Remove(config.ColumnKey);
        }
        else
        {
            columnFilters[config.ColumnKey] = config;
        }
        UpdateCachedCounts();
        StateHasChanged();
    }
    
    private void HandleColumnSort(string columnKey, string direction)
    {
        if (string.IsNullOrEmpty(direction))
        {
            columnSorts.Remove(columnKey);
        }
        else
        {
            columnSorts[columnKey] = direction;
        }
        StateHasChanged();
    }
    
    private List<string> GetUniqueValues(string columnKey)
    {
        var values = new HashSet<string>();
        
        switch (columnKey)
        {
            case "DrawingNumber":
                foreach (var item in processingItems)
                {
                    if (!string.IsNullOrWhiteSpace(item.DrawingNumber))
                        values.Add(item.DrawingNumber);
                }
                break;
            case "Description":
                foreach (var item in processingItems)
                {
                    if (!string.IsNullOrWhiteSpace(item.Description))
                        values.Add(item.Description);
                }
                break;
            case "MaterialId":
                foreach (var item in processingItems)
                {
                    if (!string.IsNullOrWhiteSpace(item.MaterialId))
                        values.Add(item.MaterialId);
                }
                break;
        }
        
        return values.OrderBy(v => v).ToList();
    }
    
    private void ClearAllFilters()
    {
        activeFilter = "all";
        columnFilters.Clear();
        columnSorts.Clear();
        UpdateCachedCounts();
        StateHasChanged();
    }
    
    private List<ProcessingItem> GetFilteredProcessingItems()
    {
        var items = processingItems.AsEnumerable();
        
        // Apply type filter
        if (activeFilter != "all")
        {
            items = activeFilter switch
            {
                "beam" => items.Where(p => IsBeamMaterial(p.MaterialId)),
                "purlin" => items.Where(p => IsPurlinMaterial(p.MaterialId)),
                "plate" => items.Where(p => IsPlateMaterial(p.MaterialId)),
                "misc" => items.Where(p => !string.IsNullOrEmpty(p.MaterialId) && 
                    !IsBeamMaterial(p.MaterialId) && !IsPurlinMaterial(p.MaterialId) && !IsPlateMaterial(p.MaterialId)),
                _ => items
            };
        }
        
        // Apply column filters
        foreach (var filter in columnFilters)
        {
            var config = filter.Value;
            if (config.FilterType == "text")
            {
                // Apply text filter
                if (!string.IsNullOrEmpty(config.TextFilter))
                {
                    var filterText = config.TextFilter.ToLower();
                    items = filter.Key switch
                    {
                        "DrawingNumber" => items.Where(p => p.DrawingNumber?.ToLower().Contains(filterText) ?? false),
                        "Description" => items.Where(p => p.Description?.ToLower().Contains(filterText) ?? false),
                        "MaterialId" => items.Where(p => p.MaterialId?.ToLower().Contains(filterText) ?? false),
                        _ => items
                    };
                }
                // Apply selected values filter
                else if (config.SelectedValues.Any())
                {
                    items = filter.Key switch
                    {
                        "DrawingNumber" => items.Where(p => config.SelectedValues.Contains(p.DrawingNumber ?? "")),
                        "Description" => items.Where(p => config.SelectedValues.Contains(p.Description ?? "")),
                        "MaterialId" => items.Where(p => config.SelectedValues.Contains(p.MaterialId ?? "")),
                        _ => items
                    };
                }
            }
            else if (config.FilterType == "number")
            {
                // Apply number filters
                items = filter.Key switch
                {
                    "Quantity" => items.Where(p => 
                        (!config.MinValue.HasValue || p.Quantity >= config.MinValue.Value) &&
                        (!config.MaxValue.HasValue || p.Quantity <= config.MaxValue.Value)),
                    "Length" => items.Where(p => 
                        (!config.MinValue.HasValue || p.Length >= config.MinValue.Value) &&
                        (!config.MaxValue.HasValue || p.Length <= config.MaxValue.Value)),
                    "Weight" => items.Where(p => 
                        (!config.MinValue.HasValue || p.Weight >= config.MinValue.Value) &&
                        (!config.MaxValue.HasValue || p.Weight <= config.MaxValue.Value)),
                    _ => items
                };
            }
        }
        
        // Apply sorting
        if (columnSorts.Any())
        {
            // Get the first sort (single column sorting for now)
            var sort = columnSorts.First();
            var isAscending = sort.Value == "asc";
            
            items = sort.Key switch
            {
                "DrawingNumber" => isAscending 
                    ? items.OrderBy(p => p.DrawingNumber)
                    : items.OrderByDescending(p => p.DrawingNumber),
                "Description" => isAscending 
                    ? items.OrderBy(p => p.Description)
                    : items.OrderByDescending(p => p.Description),
                "MaterialId" => isAscending 
                    ? items.OrderBy(p => p.MaterialId)
                    : items.OrderByDescending(p => p.MaterialId),
                "Quantity" => isAscending 
                    ? items.OrderBy(p => p.Quantity)
                    : items.OrderByDescending(p => p.Quantity),
                "Length" => isAscending 
                    ? items.OrderBy(p => p.Length)
                    : items.OrderByDescending(p => p.Length),
                "Weight" => isAscending 
                    ? items.OrderBy(p => p.Weight)
                    : items.OrderByDescending(p => p.Weight),
                _ => items
            };
        }
        
        return items.ToList();
    }
    
    // Material type cache to avoid concurrent DB access
    private readonly Dictionary<string, string> _materialTypeCache = new();
    
    private Dictionary<string, string> GetAllPrefixMappings()
    {
        // Combine default mappings with custom mappings
        var defaultMappings = new Dictionary<string, string>
        {
            { "B", "Beam" },
            { "C", "Beam" },
            { "PL", "Plate" },
            { "P", "Purlin" },
            { "F", "Fastener" },
            { "M", "Misc" }
        };
        
        // Custom mappings override defaults
        foreach (var custom in _customPrefixMappings)
        {
            defaultMappings[custom.Key] = custom.Value;
        }
        
        return defaultMappings;
    }
    
    private string GetMaterialTypeBadgeColor(string? materialId)
    {
        if (string.IsNullOrWhiteSpace(materialId))
            return "secondary";
            
        var type = GetCurrentMaterialType(materialId);
        return GetMaterialTypeBadgeColorByName(type);
    }

    private string GetMaterialTypeBadgeColorByName(string materialType)
    {
        return materialType switch
        {
            "C Channel" => "primary",
            "Beam" => "success",
            "Angle" => "warning",
            "Purlin" => "info",
            "Girt" => "danger",
            "RHS" => "dark",
            "Plate" => "secondary",
            "Misc" => "secondary",
            _ => "secondary"
        };
    }
    
    private bool IsBeamMaterial(string? materialId)
    {
        if (string.IsNullOrEmpty(materialId))
            return false;
            
        if (!_materialTypeCache.TryGetValue(materialId, out var materialType))
        {
            var upper = materialId.ToUpper();
            
            // Check prefix mappings first (including custom mappings)
            var allPrefixMappings = GetAllPrefixMappings();
            var matchedPrefix = allPrefixMappings
                .Where(kvp => upper.StartsWith(kvp.Key))
                .OrderByDescending(kvp => kvp.Key.Length) // Longest match first
                .FirstOrDefault();
                
            if (!string.IsNullOrEmpty(matchedPrefix.Key))
            {
                materialType = matchedPrefix.Value;
            }
            // Then use pattern matching
            else if (upper.Contains("BEAM") || upper.Contains("UB") || upper.Contains("UC") || 
                upper.Contains("PFC") || upper.Contains("RSJ") || upper.Contains("HE") || 
                upper.Contains("IPE") || upper.Contains("UKB") || upper.Contains("UKC"))
            {
                materialType = "Beam";
            }
            else if (upper.Contains("PLATE") || upper.Contains("PLT") || upper.Contains("SHS") || 
                     upper.Contains("RHS") || upper.Contains("FL") || upper.Contains("FLT"))
            {
                materialType = "Plate";
            }
            else if (upper.Contains("PURLIN") || upper.Contains("PRLN") || 
                     (upper.Length > 2 && char.IsLetter(upper[0]) && char.IsDigit(upper[1])))
            {
                materialType = "Purlin";
            }
            else
            {
                materialType = "Misc";
            }
            
            _materialTypeCache[materialId] = materialType;
        }
        
        return materialType.Equals("Beam", StringComparison.OrdinalIgnoreCase);
    }
    
    private bool IsPurlinMaterial(string? materialId)
    {
        if (string.IsNullOrEmpty(materialId))
            return false;
            
        if (!_materialTypeCache.TryGetValue(materialId, out var materialType))
        {
            // Cache will be populated by IsBeamMaterial call
            IsBeamMaterial(materialId);
            _materialTypeCache.TryGetValue(materialId, out materialType);
        }
        
        return materialType?.Equals("Purlin", StringComparison.OrdinalIgnoreCase) ?? false;
    }
    
    private bool IsPlateMaterial(string? materialId)
    {
        if (string.IsNullOrEmpty(materialId))
            return false;
            
        if (!_materialTypeCache.TryGetValue(materialId, out var materialType))
        {
            // Cache will be populated by IsBeamMaterial call
            IsBeamMaterial(materialId);
            _materialTypeCache.TryGetValue(materialId, out materialType);
        }
        
        return materialType?.Equals("Plate", StringComparison.OrdinalIgnoreCase) ?? false;
    }
    
    // Modal handlers
    private Task HandleConfirmation()
    {
        _showConfirmation = false;
        if (_pendingConfirmAction != null)
        {
            var action = _pendingConfirmAction;
            _pendingConfirmAction = null;
            return action();
        }
        return Task.CompletedTask;
    }
    
    private void HandleCancelConfirmation()
    {
        _showConfirmation = false;
        _pendingConfirmAction = null;
    }
    
    private void HandleCloseAlert()
    {
        _showAlert = false;
        _alertMessage = "";
    }
    
    private void ShowMetricDetails(string metricType)
    {
        _selectedMetricType = metricType;
        _metricTitle = metricType switch
        {
            "tonnage" => "Total Tonnage Details",
            "total" => "Total Items Details",
            "beams" => "Beams & Columns Details",
            "purlins" => "Purlins Details",
            "plates" => "Plates & Parts Details",
            "misc" => "Miscellaneous Items Details",
            "handling" => "Handling Time Breakdown",
            "tonnerate" => "Tonne Rate Calculation",
            "welding" => "Welding Time Details",
            "connections" => "Welding Connections Details",
            _ => "Details"
        };
        _showMetricDetails = true;
    }
    
    private void CloseMetricDetails()
    {
        _showMetricDetails = false;
        _selectedMetricType = "";
    }
    
    private void ShowMaterialMappingSummary()
    {
        _showMaterialMappingSummary = true;
    }
    
    private async Task UpdateLaborRate()
    {
        if (package == null) return;
        
        try
        {
            using var dbContext = await DbContextFactory.CreateDbContextAsync();
            
            // Get the package from the database
            var dbPackage = await dbContext.Packages.FindAsync(package.Id);
            if (dbPackage != null)
            {
                // Update the labor rate
                dbPackage.LaborRatePerHour = Math.Max(0, Math.Min(999.99m, package.LaborRatePerHour));
                dbPackage.LastModified = DateTime.UtcNow;
                
                // Save changes
                await dbContext.SaveChangesAsync();
                
                _alertMessage = "Labor rate updated successfully.";
                _alertType = "success";
                _showAlert = true;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating labor rate: {ex.Message}");
            _alertMessage = "Error updating labor rate. Please try again.";
            _alertType = "danger";
            _showAlert = true;
        }
    }
    
    private decimal CalculateTotalHandlingTime()
    {
        if (processingItems == null || processingItems.Count == 0)
            return 0;
        
        // Calculate total minutes from all processing items
        var totalMinutes = processingItems
            .Where(p => p.Quantity > 0)
            .Sum(p => p.TotalProcessingMinutes);
        
        // Convert to hours
        return totalMinutes / 60m;
    }
    
    private Dictionary<string, decimal> GetHandlingTimeBreakdown()
    {
        if (processingItems == null || processingItems.Count == 0)
            return new Dictionary<string, decimal>();
        
        var items = processingItems.Where(p => p.Quantity > 0).ToList();
        
        return new Dictionary<string, decimal>
        {
            { "Unload Time", items.Where(p => p.DeliveryBundleId == null || p.IsParentInBundle).Sum(p => p.UnloadTimePerBundle) / 60m },
            { "Mark/Measure/Cut", items.Sum(p => p.MarkMeasureCut * p.Quantity) / 60m },
            { "Quality Check/Clean", items.Sum(p => p.QualityCheckClean * p.Quantity) / 60m },
            { "Move to Assembly", items.Sum(p => p.MoveToAssembly * p.PackBundles) / 60m },
            { "Move After Weld", items.Sum(p => p.MoveAfterWeld * p.PackBundles) / 60m },
            { "Loading Time", items.Where(p => p.DeliveryBundleId == null || p.IsParentInBundle).Sum(p => p.LoadingTimePerBundle) / 60m }
        };
    }
    
    private decimal CalculateTonneRate()
    {
        var totalTonnage = CalculateTotalTonnage();
        var totalHandlingHours = CalculateTotalHandlingTime();
        var totalWeldingHours = CalculateTotalWeldingHours();
        var totalLaborHours = totalHandlingHours + totalWeldingHours;
        var laborRate = package?.LaborRatePerHour ?? 0;
        
        // Avoid division by zero
        if (totalTonnage == 0)
            return 0;
        
        // Tonne rate = ((total handling hours + total welding hours) × labor rate) / total tonnage
        return (totalLaborHours * laborRate) / totalTonnage;
    }
    
    private MetricDetailsModal.TonneRateCalculation GetTonneRateData()
    {
        var totalTonnage = CalculateTotalTonnage();
        var totalHandlingHours = CalculateTotalHandlingTime();
        var totalWeldingHours = CalculateTotalWeldingHours();
        var totalLaborHours = totalHandlingHours + totalWeldingHours;
        var laborRate = package?.LaborRatePerHour ?? 0;
        var tonneRate = CalculateTonneRate();
        
        return new MetricDetailsModal.TonneRateCalculation
        {
            TotalHandlingHours = totalHandlingHours,
            TotalWeldingHours = totalWeldingHours,
            TotalLaborHours = totalLaborHours,
            LaborRate = laborRate,
            TotalTonnage = totalTonnage,
            TonneRate = tonneRate
        };
    }
    
    private decimal CalculateTotalWeldingHours()
    {
        decimal totalMinutes = 0;
        
        // Get all welding items from all welding worksheets
        foreach (var worksheet in worksheets.Where(w => w.WorksheetType == WorksheetTypes.Welding))
        {
            var items = weldingItems.Where(w => w.PackageWorksheetId == worksheet.Id).ToList();
            totalMinutes += items.Sum(item => item.TotalWeldingMinutes);
        }
        
        // Convert to hours
        return totalMinutes / 60m;
    }
    
    private int CalculateTotalConnections()
    {
        int totalConnections = 0;
        
        // Get all welding items from all welding worksheets
        foreach (var worksheet in worksheets.Where(w => w.WorksheetType == WorksheetTypes.Welding))
        {
            var items = weldingItems.Where(w => w.PackageWorksheetId == worksheet.Id).ToList();
            
            foreach (var item in items)
            {
                // Count connections from the new many-to-many relationship
                if (item.ItemConnections != null && item.ItemConnections.Any())
                {
                    totalConnections += item.ItemConnections.Sum(ic => ic.Quantity);
                }
                else
                {
                    // Fallback to legacy single connection
                    totalConnections += item.ConnectionQty;
                }
            }
        }
        
        return totalConnections;
    }
    
    private Dictionary<string, MetricDetailsModal.WeldingConnectionStats> GetWeldingConnectionBreakdown()
    {
        var breakdown = new Dictionary<string, MetricDetailsModal.WeldingConnectionStats>();
        
        // Get all welding items from all welding worksheets
        foreach (var worksheet in worksheets.Where(w => w.WorksheetType == WorksheetTypes.Welding))
        {
            var items = weldingItems.Where(w => w.PackageWorksheetId == worksheet.Id).ToList();
            
            foreach (var item in items)
            {
                // Process new many-to-many connections
                if (item.ItemConnections != null && item.ItemConnections.Any())
                {
                    foreach (var itemConnection in item.ItemConnections)
                    {
                        var connection = itemConnection.WeldingConnection;
                        if (connection == null) continue;
                        
                        var key = $"{connection.Category} - {connection.Size}";
                        if (!breakdown.ContainsKey(key))
                        {
                            breakdown[key] = new MetricDetailsModal.WeldingConnectionStats();
                        }
                        
                        var stats = breakdown[key];
                        stats.Count += itemConnection.Quantity;
                        stats.AssembleFitTackMinutes += itemConnection.ActualAssembleFitTack * itemConnection.Quantity;
                        stats.WeldMinutes += itemConnection.ActualWeld * itemConnection.Quantity;
                        stats.WeldCheckMinutes += itemConnection.ActualWeldCheck * itemConnection.Quantity;
                        stats.WeldTestMinutes += itemConnection.ActualWeldTest * itemConnection.Quantity;
                    }
                }
                // Fallback to legacy single connection
                else if (item.WeldingConnection != null)
                {
                    var connection = item.WeldingConnection;
                    var key = $"{connection.Category} - {connection.Size}";
                    
                    if (!breakdown.ContainsKey(key))
                    {
                        breakdown[key] = new MetricDetailsModal.WeldingConnectionStats();
                    }
                    
                    var stats = breakdown[key];
                    stats.Count += item.ConnectionQty;
                    stats.AssembleFitTackMinutes += item.AssembleFitTack * item.ConnectionQty;
                    stats.WeldMinutes += item.Weld * item.ConnectionQty;
                    stats.WeldCheckMinutes += item.WeldCheck * item.ConnectionQty;
                    stats.WeldTestMinutes += item.WeldTest * item.ConnectionQty;
                }
            }
        }
        
        return breakdown;
    }
    
    // Bundle selection methods
    private void ToggleSelectAll(ChangeEventArgs e)
    {
        if (e.Value is bool isChecked)
        {
            if (isChecked)
            {
                selectedItems = new HashSet<int>(filteredProcessingItems.Select(p => p.Id));
            }
            else
            {
                selectedItems.Clear();
            }
            StateHasChanged();
        }
    }
    
    private void ToggleItemSelection(int itemId, ChangeEventArgs e)
    {
        if (e.Value is bool isChecked)
        {
            if (isChecked)
            {
                selectedItems.Add(itemId);
            }
            else
            {
                selectedItems.Remove(itemId);
            }
            // Don't trigger full re-render for checkbox changes
            // The checkbox state is already updated via binding
        }
    }
    
    private void ClearSelection()
    {
        selectedItems.Clear();
        StateHasChanged();
    }
    
    private decimal GetSelectedWeight()
    {
        return processingItems
            .Where(p => selectedItems.Contains(p.Id))
            .Sum(p => p.TotalWeight);
    }
    
    private void ShowCreateBundleModal()
    {
        _newBundleName = $"Bundle {deliveryBundles.Count + 1}";
        _showCreateBundleModal = true;
    }
    
    private void ShowCreatePackBundleModal()
    {
        _newPackBundleName = $"Pack Bundle {packBundles.Count + 1}";
        _showCreatePackBundleModal = true;
    }
    
    private async Task CreateDeliveryBundle()
    {
        if (selectedItems.Count == 0) return;
        
        try
        {
            using var dbContext = await DbContextFactory.CreateDbContextAsync();
            
            // Generate bundle number
            var bundleNumber = await GenerateBundleNumber();
            
            // Create new bundle
            var bundle = new DeliveryBundle
            {
                PackageId = PackageId,
                BundleNumber = bundleNumber,
                BundleName = _newBundleName,
                TotalWeight = GetSelectedWeight(),
                ItemCount = selectedItems.Count,
                CreatedDate = DateTime.UtcNow,
                LastModified = DateTime.UtcNow
            };
            
            dbContext.DeliveryBundles.Add(bundle);
            await dbContext.SaveChangesAsync();
            
            // Update selected items
            var itemsToUpdate = processingItems.Where(p => selectedItems.Contains(p.Id)).ToList();
            var isFirst = true;
            
            foreach (var item in itemsToUpdate)
            {
                // Fetch fresh item from DB to ensure data integrity
                var dbItem = await dbContext.ProcessingItems.FindAsync(item.Id);
                if (dbItem != null)
                {
                    dbItem.DeliveryBundleId = bundle.Id;
                    dbItem.IsParentInBundle = isFirst;
                    isFirst = false;
                }
            }
            
            await dbContext.SaveChangesAsync();
            
            // Clear the UI state first
            selectedItems.Clear();
            _showCreateBundleModal = false;
            
            // Force StateHasChanged to clear any UI state
            StateHasChanged();
            await Task.Delay(50);
            
            // Refresh data from database
            await LoadWorksheetItems();
            
            // Force complete UI refresh to prevent column shifting
            StateHasChanged();
            await Task.Delay(150);
            await JSRuntime.InvokeVoidAsync("safeCall", "initializeWorksheetTables");
            
            _alertMessage = $"Bundle '{bundle.BundleName}' created with {bundle.ItemCount} items.";
            _showAlert = true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error creating bundle: {ex.Message}");
            _alertMessage = "Error creating bundle. Please try again.";
            _showAlert = true;
        }
    }
    
    private async Task<string> GenerateBundleNumber()
    {
        using var dbContext = await DbContextFactory.CreateDbContextAsync();
        var existingBundles = await dbContext.DeliveryBundles
            .Where(b => b.PackageId == PackageId)
            .Select(b => b.BundleNumber)
            .ToListAsync();
        
        var nextNumber = 1;
        string bundleNumber;
        
        do
        {
            bundleNumber = $"DB{nextNumber:D3}";
            nextNumber++;
        }
        while (existingBundles.Contains(bundleNumber));
        
        return bundleNumber;
    }
    
    private async Task LoadDeliveryBundles()
    {
        if (package == null) return;
        
        using var dbContext = await DbContextFactory.CreateDbContextAsync();
        deliveryBundles = await dbContext.DeliveryBundles
            .Where(b => b.PackageId == PackageId)
            .OrderBy(b => b.BundleNumber)
            .ToListAsync();
    }
    
    private async Task LoadPackBundles()
    {
        if (package == null) return;
        
        using var dbContext = await DbContextFactory.CreateDbContextAsync();
        packBundles = await dbContext.PackBundles
            .Where(b => b.PackageId == PackageId)
            .OrderBy(b => b.BundleNumber)
            .ToListAsync();
    }
    
    private string GetRowClass(ProcessingItem item)
    {
        var classes = new List<string>();
        
        if (selectedItems.Contains(item.Id))
            classes.Add("selected");
        
        return string.Join(" ", classes);
    }
    
    private void ToggleFrozenColumnsDropdown()
    {
        showFrozenColumnsDropdown = !showFrozenColumnsDropdown;
        StateHasChanged();
    }
    
    private void HandlePageClick()
    {
        // Close dropdown when clicking outside
        if (showFrozenColumnsDropdown)
        {
            showFrozenColumnsDropdown = false;
            StateHasChanged();
        }
    }
    
    private async Task DebugFrozenColumns()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("eval", @"
                console.log('=== FROZEN COLUMNS DEBUG ===');
                
                // Check what columns are marked as frozen
                const frozenHeaders = document.querySelectorAll('th[data-is-frozen=""true""]');
                const frozenCells = document.querySelectorAll('td[data-is-frozen=""true""]');
                console.log('Headers with data-is-frozen=""true"":', frozenHeaders.length);
                console.log('Cells with data-is-frozen=""true"":', frozenCells.length);
                
                // Check frozen-col class
                const frozenColElements = document.querySelectorAll('.frozen-col');
                console.log('Elements with frozen-col class:', frozenColElements.length);
                
                // Check table wrapper
                const tableWrapper = document.querySelector('.table-wrapper');
                console.log('Table wrapper found:', !!tableWrapper);
                console.log('Table wrapper overflow-x:', tableWrapper ? window.getComputedStyle(tableWrapper).overflowX : 'N/A');
                
                // Check table
                const table = document.querySelector('.table-wrapper table');
                console.log('Table found:', !!table);
                console.log('Table width:', table ? table.offsetWidth : 'N/A');
                console.log('Wrapper width:', tableWrapper ? tableWrapper.offsetWidth : 'N/A');
                console.log('Table wider than wrapper?', table && tableWrapper ? table.offsetWidth > tableWrapper.offsetWidth : 'N/A');
                
                // Check sticky positioning
                if (frozenHeaders.length > 0) {
                    const firstFrozen = frozenHeaders[0];
                    const computed = window.getComputedStyle(firstFrozen);
                    console.log('First frozen header styles:', {
                        position: computed.position,
                        left: computed.left,
                        zIndex: computed.zIndex,
                        backgroundColor: computed.backgroundColor
                    });
                }
                
                // Force update
                if (window.tableResize && window.tableResize.updateFrozenColumnPositions) {
                    console.log('Manually calling updateFrozenColumnPositions...');
                    window.tableResize.updateFrozenColumnPositions(table);
                }
                
                console.log('=== END DEBUG ===');
            ");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Debug error: {ex.Message}");
        }
    }
    
    private bool IsCheckboxColumn(string columnKey)
    {
        return columnKey == "Select" || columnKey == "Checkbox";
    }
    
    private bool HasPackBundles()
    {
        return processingItems?.Any(p => p.PackBundleId != null) ?? false;
    }
    
    private string GetColumnDisplayName(string columnKey)
    {
        var displayNames = new Dictionary<string, string>
        {
            { "ID", "ID" },
            { "DrawingNumber", "Drawing Number" },
            { "Description", "Description" },
            { "MaterialId", "MBE ID" },
            { "Quantity", "QTY" },
            { "Length", "Length (mm)" },
            { "Weight", "Weight (kg)" },
            { "TotalWeight", "Total Weight" },
            { "DeliveryBundle", "Delivery Bundle" },
            { "PackBundle", "Pack Bundle" },
            { "UnloadTime", "Unload Time/Bundle" },
            { "MarkMeasureCut", "Mark/Measure/Cut" },
            { "QualityCheck", "Quality Check/Clean" },
            { "MoveToAssembly", "Move to Assembly" },
            { "MoveAfterWeld", "Move After Weld" },
            { "LoadingTime", HasPackBundles() ? "Loading Time per Pack Bundle" : "Loading Time/Bundle" }
        };
        
        return displayNames.ContainsKey(columnKey) ? displayNames[columnKey] : columnKey;
    }
    
    private async Task ShowBulkUpdateModal()
    {
        try
        {
            // Ensure we have loaded processing items
            if (processingItems == null || processingItems.Count == 0)
            {
                _alertMessage = "No items to update. Please ensure the worksheet is loaded.";
                _alertType = "warning";
                _showAlert = true;
                return;
            }

            using var dbContext = await DbContextFactory.CreateDbContextAsync();
            // Load other packages for copy operation
            otherPackages = await dbContext.Packages
                .Where(p => p.ProjectId == EstimationId && p.Id != PackageId && !p.IsDeleted)
                .OrderBy(p => p.PackageNumber)
                .ToListAsync();
            
            // Initialize change tracking
            originalTotalHours = CalculateTotalHandlingTime();
            currentTotalHours = originalTotalHours;
            totalItemsModified = 0;
            updatesSaved = 0;
            changeHistory.Clear();
            
            // Reset form
            bulkUpdateFields = new();
            bulkUpdateValues = new();
            bulkUpdateScope = "all";
            selectedBundleId = null;
            selectedMaterialType = null;
            bulkOperationTab = "update"; // Ensure tab is initialized
                
            _showBulkUpdateModal = true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[ShowBulkUpdateModal] Error: {ex.Message}");
            _alertMessage = "An error occurred while opening bulk update. Please try again.";
            _alertType = "danger";
            _showAlert = true;
        }
    }
    
    private void ShowAutoBundleModal()
    {
        _showAutoBundleModal = true;
    }
    
    private async Task ShowBulkBundleModal()
    {
        // Reset session tracking for new session
        bulkBundleSessionMessages.Clear();
        bulkBundleSessionBundlesCreated = 0;
        bulkBundleSessionItemsBundled = 0;
        
        // Refresh data to ensure we have the latest bundle states
        await LoadWorksheetItems();
        
        // Reset filters
        bulkBundleDescriptionFilter = "";
        bulkBundleSelectedTypes = new() { "beams", "plates", "purlins", "misc" };
        excludeAlreadyBundled = true;
        bulkBundleNameTemplate = "Bundle {0}";
        bulkBundleMaxWeight = 1000;
        
        _showBulkBundleModal = true;
    }
    
    private List<ProcessingItem> GetBulkBundleFilteredItems()
    {
        var items = processingItems.AsEnumerable();
        
        // Filter by description
        if (!string.IsNullOrWhiteSpace(bulkBundleDescriptionFilter))
        {
            items = items.Where(p => p.Description?.Contains(bulkBundleDescriptionFilter, StringComparison.OrdinalIgnoreCase) ?? false);
        }
        
        // Filter by material type
        items = items.Where(p => 
        {
            if (string.IsNullOrEmpty(p.MaterialId)) return bulkBundleSelectedTypes.Contains("misc");
            
            if (IsBeamMaterial(p.MaterialId)) return bulkBundleSelectedTypes.Contains("beams");
            if (IsPlateMaterial(p.MaterialId)) return bulkBundleSelectedTypes.Contains("plates");
            if (IsPurlinMaterial(p.MaterialId)) return bulkBundleSelectedTypes.Contains("purlins");
            
            return bulkBundleSelectedTypes.Contains("misc");
        });
        
        // Exclude already bundled items if requested
        if (excludeAlreadyBundled)
        {
            items = items.Where(p => p.DeliveryBundleId == null);
        }
        
        // Only include items with quantity > 0
        items = items.Where(p => p.Quantity > 0);
        
        return items.ToList();
    }
    
    private decimal GetBulkBundleTotalWeight()
    {
        return GetBulkBundleFilteredItems().Sum(p => p.TotalWeight);
    }
    
    private void ToggleBulkBundleType(string type, ChangeEventArgs e)
    {
        if (e.Value is bool isChecked)
        {
            if (isChecked)
                bulkBundleSelectedTypes.Add(type);
            else
                bulkBundleSelectedTypes.Remove(type);
        }
    }
    
    private async Task<int> GetNextBundleNumber()
    {
        using var dbContext = await DbContextFactory.CreateDbContextAsync();
        var existingBundles = await dbContext.DeliveryBundles
            .Where(b => b.PackageId == PackageId)
            .Select(b => b.BundleNumber)
            .ToListAsync();
        
        var nextNumber = 1;
        
        while (existingBundles.Contains($"DB{nextNumber:D3}"))
        {
            nextNumber++;
        }
        
        return nextNumber;
    }
    
    private void ShowSplitModal(ProcessingItem item)
    {
        itemToSplit = item;
        numberOfSplits = 2;
        splitMethod = "even";
        customQuantities = new List<int> { 0, 0 };
        copyTimeValues = true;
        UpdateCustomQuantities();
        _showSplitModal = true;
    }
    
    private void ShowBulkSplitModal()
    {
        // Get selected items that can be split (quantity > 1)
        var splittableItems = processingItems
            .Where(p => selectedItems.Contains(p.Id) && p.Quantity > 1)
            .ToList();
            
        if (splittableItems.Count == 0)
        {
            _alertMessage = "Please select items with quantity greater than 1 to split.";
            _alertType = "warning";
            _showAlert = true;
            return;
        }
        
        // For now, show split modal for the first item
        // TODO: In future, implement bulk split functionality
        ShowSplitModal(splittableItems.First());
    }
    
    private void UpdateCustomQuantities()
    {
        if (itemToSplit == null) return;
        
        customQuantities.Clear();
        
        if (splitMethod == "even")
        {
            var baseQty = itemToSplit.Quantity / numberOfSplits;
            var remainder = itemToSplit.Quantity % numberOfSplits;
            
            for (int i = 0; i < numberOfSplits; i++)
            {
                customQuantities.Add(baseQty + (i < remainder ? 1 : 0));
            }
        }
        else
        {
            // Initialize with zeros for custom input
            for (int i = 0; i < numberOfSplits; i++)
            {
                customQuantities.Add(0);
            }
        }
    }
    
    private async Task ExecuteSplit()
    {
        if (itemToSplit == null) return;
        
        try
        {
            using var dbContext = await DbContextFactory.CreateDbContextAsync();
            var newItems = new List<ProcessingItem>();
            
            // Validate quantities
            if (customQuantities.Sum() != itemToSplit.Quantity)
            {
                _alertMessage = $"Split quantities must sum to original quantity ({itemToSplit.Quantity})";
                _showAlert = true;
                return;
            }
            
            // Create new items
            for (int i = 1; i < numberOfSplits; i++) // Start at 1 because we'll update the original
            {
                var newItem = new ProcessingItem
                {
                    ProjectId = itemToSplit.ProjectId,
                    PackageWorksheetId = itemToSplit.PackageWorksheetId,
                    DrawingNumber = itemToSplit.DrawingNumber,
                    Description = itemToSplit.Description,
                    MaterialId = itemToSplit.MaterialId,
                    Quantity = customQuantities[i],
                    Weight = itemToSplit.Weight,
                    Length = itemToSplit.Length,
                    DeliveryBundleQty = itemToSplit.DeliveryBundleQty,
                    PackBundleQty = itemToSplit.PackBundleQty,
                    BundleGroup = itemToSplit.BundleGroup,
                    PackGroup = itemToSplit.PackGroup,
                    // Copy time values if requested
                    UnloadTimePerBundle = copyTimeValues ? itemToSplit.UnloadTimePerBundle : 0,
                    MarkMeasureCut = copyTimeValues ? itemToSplit.MarkMeasureCut : 0,
                    QualityCheckClean = copyTimeValues ? itemToSplit.QualityCheckClean : 0,
                    MoveToAssembly = copyTimeValues ? itemToSplit.MoveToAssembly : 0,
                    MoveAfterWeld = copyTimeValues ? itemToSplit.MoveAfterWeld : 0,
                    LoadingTimePerBundle = copyTimeValues ? itemToSplit.LoadingTimePerBundle : 0
                };
                
                newItems.Add(newItem);
            }
            
            // Track changes for undo/redo
            if (activeWorksheet != null && currentUserId.HasValue)
            {
                // Record update for original item quantity change
                var oldQuantity = itemToSplit.Quantity;
                var updateChange = new WorksheetChange
                {
                    PackageWorksheetId = activeWorksheet.Id,
                    UserId = currentUserId.Value,
                    ChangeType = "Update",
                    EntityType = "ProcessingItem",
                    EntityId = itemToSplit.Id,
                    OldValues = JsonConvert.SerializeObject(new Dictionary<string, object?> { ["Quantity"] = oldQuantity }),
                    NewValues = JsonConvert.SerializeObject(new Dictionary<string, object?> { ["Quantity"] = customQuantities[0] }),
                    Timestamp = DateTime.UtcNow
                };
                await WorksheetChangeService.RecordChangeAsync(updateChange);
            }
            
            // Update original item with first split quantity
            itemToSplit.Quantity = customQuantities[0];
            
            // Add new items to database
            dbContext.ProcessingItems.AddRange(newItems);
            await dbContext.SaveChangesAsync();
            
            // Record addition of new items for undo/redo
            if (activeWorksheet != null && currentUserId.HasValue)
            {
                foreach (var newItem in newItems)
                {
                    var newValues = new Dictionary<string, object?>
                    {
                        ["DrawingNumber"] = newItem.DrawingNumber,
                        ["Description"] = newItem.Description,
                        ["MaterialId"] = newItem.MaterialId,
                        ["Quantity"] = newItem.Quantity,
                        ["Weight"] = newItem.Weight,
                        ["Length"] = newItem.Length,
                        ["DeliveryBundleQty"] = newItem.DeliveryBundleQty,
                        ["PackBundleQty"] = newItem.PackBundleQty,
                        ["BundleGroup"] = newItem.BundleGroup,
                        ["PackGroup"] = newItem.PackGroup,
                        ["UnloadTimePerBundle"] = newItem.UnloadTimePerBundle,
                        ["MarkMeasureCut"] = newItem.MarkMeasureCut,
                        ["QualityCheckClean"] = newItem.QualityCheckClean,
                        ["MoveToAssembly"] = newItem.MoveToAssembly,
                        ["MoveAfterWeld"] = newItem.MoveAfterWeld,
                        ["LoadingTimePerBundle"] = newItem.LoadingTimePerBundle
                    };
                    
                    var addChange = new WorksheetChange
                    {
                        PackageWorksheetId = activeWorksheet.Id,
                        UserId = currentUserId.Value,
                        ChangeType = "Add",
                        EntityType = "ProcessingItem",
                        EntityId = newItem.Id,
                        OldValues = null,
                        NewValues = JsonConvert.SerializeObject(newValues),
                        Timestamp = DateTime.UtcNow
                    };
                    await WorksheetChangeService.RecordChangeAsync(addChange);
                }
            }
            
            // Reload worksheet items
            await LoadWorksheetItems();
            
            // Update undo/redo state
            await UpdateUndoRedoState();
            
            _showSplitModal = false;
            _alertMessage = $"Successfully split item into {numberOfSplits} rows";
            _showAlert = true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error splitting item: {ex.Message}");
            _alertMessage = "Error splitting item. Please try again.";
            _showAlert = true;
        }
    }
    
    private async Task CreateBulkBundles()
    {
        try
        {
            using var dbContext = await DbContextFactory.CreateDbContextAsync();
            var itemsToBundle = GetBulkBundleFilteredItems();
            
            if (!itemsToBundle.Any())
            {
                _alertMessage = "No items match the filter criteria.";
                _showAlert = true;
                return;
            }
            
            // Group items by material type to ensure bundles don't mix types
            var groupedItems = itemsToBundle.GroupBy(p => 
            {
                if (string.IsNullOrEmpty(p.MaterialId)) return "misc";
                if (IsBeamMaterial(p.MaterialId)) return "beams";
                if (IsPlateMaterial(p.MaterialId)) return "plates";
                if (IsPurlinMaterial(p.MaterialId)) return "purlins";
                return "misc";
            });
            
            // Get the next bundle number
            var nextBundleNumber = await GetNextBundleNumber();
            var bundlesCreated = 0;
            var itemsBundled = 0;
            
            foreach (var group in groupedItems)
            {
                var typeItems = group.OrderByDescending(p => p.TotalWeight).ToList();
                
                // Get material-specific max weight
                var settings = BundleSettings.Value;
                var maxWeight = group.Key switch
                {
                    "beams" => settings.BeamsMaxWeight,
                    "plates" => settings.PlatesMaxWeight,
                    "purlins" => settings.PurlinsMaxWeight,
                    "misc" => settings.MiscMaxWeight,
                    _ => bulkBundleMaxWeight
                };
                
                while (typeItems.Any())
                {
                    var bundleItems = new List<ProcessingItem>();
                    var currentWeight = 0m;
                    
                    // Greedy algorithm to fill bundle up to max weight
                    for (int i = typeItems.Count - 1; i >= 0; i--)
                    {
                        var item = typeItems[i];
                        if (currentWeight + item.TotalWeight <= maxWeight)
                        {
                            bundleItems.Add(item);
                            currentWeight += item.TotalWeight;
                            typeItems.RemoveAt(i);
                        }
                    }
                    
                    // Only create bundle if we have items
                    if (bundleItems.Any())
                    {
                        // Create the bundle entity
                        var bundle = new DeliveryBundle
                        {
                            PackageId = PackageId,
                            BundleNumber = $"DB{nextBundleNumber:D3}",
                            BundleName = string.Format(bulkBundleNameTemplate, nextBundleNumber),
                            TotalWeight = bundleItems.Sum(b => b.TotalWeight),
                            ItemCount = bundleItems.Count
                        };
                        
                        dbContext.DeliveryBundles.Add(bundle);
                        await dbContext.SaveChangesAsync();
                        
                        // Select the parent (heaviest item)
                        var parent = bundleItems.OrderByDescending(b => b.TotalWeight).First();
                        
                        // Update all items to reference the bundle in the database
                        foreach (var item in bundleItems)
                        {
                            var dbItem = await dbContext.ProcessingItems.FindAsync(item.Id);
                            if (dbItem != null)
                            {
                                dbItem.DeliveryBundleId = bundle.Id;
                                dbItem.IsParentInBundle = (item.Id == parent.Id);
                                dbItem.LastModified = DateTime.UtcNow;
                            }
                        }
                        
                        // Save the item updates
                        await dbContext.SaveChangesAsync();
                        
                        bundlesCreated++;
                        itemsBundled += bundleItems.Count;
                        nextBundleNumber++;
                    }
                }
            }
            
            // Reload worksheet items
            await LoadWorksheetItems();
            
            // Update session tracking instead of closing modal
            bulkBundleSessionBundlesCreated += bundlesCreated;
            bulkBundleSessionItemsBundled += itemsBundled;
            
            // Add success message to session
            var sessionMessage = $"✓ Created {bundlesCreated} bundles with {itemsBundled} items";
            bulkBundleSessionMessages.Add(sessionMessage);
            
            // Show inline alert but keep modal open
            _alertMessage = sessionMessage;
            _alertType = "success";
            _showAlert = true;
            
            // Clear filters for next bundle creation
            bulkBundleDescriptionFilter = "";
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error creating bulk bundles: {ex.Message}");
            _alertMessage = "Error creating bundles. Please try again.";
            _showAlert = true;
        }
    }
    
    private void ToggleBundleCollapse(int bundleId)
    {
        if (collapsedBundles.Contains(bundleId))
            collapsedBundles.Remove(bundleId);
        else
            collapsedBundles.Add(bundleId);
            
        StateHasChanged();
    }
    
    private async Task AddItemToBundle(ProcessingItem item, ChangeEventArgs e)
    {
        if (e.Value is string bundleIdStr && int.TryParse(bundleIdStr, out int bundleId))
        {
            try
            {
                using var dbContext = await DbContextFactory.CreateDbContextAsync();
                
                // Find the bundle
                var bundle = deliveryBundles.FirstOrDefault(b => b.Id == bundleId);
                if (bundle == null)
                {
                    _alertMessage = "Bundle not found.";
                    _showAlert = true;
                    return;
                }
                
                // Check if this is the first item in the bundle
                var existingBundleItems = processingItems.Where(p => p.DeliveryBundleId == bundleId).ToList();
                
                // Load the item from database and update it
                var dbItem = await dbContext.ProcessingItems.FindAsync(item.Id);
                if (dbItem != null)
                {
                    dbItem.DeliveryBundleId = bundleId;
                    dbItem.IsParentInBundle = !existingBundleItems.Any(); // First item becomes parent
                    dbItem.LastModified = DateTime.UtcNow;
                    
                    // Save changes
                    await dbContext.SaveChangesAsync();
                }
                
                // Reload to ensure consistency
                await LoadWorksheetItems();
                
                _alertMessage = $"Item added to bundle {bundle.BundleNumber}";
                _alertType = "success";
                _showAlert = true;
            }
            catch (Exception ex)
            {
                _alertMessage = $"Error adding item to bundle: {ex.Message}";
                _alertType = "danger";
                _showAlert = true;
            }
        }
    }
    
    private async Task UnbundleItems(int bundleId)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
            "Are you sure you want to unbundle these items? They will return to their individual state.");
            
        if (!confirmed) return;
        
        try
        {
            // Get all items in this bundle
            var bundledItems = processingItems.Where(p => p.DeliveryBundleId == bundleId).ToList();
            
            if (!bundledItems.Any())
            {
                _alertMessage = "No items found in this bundle.";
                _showAlert = true;
                return;
            }
            
            using var dbContext = await DbContextFactory.CreateDbContextAsync();
            
            // Remove bundle association from all items in the database
            var dbItems = await dbContext.ProcessingItems
                .Where(p => p.DeliveryBundleId == bundleId)
                .ToListAsync();
                
            foreach (var dbItem in dbItems)
            {
                dbItem.DeliveryBundleId = null;
                dbItem.IsParentInBundle = false;
                dbItem.LastModified = DateTime.UtcNow;
            }
            
            // Get the bundle entity and remove it
            var bundle = await dbContext.DeliveryBundles.FindAsync(bundleId);
            if (bundle != null)
            {
                dbContext.DeliveryBundles.Remove(bundle);
            }
            
            // Save all changes
            await dbContext.SaveChangesAsync();
            
            // Reload data to refresh the UI
            await LoadWorksheetItems();
            
            // Remove from collapsed bundles if it was collapsed
            collapsedBundles.Remove(bundleId);
            
            _alertMessage = $"Successfully unbundled {bundledItems.Count} items.";
            _showAlert = true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error unbundling items: {ex.Message}");
            _alertMessage = "Error unbundling items. Please try again.";
            _showAlert = true;
        }
    }
    
    private int GetBundleChildCount(int bundleId)
    {
        return processingItems.Count(p => p.DeliveryBundleId == bundleId && !p.IsParentInBundle);
    }
    
    private decimal GetBundleWeight(int bundleId)
    {
        return processingItems
            .Where(p => p.DeliveryBundleId == bundleId)
            .Sum(p => p.TotalWeight);
    }
    
    // Pack Bundle Methods
    private async Task CreatePackBundle()
    {
        if (selectedItems.Count == 0) return;
        
        try
        {
            using var dbContext = await DbContextFactory.CreateDbContextAsync();
            
            // Generate bundle number
            var bundleNumber = await GeneratePackBundleNumber();
            
            // Create new bundle
            var bundle = new PackBundle
            {
                PackageId = PackageId,
                BundleNumber = bundleNumber,
                BundleName = _newPackBundleName,
                TotalWeight = GetSelectedWeight(),
                ItemCount = selectedItems.Count,
                CreatedDate = DateTime.UtcNow,
                LastModified = DateTime.UtcNow
            };
            
            dbContext.PackBundles.Add(bundle);
            await dbContext.SaveChangesAsync();
            
            // Update selected items
            var itemsToUpdate = processingItems.Where(p => selectedItems.Contains(p.Id)).ToList();
            var isFirst = true;
            
            foreach (var item in itemsToUpdate)
            {
                // Fetch fresh item from DB to ensure data integrity
                var dbItem = await dbContext.ProcessingItems.FindAsync(item.Id);
                if (dbItem != null)
                {
                    dbItem.PackBundleId = bundle.Id;
                    dbItem.IsParentInPackBundle = isFirst;
                    isFirst = false;
                }
            }
            
            await dbContext.SaveChangesAsync();
            
            // Clear the UI state first
            selectedItems.Clear();
            _showCreatePackBundleModal = false;
            
            // Force StateHasChanged to clear any UI state
            StateHasChanged();
            
            // Then reload data
            await LoadWorksheetItems();
            
            // Force complete UI refresh to prevent column shifting
            StateHasChanged();
            
            _alertMessage = $"Pack bundle '{bundle.BundleName}' created successfully with {itemsToUpdate.Count} items.";
            _alertType = "success";
            _showAlert = true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error creating pack bundle: {ex.Message}");
            _alertMessage = $"Error creating pack bundle: {ex.Message}";
            _alertType = "danger";
            _showAlert = true;
        }
    }
    
    private async Task<string> GeneratePackBundleNumber()
    {
        using var dbContext = await DbContextFactory.CreateDbContextAsync();
        var existingBundles = await dbContext.PackBundles
            .Where(b => b.PackageId == PackageId)
            .Select(b => b.BundleNumber)
            .ToListAsync();
        
        var nextNumber = 1;
        string bundleNumber;
        
        do
        {
            bundleNumber = $"PB{nextNumber:D3}";
            nextNumber++;
        } while (existingBundles.Contains(bundleNumber));
        
        return bundleNumber;
    }
    
    private void TogglePackBundleCollapse(int bundleId)
    {
        if (collapsedPackBundles.Contains(bundleId))
        {
            collapsedPackBundles.Remove(bundleId);
        }
        else
        {
            collapsedPackBundles.Add(bundleId);
        }
    }
    
    private int GetPackBundleChildCount(int bundleId)
    {
        return processingItems.Count(p => p.PackBundleId == bundleId && !p.IsParentInPackBundle);
    }
    
    private async Task AssignToPackBundle(ProcessingItem item, ChangeEventArgs e)
    {
        if (e.Value == null || string.IsNullOrEmpty(e.Value.ToString())) return;
        
        if (int.TryParse(e.Value.ToString(), out var bundleId))
        {
            try
            {
                using var dbContext = await DbContextFactory.CreateDbContextAsync();
                
                var dbItem = await dbContext.ProcessingItems.FindAsync(item.Id);
                if (dbItem != null)
                {
                    // Check if this bundle already has a parent
                    var hasParent = await dbContext.ProcessingItems
                        .AnyAsync(p => p.PackBundleId == bundleId && p.IsParentInPackBundle);
                    
                    dbItem.PackBundleId = bundleId;
                    dbItem.IsParentInPackBundle = !hasParent;
                    
                    await dbContext.SaveChangesAsync();
                    
                    // Update the bundle's totals
                    var bundle = await dbContext.PackBundles.FindAsync(bundleId);
                    if (bundle != null)
                    {
                        bundle.ItemCount = await dbContext.ProcessingItems.CountAsync(p => p.PackBundleId == bundleId);
                        bundle.TotalWeight = await dbContext.ProcessingItems
                            .Where(p => p.PackBundleId == bundleId)
                            .SumAsync(p => p.Weight * p.Quantity);
                        bundle.LastModified = DateTime.UtcNow;
                        
                        await dbContext.SaveChangesAsync();
                    }
                    
                    await LoadWorksheetItems();
                    
                    _alertMessage = $"Item added to pack bundle {bundle?.BundleNumber ?? ""}";
                    _alertType = "success";
                    _showAlert = true;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error assigning to pack bundle: {ex.Message}");
                _alertMessage = $"Error assigning to pack bundle: {ex.Message}";
                _alertType = "danger";
                _showAlert = true;
            }
        }
    }
    
    private void ConfirmUnpackBundle(int bundleId)
    {
        _confirmMessage = "Are you sure you want to unpack this bundle? All items will be removed from the bundle.";
        _pendingConfirmAction = async () => await UnpackBundle(bundleId);
        _showConfirmation = true;
    }
    
    private async Task UnpackBundle(int bundleId)
    {
        try
        {
            using var dbContext = await DbContextFactory.CreateDbContextAsync();
            
            // Get all items in this bundle
            var bundledItems = await dbContext.ProcessingItems
                .Where(p => p.PackBundleId == bundleId)
                .ToListAsync();
            
            // Clear bundle reference for all items
            foreach (var item in bundledItems)
            {
                item.PackBundleId = null;
                item.IsParentInPackBundle = false;
            }
            
            await dbContext.SaveChangesAsync();
            
            // Delete the bundle
            var bundle = await dbContext.PackBundles.FindAsync(bundleId);
            if (bundle != null)
            {
                dbContext.PackBundles.Remove(bundle);
                await dbContext.SaveChangesAsync();
            }
            
            await LoadWorksheetItems();
            
            _alertMessage = $"Successfully unpacked bundle with {bundledItems.Count} items.";
            _alertType = "success";
            _showAlert = true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error unpacking bundle: {ex.Message}");
            _alertMessage = $"Error unpacking bundle: {ex.Message}";
            _alertType = "danger";
            _showAlert = true;
        }
    }
    
    private void EditPackBundleName(int bundleId)
    {
        // This would open a modal to edit the bundle name
        // For now, we'll just show an alert
        _alertMessage = "Pack bundle name editing will be implemented in the bundle management modal.";
        _alertType = "info";
        _showAlert = true;
    }
    
    private void ShowAutoPackBundleModal()
    {
        _showAutoPackBundleModal = true;
    }
    
    private (int ItemCount, decimal TotalWeight) GetAutoPackBundlePreview()
    {
        var unbundledItems = processingItems.Where(p => p.Quantity > 0 && p.PackBundleId == null);
        return (unbundledItems.Count(), unbundledItems.Sum(i => i.TotalWeight));
    }
    
    private async Task CreateAutoPackBundles()
    {
        try
        {
            using var dbContext = await DbContextFactory.CreateDbContextAsync();
            
            // Get unbundled items
            var unbundledItems = processingItems
                .Where(p => p.Quantity > 0 && p.PackBundleId == null)
                .ToList();
                
            if (!unbundledItems.Any())
            {
                _alertMessage = "No unbundled items to process.";
                _alertType = "info";
                _showAlert = true;
                return;
            }
            
            // Get next bundle number
            var existingBundles = await dbContext.PackBundles
                .Where(b => b.PackageId == PackageId)
                .Select(b => b.BundleNumber)
                .ToListAsync();
                
            var nextBundleNumber = 1;
            while (existingBundles.Contains($"PB{nextBundleNumber:D3}"))
            {
                nextBundleNumber++;
            }
            
            var bundlesCreated = 0;
            var itemsBundled = 0;
            
            if (separateByType)
            {
                // Group by material type
                var groups = new Dictionary<string, List<ProcessingItem>>();
                
                foreach (var item in unbundledItems)
                {
                    var type = GetMaterialTypeKey(item.MaterialId);
                    if (!groups.ContainsKey(type))
                        groups[type] = new List<ProcessingItem>();
                    groups[type].Add(item);
                }
                
                // Create bundles for each type
                foreach (var group in groups)
                {
                    var result = await CreateBundlesForGroup(dbContext, group.Value, nextBundleNumber, 
                        $"{group.Key} Pack", maxBundleWeight);
                    bundlesCreated += result.BundlesCreated;
                    itemsBundled += result.ItemsBundled;
                    nextBundleNumber += result.BundlesCreated;
                }
            }
            else
            {
                // Create mixed bundles
                var result = await CreateBundlesForGroup(dbContext, unbundledItems, nextBundleNumber, 
                    "Mixed Pack", maxBundleWeight);
                bundlesCreated += result.BundlesCreated;
                itemsBundled += result.ItemsBundled;
            }
            
            // Reload worksheet items
            await LoadWorksheetItems();
            
            _showAutoPackBundleModal = false;
            _alertMessage = $"Successfully created {bundlesCreated} pack bundles containing {itemsBundled} items.";
            _alertType = "success";
            _showAlert = true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error creating auto pack bundles: {ex.Message}");
            _alertMessage = "Error creating pack bundles. Please try again.";
            _alertType = "danger";
            _showAlert = true;
        }
    }
    
    private string GetMaterialTypeKey(string? materialId)
    {
        if (string.IsNullOrEmpty(materialId)) return "Misc";
        if (IsBeamMaterial(materialId)) return "Beam";
        if (IsPlateMaterial(materialId)) return "Plate";
        if (IsPurlinMaterial(materialId)) return "Purlin";
        return "Misc";
    }
    
    private async Task<(int BundlesCreated, int ItemsBundled)> CreateBundlesForGroup(
        ApplicationDbContext dbContext, List<ProcessingItem> items, int startBundleNumber, 
        string bundlePrefix, decimal maxWeight)
    {
        var bundlesCreated = 0;
        var itemsBundled = 0;
        var bundleNumber = startBundleNumber;
        
        // Sort items by weight (heaviest first for better packing)
        var sortedItems = items.OrderByDescending(i => i.TotalWeight).ToList();
        
        while (sortedItems.Any())
        {
            var bundleItems = new List<ProcessingItem>();
            var currentWeight = 0m;
            
            // First-fit decreasing algorithm
            for (int i = 0; i < sortedItems.Count; i++)
            {
                var item = sortedItems[i];
                if (currentWeight + item.TotalWeight <= maxWeight)
                {
                    bundleItems.Add(item);
                    currentWeight += item.TotalWeight;
                    sortedItems.RemoveAt(i);
                    i--; // Adjust index after removal
                }
            }
            
            if (bundleItems.Any())
            {
                // Create the bundle
                var bundle = new PackBundle
                {
                    PackageId = PackageId,
                    BundleNumber = $"PB{bundleNumber:D3}",
                    BundleName = $"{bundlePrefix} {bundleNumber}",
                    TotalWeight = bundleItems.Sum(b => b.TotalWeight),
                    ItemCount = bundleItems.Count
                };
                
                dbContext.PackBundles.Add(bundle);
                await dbContext.SaveChangesAsync();
                
                // Select the parent (heaviest item)
                var parent = bundleItems.OrderByDescending(b => b.TotalWeight).First();
                
                // Update all items
                foreach (var item in bundleItems)
                {
                    item.PackBundleId = bundle.Id;
                    item.IsParentInPackBundle = (item.Id == parent.Id);
                }
                
                await dbContext.SaveChangesAsync();
                
                bundlesCreated++;
                itemsBundled += bundleItems.Count;
                bundleNumber++;
            }
        }
        
        return (bundlesCreated, itemsBundled);
    }
    
    private void ShowBulkPackBundleModal()
    {
        // Reset session tracking for new session
        bulkPackBundleSessionMessages.Clear();
        bulkPackBundleSessionBundlesCreated = 0;
        bulkPackBundleSessionItemsBundled = 0;
        
        // Reset filters
        bulkPackBundleDescriptionFilter = "";
        bulkPackBundleSelectedTypes = new() { "beams", "plates", "purlins", "misc" };
        excludeAlreadyPackBundled = true;
        bulkPackBundleNameTemplate = "Pack Bundle {0}";
        bulkPackBundleMaxWeight = 1000;
        
        _showBulkPackBundleModal = true;
    }
    
    private void TogglePackBundleMaterialType(string type, bool isChecked)
    {
        if (isChecked)
        {
            bulkPackBundleSelectedTypes.Add(type);
        }
        else
        {
            bulkPackBundleSelectedTypes.Remove(type);
        }
    }
    
    private (int ItemCount, decimal TotalWeight, int EstimatedBundles) GetBulkPackBundlePreview()
    {
        var eligibleItems = processingItems.Where(p => p.Quantity > 0);
        
        // Apply description filter
        if (!string.IsNullOrWhiteSpace(bulkPackBundleDescriptionFilter))
        {
            eligibleItems = eligibleItems.Where(p => 
                p.Description?.Contains(bulkPackBundleDescriptionFilter, StringComparison.OrdinalIgnoreCase) == true);
        }
        
        // Apply pack bundle exclusion
        if (excludeAlreadyPackBundled)
        {
            eligibleItems = eligibleItems.Where(p => p.PackBundleId == null);
        }
        
        // Apply material type filters
        var filteredItems = new List<ProcessingItem>();
        foreach (var item in eligibleItems)
        {
            if (bulkPackBundleSelectedTypes.Contains("beams") && IsBeamMaterial(item.MaterialId))
                filteredItems.Add(item);
            else if (bulkPackBundleSelectedTypes.Contains("plates") && IsPlateMaterial(item.MaterialId))
                filteredItems.Add(item);
            else if (bulkPackBundleSelectedTypes.Contains("purlins") && IsPurlinMaterial(item.MaterialId))
                filteredItems.Add(item);
            else if (bulkPackBundleSelectedTypes.Contains("misc") && 
                     !string.IsNullOrEmpty(item.MaterialId) &&
                     !IsBeamMaterial(item.MaterialId) && 
                     !IsPlateMaterial(item.MaterialId) && 
                     !IsPurlinMaterial(item.MaterialId))
                filteredItems.Add(item);
        }
        
        var totalWeight = filteredItems.Sum(i => i.TotalWeight);
        var estimatedBundles = totalWeight > 0 ? (int)Math.Ceiling(totalWeight / bulkPackBundleMaxWeight) : 0;
        
        return (filteredItems.Count, totalWeight, estimatedBundles);
    }
    
    private async Task CreateBulkPackBundles()
    {
        try
        {
            using var dbContext = await DbContextFactory.CreateDbContextAsync();
            
            // Get next bundle number
            var existingBundles = await dbContext.PackBundles
                .Where(b => b.PackageId == PackageId)
                .Select(b => b.BundleNumber)
                .ToListAsync();
                
            var nextBundleNumber = 1;
            while (existingBundles.Contains($"PB{nextBundleNumber:D3}"))
            {
                nextBundleNumber++;
            }
            
            // Get eligible items using same logic as preview
            var eligibleItems = processingItems.Where(p => p.Quantity > 0);
            
            if (!string.IsNullOrWhiteSpace(bulkPackBundleDescriptionFilter))
            {
                eligibleItems = eligibleItems.Where(p => 
                    p.Description?.Contains(bulkPackBundleDescriptionFilter, StringComparison.OrdinalIgnoreCase) == true);
            }
            
            if (excludeAlreadyPackBundled)
            {
                eligibleItems = eligibleItems.Where(p => p.PackBundleId == null);
            }
            
            // Group by material type
            var itemsByType = new Dictionary<string, List<ProcessingItem>>();
            
            foreach (var item in eligibleItems)
            {
                string type = "";
                if (bulkPackBundleSelectedTypes.Contains("beams") && IsBeamMaterial(item.MaterialId))
                    type = "beams";
                else if (bulkPackBundleSelectedTypes.Contains("plates") && IsPlateMaterial(item.MaterialId))
                    type = "plates";
                else if (bulkPackBundleSelectedTypes.Contains("purlins") && IsPurlinMaterial(item.MaterialId))
                    type = "purlins";
                else if (bulkPackBundleSelectedTypes.Contains("misc") && 
                         !string.IsNullOrEmpty(item.MaterialId) &&
                         !IsBeamMaterial(item.MaterialId) && 
                         !IsPlateMaterial(item.MaterialId) && 
                         !IsPurlinMaterial(item.MaterialId))
                    type = "misc";
                    
                if (!string.IsNullOrEmpty(type))
                {
                    if (!itemsByType.ContainsKey(type))
                        itemsByType[type] = new List<ProcessingItem>();
                    itemsByType[type].Add(item);
                }
            }
            
            // Create bundles for each type
            var bundlesCreated = 0;
            var itemsBundled = 0;
            
            foreach (var typeGroup in itemsByType)
            {
                var typeItems = typeGroup.Value.OrderByDescending(i => i.TotalWeight).ToList();
                
                while (typeItems.Any())
                {
                    var bundleItems = new List<ProcessingItem>();
                    var currentWeight = 0m;
                    
                    // Greedy algorithm to fill bundle up to max weight
                    for (int i = typeItems.Count - 1; i >= 0; i--)
                    {
                        var item = typeItems[i];
                        if (currentWeight + item.TotalWeight <= bulkPackBundleMaxWeight)
                        {
                            bundleItems.Add(item);
                            currentWeight += item.TotalWeight;
                            typeItems.RemoveAt(i);
                        }
                    }
                    
                    // Only create bundle if we have items
                    if (bundleItems.Any())
                    {
                        // Create the pack bundle entity
                        var bundle = new PackBundle
                        {
                            PackageId = PackageId,
                            BundleNumber = $"PB{nextBundleNumber:D3}",
                            BundleName = string.Format(bulkPackBundleNameTemplate, nextBundleNumber),
                            TotalWeight = bundleItems.Sum(b => b.TotalWeight),
                            ItemCount = bundleItems.Count
                        };
                        
                        dbContext.PackBundles.Add(bundle);
                        await dbContext.SaveChangesAsync();
                        
                        // Select the parent (heaviest item)
                        var parent = bundleItems.OrderByDescending(b => b.TotalWeight).First();
                        
                        // Update all items to reference the bundle
                        foreach (var item in bundleItems)
                        {
                            item.PackBundleId = bundle.Id;
                            item.IsParentInPackBundle = (item.Id == parent.Id);
                        }
                        
                        bundlesCreated++;
                        itemsBundled += bundleItems.Count;
                        nextBundleNumber++;
                    }
                }
            }
            
            // Save all changes
            await dbContext.SaveChangesAsync();
            
            // Reload worksheet items
            await LoadWorksheetItems();
            
            // Update session tracking instead of closing modal
            bulkPackBundleSessionBundlesCreated += bundlesCreated;
            bulkPackBundleSessionItemsBundled += itemsBundled;
            
            // Add success message to session
            var sessionMessage = $"✓ Created {bundlesCreated} pack bundles with {itemsBundled} items";
            bulkPackBundleSessionMessages.Add(sessionMessage);
            
            // Show inline alert but keep modal open
            _alertMessage = sessionMessage;
            _alertType = "success";
            _showAlert = true;
            
            // Clear filters for next bundle creation
            bulkPackBundleDescriptionFilter = "";
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error creating bulk pack bundles: {ex.Message}");
            _alertMessage = "Error creating pack bundles. Please try again.";
            _alertType = "danger";
            _showAlert = true;
        }
    }
    
    private void ShowUnbundleAllPackConfirmation()
    {
        _confirmMessage = "Are you sure you want to remove all pack bundles? This will unpack all items.";
        _pendingConfirmAction = async () => await UnbundleAllPack();
        _showConfirmation = true;
    }
    
    private async Task UnbundleAllPack()
    {
        try
        {
            using var dbContext = await DbContextFactory.CreateDbContextAsync();
            
            // Get all pack bundles for this package
            var allBundles = await dbContext.PackBundles
                .Where(b => b.PackageId == PackageId)
                .ToListAsync();
            
            // Get all items with pack bundles
            var allBundledItems = await dbContext.ProcessingItems
                .Where(p => p.PackageWorksheet != null && 
                           p.PackageWorksheet.PackageId == PackageId && 
                           p.PackBundleId != null)
                .ToListAsync();
            
            // Clear bundle references
            foreach (var item in allBundledItems)
            {
                item.PackBundleId = null;
                item.IsParentInPackBundle = false;
            }
            
            await dbContext.SaveChangesAsync();
            
            // Delete all bundles
            dbContext.PackBundles.RemoveRange(allBundles);
            await dbContext.SaveChangesAsync();
            
            await LoadWorksheetItems();
            
            _alertMessage = $"Successfully removed {allBundles.Count} pack bundles and unpacked {allBundledItems.Count} items.";
            _alertType = "success";
            _showAlert = true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error removing all pack bundles: {ex.Message}");
            _alertMessage = $"Error removing all pack bundles: {ex.Message}";
            _alertType = "danger";
            _showAlert = true;
        }
    }
    
    private List<ProcessingItem> GetVisibleProcessingItems()
    {
        var items = filteredProcessingItems;
        
        // Filter out collapsed delivery bundle children
        if (collapsedBundles.Any())
        {
            items = items.Where(item => 
                item.DeliveryBundleId == null || 
                item.IsParentInBundle || 
                !collapsedBundles.Contains(item.DeliveryBundleId.Value)
            ).ToList();
        }
        
        // Filter out collapsed pack bundle children
        if (collapsedPackBundles.Any())
        {
            items = items.Where(item => 
                item.PackBundleId == null || 
                item.IsParentInPackBundle || 
                !collapsedPackBundles.Contains(item.PackBundleId.Value)
            ).ToList();
        }
        
        return items;
    }
    
    private List<ProcessingItem> GetItemsByMaterialType(string materialType)
    {
        return materialType switch
        {
            "beams" => processingItems.Where(p => IsBeamMaterial(p.MaterialId)).ToList(),
            "plates" => processingItems.Where(p => IsPlateMaterial(p.MaterialId)).ToList(),
            "purlins" => processingItems.Where(p => IsPurlinMaterial(p.MaterialId)).ToList(),
            "misc" => processingItems.Where(p => !string.IsNullOrEmpty(p.MaterialId) && 
                !IsBeamMaterial(p.MaterialId) && !IsPlateMaterial(p.MaterialId) && !IsPurlinMaterial(p.MaterialId)).ToList(),
            _ => new List<ProcessingItem>()
        };
    }
    
    private async Task SaveBulkUpdate()
    {
        await ApplyBulkUpdateInternal(false);
    }
    
    private async Task ApplyBulkUpdate()
    {
        await ApplyBulkUpdateInternal(true);
    }
    
    private async Task ApplyBulkUpdateInternal(bool closeModal)
    {
        try
        {
            using var dbContext = await DbContextFactory.CreateDbContextAsync();
            
            // Determine which items to update
            List<ProcessingItem> itemsToUpdate = bulkUpdateScope switch
            {
                "selected" => processingItems.Where(p => selectedItems.Contains(p.Id)).ToList(),
                "bundle" => processingItems.Where(p => p.DeliveryBundleId == selectedBundleId).ToList(),
                "type" => GetItemsByMaterialType(selectedMaterialType ?? "").ToList(),
                _ => processingItems
            };
            
            if (!itemsToUpdate.Any())
            {
                _alertMessage = "No items to update.";
                _showAlert = true;
                return;
            }
            
            // Apply updates
            var dbItemIds = itemsToUpdate.Select(i => i.Id).ToList();
            var dbItems = await dbContext.ProcessingItems
                .Where(p => dbItemIds.Contains(p.Id))
                .ToListAsync();
            
            foreach (var dbItem in dbItems)
            {
                var localItem = itemsToUpdate.First(i => i.Id == dbItem.Id);
                
                if (bulkUpdateFields.UnloadTime && (dbItem.DeliveryBundleId == null || dbItem.IsParentInBundle))
                {
                    dbItem.UnloadTimePerBundle = bulkUpdateValues.UnloadTime;
                    localItem.UnloadTimePerBundle = bulkUpdateValues.UnloadTime;
                }
                    
                if (bulkUpdateFields.MarkMeasureCut)
                {
                    dbItem.MarkMeasureCut = bulkUpdateValues.MarkMeasureCut;
                    localItem.MarkMeasureCut = bulkUpdateValues.MarkMeasureCut;
                }
                    
                if (bulkUpdateFields.QualityCheck)
                {
                    dbItem.QualityCheckClean = bulkUpdateValues.QualityCheck;
                    localItem.QualityCheckClean = bulkUpdateValues.QualityCheck;
                }
                    
                if (bulkUpdateFields.MoveToAssembly)
                {
                    dbItem.MoveToAssembly = bulkUpdateValues.MoveToAssembly;
                    localItem.MoveToAssembly = bulkUpdateValues.MoveToAssembly;
                }
                    
                if (bulkUpdateFields.MoveAfterWeld)
                {
                    dbItem.MoveAfterWeld = bulkUpdateValues.MoveAfterWeld;
                    localItem.MoveAfterWeld = bulkUpdateValues.MoveAfterWeld;
                }
                    
                if (bulkUpdateFields.LoadingTime)
                {
                    dbItem.LoadingTimePerBundle = bulkUpdateValues.LoadingTime;
                    localItem.LoadingTimePerBundle = bulkUpdateValues.LoadingTime;
                }
                
                dbItem.LastModified = DateTime.UtcNow;
            }
            
            await dbContext.SaveChangesAsync();
            
            // Update change tracking
            totalItemsModified += itemsToUpdate.Count;
            updatesSaved++;
            currentTotalHours = CalculateTotalHandlingTime();
            
            // Add to change history
            var changeDescription = $"Update #{updatesSaved}: Modified {itemsToUpdate.Count} items ({GetScopeDescription()})";
            changeHistory.Add(changeDescription);
            
            if (closeModal)
            {
                _showBulkUpdateModal = false;
                _alertMessage = $"Successfully updated {itemsToUpdate.Count} items. Total changes: {totalItemsModified} items modified, {currentTotalHours - originalTotalHours:+0.0;-0.0;0} hours change.";
            }
            else
            {
                _alertMessage = $"Saved! Updated {itemsToUpdate.Count} items.";
            }
            _showAlert = true;
            
            // Reset form fields for next update
            bulkUpdateFields = new();
            bulkUpdateValues = new();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error applying bulk update: {ex.Message}");
            _alertMessage = "Error applying updates. Please try again.";
            _showAlert = true;
        }
    }
    
    private string GetScopeDescription()
    {
        return bulkUpdateScope switch
        {
            "selected" => "selected items",
            "bundle" => $"bundle {deliveryBundles.FirstOrDefault(b => b.Id == selectedBundleId)?.BundleNumber ?? ""}",
            "type" => selectedMaterialType ?? "all types",
            _ => "all items"
        };
    }
    
    private (int itemCount, decimal hoursChange) GetPreviewChanges()
    {
        // Get items that would be affected
        List<ProcessingItem> itemsToUpdate = bulkUpdateScope switch
        {
            "selected" => processingItems.Where(p => selectedItems.Contains(p.Id)).ToList(),
            "bundle" => processingItems.Where(p => p.DeliveryBundleId == selectedBundleId).ToList(),
            "type" => GetItemsByMaterialType(selectedMaterialType ?? "").ToList(),
            _ => processingItems
        };
        
        if (!itemsToUpdate.Any())
            return (0, 0);
        
        decimal hoursChange = 0;
        
        foreach (var item in itemsToUpdate)
        {
            if (bulkUpdateFields.UnloadTime && (item.DeliveryBundleId == null || item.IsParentInBundle))
            {
                hoursChange += (bulkUpdateValues.UnloadTime - item.UnloadTimePerBundle) / 60m;
            }
            
            if (bulkUpdateFields.MarkMeasureCut)
            {
                hoursChange += (bulkUpdateValues.MarkMeasureCut - item.MarkMeasureCut) * item.Quantity / 60m;
            }
            
            if (bulkUpdateFields.QualityCheck)
            {
                hoursChange += (bulkUpdateValues.QualityCheck - item.QualityCheckClean) * item.Quantity / 60m;
            }
            
            if (bulkUpdateFields.MoveToAssembly)
            {
                hoursChange += (bulkUpdateValues.MoveToAssembly - item.MoveToAssembly) * item.Quantity / 60m;
            }
            
            if (bulkUpdateFields.MoveAfterWeld)
            {
                hoursChange += (bulkUpdateValues.MoveAfterWeld - item.MoveAfterWeld) * item.Quantity / 60m;
            }
            
            if (bulkUpdateFields.LoadingTime)
            {
                hoursChange += (bulkUpdateValues.LoadingTime - item.LoadingTimePerBundle) / 60m;
            }
        }
        
        return (itemsToUpdate.Count, hoursChange);
    }
    
    private async Task ExecuteAutoBundling()
    {
        try
        {
            using var dbContext = await DbContextFactory.CreateDbContextAsync();
            
            // Get unbundled items with quantity > 0
            var availableItems = processingItems
                .Where(p => p.Quantity > 0 && p.DeliveryBundleId == null)
                .OrderByDescending(p => p.TotalWeight)
                .ToList();
                
            if (!availableItems.Any())
            {
                _alertMessage = "No items available for bundling.";
                _showAlert = true;
                return;
            }
            
            var itemGroups = new List<List<ProcessingItem>>();
            
            if (separateByType)
            {
                // Group by material type
                var beams = availableItems.Where(p => IsBeamMaterial(p.MaterialId)).ToList();
                var plates = availableItems.Where(p => IsPlateMaterial(p.MaterialId)).ToList();
                var purlins = availableItems.Where(p => IsPurlinMaterial(p.MaterialId)).ToList();
                var misc = availableItems.Where(p => !string.IsNullOrEmpty(p.MaterialId) && 
                    !IsBeamMaterial(p.MaterialId) && !IsPlateMaterial(p.MaterialId) && !IsPurlinMaterial(p.MaterialId)).ToList();
                
                // Further group beams by description if required
                if (groupSimilarBeams && beams.Any())
                {
                    var beamGroups = beams.GroupBy(b => b.Description ?? "").Select(g => g.ToList());
                    itemGroups.AddRange(beamGroups);
                }
                else if (beams.Any())
                {
                    itemGroups.Add(beams);
                }
                
                if (plates.Any()) itemGroups.Add(plates);
                if (purlins.Any()) itemGroups.Add(purlins);
                if (misc.Any()) itemGroups.Add(misc);
            }
            else
            {
                // All items in one group
                itemGroups.Add(availableItems);
            }
            
            // Apply greedy algorithm to each group
            var bundlesCreated = 0;
            foreach (var group in itemGroups)
            {
                var bundles = CreateBundlesForGroup(group, maxBundleWeight);
                
                foreach (var bundle in bundles)
                {
                    if (bundle.Count == 0) continue;
                    
                    // Generate bundle number
                    var bundleNumber = await GenerateBundleNumber();
                    
                    // Create delivery bundle
                    var deliveryBundle = new DeliveryBundle
                    {
                        PackageId = PackageId,
                        BundleNumber = bundleNumber,
                        BundleName = $"Auto Bundle {bundlesCreated + 1}",
                        TotalWeight = bundle.Sum(i => i.TotalWeight),
                        ItemCount = bundle.Count,
                        CreatedDate = DateTime.UtcNow,
                        LastModified = DateTime.UtcNow
                    };
                    
                    dbContext.DeliveryBundles.Add(deliveryBundle);
                    await dbContext.SaveChangesAsync();
                    
                    // Update items
                    var isFirst = true;
                    foreach (var item in bundle)
                    {
                        item.DeliveryBundleId = deliveryBundle.Id;
                        item.IsParentInBundle = isFirst;
                        isFirst = false;
                    }
                    
                    bundlesCreated++;
                }
            }
            
            await dbContext.SaveChangesAsync();
            
            // Clear any selection state
            selectedItems.Clear();
            
            // Force a clean state before reloading
            processingItems.Clear();
            StateHasChanged();
            await Task.Delay(50);
            
            // Reload the data fresh
            await LoadWorksheetItems();
            
            // Force complete UI refresh to prevent column shifting
            StateHasChanged();
            await Task.Delay(150);
            await JSRuntime.InvokeVoidAsync("safeCall", "initializeWorksheetTables");
            
            _showAutoBundleModal = false;
            _alertMessage = $"Successfully created {bundlesCreated} bundles.";
            _showAlert = true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error executing auto bundling: {ex.Message}");
            _alertMessage = "Error creating bundles. Please try again.";
            _showAlert = true;
        }
    }
    
    private List<List<ProcessingItem>> CreateBundlesForGroup(List<ProcessingItem> items, decimal maxWeight)
    {
        var bundles = new List<List<ProcessingItem>>();
        var remainingItems = new List<ProcessingItem>(items);
        
        while (remainingItems.Any())
        {
            var bundle = new List<ProcessingItem>();
            decimal currentWeight = 0;
            
            // Greedy algorithm: add items that fit
            for (int i = remainingItems.Count - 1; i >= 0; i--)
            {
                var item = remainingItems[i];
                if (currentWeight + item.TotalWeight <= maxWeight)
                {
                    bundle.Add(item);
                    currentWeight += item.TotalWeight;
                    remainingItems.RemoveAt(i);
                }
            }
            
            // If no items could be added (all too heavy), take the lightest one
            if (bundle.Count == 0 && remainingItems.Any())
            {
                var lightestItem = remainingItems.OrderBy(i => i.TotalWeight).First();
                bundle.Add(lightestItem);
                remainingItems.Remove(lightestItem);
            }
            
            if (bundle.Any())
            {
                bundles.Add(bundle);
            }
        }
        
        return bundles;
    }
    
    private async Task ApplyCopyTimeSettings()
    {
        if (!selectedCopyPackageId.HasValue) return;
        
        try
        {
            using var dbContext = await DbContextFactory.CreateDbContextAsync();
            
            // Determine which fields to copy
            var fieldsToCopy = copyAllFields ? new BulkUpdateFieldsModel
            {
                UnloadTime = true,
                MarkMeasureCut = true,
                QualityCheck = true,
                MoveToAssembly = true,
                MoveAfterWeld = true,
                LoadingTime = true
            } : copyFields;
            
            if (copyDirection == "from")
            {
                // Copy FROM another package to this worksheet
                var sourceWorksheet = await dbContext.PackageWorksheets
                    .Include(w => w.ProcessingItems)
                    .FirstOrDefaultAsync(w => w.PackageId == selectedCopyPackageId.Value && 
                                            w.WorksheetType == WorksheetTypes.Processing);
                                            
                if (sourceWorksheet == null || !sourceWorksheet.ProcessingItems.Any())
                {
                    _alertMessage = "No processing items found in the selected package.";
                    _showAlert = true;
                    return;
                }
                
                // Get average values from source
                var sourceItems = sourceWorksheet.ProcessingItems.Where(p => p.Quantity > 0).ToList();
                if (!sourceItems.Any())
                {
                    _alertMessage = "No non-blank items found in the selected package.";
                    _showAlert = true;
                    return;
                }
                
                var avgValues = new BulkUpdateValuesModel
                {
                    UnloadTime = (int)Math.Round(sourceItems.Average(p => p.UnloadTimePerBundle)),
                    MarkMeasureCut = (int)Math.Round(sourceItems.Average(p => p.MarkMeasureCut)),
                    QualityCheck = (int)Math.Round(sourceItems.Average(p => p.QualityCheckClean)),
                    MoveToAssembly = (int)Math.Round(sourceItems.Average(p => p.MoveToAssembly)),
                    MoveAfterWeld = (int)Math.Round(sourceItems.Average(p => p.MoveAfterWeld)),
                    LoadingTime = (int)Math.Round(sourceItems.Average(p => p.LoadingTimePerBundle))
                };
                
                // Apply to current worksheet
                foreach (var item in processingItems)
                {
                    if (fieldsToCopy.UnloadTime && (item.DeliveryBundleId == null || item.IsParentInBundle))
                        item.UnloadTimePerBundle = avgValues.UnloadTime;
                    if (fieldsToCopy.MarkMeasureCut)
                        item.MarkMeasureCut = avgValues.MarkMeasureCut;
                    if (fieldsToCopy.QualityCheck)
                        item.QualityCheckClean = avgValues.QualityCheck;
                    if (fieldsToCopy.MoveToAssembly)
                        item.MoveToAssembly = avgValues.MoveToAssembly;
                    if (fieldsToCopy.MoveAfterWeld)
                        item.MoveAfterWeld = avgValues.MoveAfterWeld;
                    if (fieldsToCopy.LoadingTime)
                        item.LoadingTimePerBundle = avgValues.LoadingTime;
                }
                
                await dbContext.SaveChangesAsync();
                _alertMessage = $"Successfully copied time settings from package to this worksheet.";
            }
            else
            {
                // Copy TO another package from this worksheet
                var targetWorksheet = await dbContext.PackageWorksheets
                    .Include(w => w.ProcessingItems)
                    .FirstOrDefaultAsync(w => w.PackageId == selectedCopyPackageId.Value && 
                                            w.WorksheetType == WorksheetTypes.Processing);
                                            
                if (targetWorksheet == null)
                {
                    _alertMessage = "Target package worksheet not found.";
                    _showAlert = true;
                    return;
                }
                
                // Get average values from current worksheet
                var sourceItems = processingItems.Where(p => p.Quantity > 0).ToList();
                if (!sourceItems.Any())
                {
                    _alertMessage = "No non-blank items in current worksheet.";
                    _showAlert = true;
                    return;
                }
                
                var avgValues = new BulkUpdateValuesModel
                {
                    UnloadTime = (int)Math.Round(sourceItems.Average(p => p.UnloadTimePerBundle)),
                    MarkMeasureCut = (int)Math.Round(sourceItems.Average(p => p.MarkMeasureCut)),
                    QualityCheck = (int)Math.Round(sourceItems.Average(p => p.QualityCheckClean)),
                    MoveToAssembly = (int)Math.Round(sourceItems.Average(p => p.MoveToAssembly)),
                    MoveAfterWeld = (int)Math.Round(sourceItems.Average(p => p.MoveAfterWeld)),
                    LoadingTime = (int)Math.Round(sourceItems.Average(p => p.LoadingTimePerBundle))
                };
                
                // Apply to target worksheet
                foreach (var item in targetWorksheet.ProcessingItems)
                {
                    if (fieldsToCopy.UnloadTime && (item.DeliveryBundleId == null || item.IsParentInBundle))
                        item.UnloadTimePerBundle = avgValues.UnloadTime;
                    if (fieldsToCopy.MarkMeasureCut)
                        item.MarkMeasureCut = avgValues.MarkMeasureCut;
                    if (fieldsToCopy.QualityCheck)
                        item.QualityCheckClean = avgValues.QualityCheck;
                    if (fieldsToCopy.MoveToAssembly)
                        item.MoveToAssembly = avgValues.MoveToAssembly;
                    if (fieldsToCopy.MoveAfterWeld)
                        item.MoveAfterWeld = avgValues.MoveAfterWeld;
                    if (fieldsToCopy.LoadingTime)
                        item.LoadingTimePerBundle = avgValues.LoadingTime;
                }
                
                await dbContext.SaveChangesAsync();
                _alertMessage = $"Successfully copied time settings to the selected package.";
            }
            
            _showBulkUpdateModal = false;
            _showAlert = true;
            
            // Reset form
            copyFields = new();
            copyAllFields = false;
            copyDirection = "from";
            selectedCopyPackageId = null;
            bulkOperationTab = "update";
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error copying time settings: {ex.Message}");
            _alertMessage = "Error copying time settings. Please try again.";
            _showAlert = true;
        }
    }
    
    // Undo/Redo functionality
    private async Task UndoLastChange()
    {
        if (activeWorksheet != null && currentUserId.HasValue)
        {
            var success = await WorksheetChangeService.UndoAsync(activeWorksheet.Id, currentUserId.Value);
            if (success)
            {
                await LoadWorksheetItems();
                await UpdateUndoRedoState();
            }
        }
    }
    
    private async Task RedoLastChange()
    {
        if (activeWorksheet != null && currentUserId.HasValue)
        {
            var success = await WorksheetChangeService.RedoAsync(activeWorksheet.Id, currentUserId.Value);
            if (success)
            {
                await LoadWorksheetItems();
                await UpdateUndoRedoState();
            }
        }
    }
    
    private async Task UpdateUndoRedoState()
    {
        if (activeWorksheet != null && currentUserId.HasValue)
        {
            var lastChange = await WorksheetChangeService.GetLastChangeAsync(activeWorksheet.Id, currentUserId.Value);
            canUndo = lastChange != null;
            
            // Check if there are any undone changes that can be redone
            using var dbContext = await DbContextFactory.CreateDbContextAsync();
            var changes = await dbContext.WorksheetChanges
                .Where(c => c.PackageWorksheetId == activeWorksheet.Id && 
                           c.UserId == currentUserId.Value && 
                           c.IsUndone)
                .OrderByDescending(c => c.Timestamp)
                .FirstOrDefaultAsync();
            
            canRedo = changes != null;
            
            StateHasChanged();
        }
    }
    
    // Static methods for JavaScript interop
    [JSInvokable]
    public static Task UndoLastChangeStatic()
    {
        // This would need to be handled by a singleton service or similar
        // For now, just log it
        Console.WriteLine("Undo requested via keyboard shortcut");
        return Task.CompletedTask;
    }
    
    [JSInvokable]
    public static Task RedoLastChangeStatic()
    {
        // This would need to be handled by a singleton service or similar
        // For now, just log it
        Console.WriteLine("Redo requested via keyboard shortcut");
        return Task.CompletedTask;
    }
    
    private class BulkUpdateFieldsModel
    {
        public bool UnloadTime { get; set; }
        public bool MarkMeasureCut { get; set; }
        public bool QualityCheck { get; set; }
        public bool MoveToAssembly { get; set; }
        public bool MoveAfterWeld { get; set; }
        public bool LoadingTime { get; set; }
    }
    
    private class BulkUpdateValuesModel
    {
        public int UnloadTime { get; set; } = 15;
        public int MarkMeasureCut { get; set; } = 30;
        public int QualityCheck { get; set; } = 15;
        public int MoveToAssembly { get; set; } = 20;
        public int MoveAfterWeld { get; set; } = 20;
        public int LoadingTime { get; set; } = 15;
    }
    
    // Bulk delete methods
    private void ShowBulkDeleteConfirmation()
    {
        // Reset to selected scope if there are selected items
        if (selectedItems.Any())
        {
            bulkDeleteScope = "selected";
        }
        else if (filteredProcessingItems.Count != processingItems.Count)
        {
            bulkDeleteScope = "filtered";
        }
        else
        {
            bulkDeleteScope = "blank";
        }
        
        deleteByMaterialType = null;
        _showBulkDeleteModal = true;
    }
    
    private int GetDeleteCount()
    {
        return bulkDeleteScope switch
        {
            "selected" => selectedItems.Count,
            "filtered" => filteredProcessingItems.Count,
            "blank" => processingItems.Count(p => p.Quantity == 0),
            "type" => deleteByMaterialType switch
            {
                "beams" => processingItems.Count(p => IsBeamMaterial(p.MaterialId)),
                "plates" => processingItems.Count(p => IsPlateMaterial(p.MaterialId)),
                "purlins" => processingItems.Count(p => IsPurlinMaterial(p.MaterialId)),
                "misc" => processingItems.Count(p => !string.IsNullOrEmpty(p.MaterialId) && 
                    !IsBeamMaterial(p.MaterialId) && !IsPlateMaterial(p.MaterialId) && !IsPurlinMaterial(p.MaterialId)),
                _ => 0
            },
            _ => 0
        };
    }
    
    private async Task ExecuteBulkDelete()
    {
        try
        {
            using var dbContext = await DbContextFactory.CreateDbContextAsync();
            
            List<ProcessingItem> itemsToDelete = bulkDeleteScope switch
            {
                "selected" => processingItems.Where(p => selectedItems.Contains(p.Id)).ToList(),
                "filtered" => filteredProcessingItems.ToList(),
                "blank" => processingItems.Where(p => p.Quantity == 0).ToList(),
                "type" => deleteByMaterialType switch
                {
                    "beams" => processingItems.Where(p => IsBeamMaterial(p.MaterialId)).ToList(),
                    "plates" => processingItems.Where(p => IsPlateMaterial(p.MaterialId)).ToList(),
                    "purlins" => processingItems.Where(p => IsPurlinMaterial(p.MaterialId)).ToList(),
                    "misc" => processingItems.Where(p => !string.IsNullOrEmpty(p.MaterialId) && 
                        !IsBeamMaterial(p.MaterialId) && !IsPlateMaterial(p.MaterialId) && !IsPurlinMaterial(p.MaterialId)).ToList(),
                    _ => new List<ProcessingItem>()
                },
                _ => new List<ProcessingItem>()
            };
            
            if (!itemsToDelete.Any())
            {
                _alertMessage = "No items to delete.";
                _showAlert = true;
                return;
            }
            
            // Remove items from database
            dbContext.ProcessingItems.RemoveRange(itemsToDelete);
            await dbContext.SaveChangesAsync();
            
            // Reload items
            await LoadWorksheetItems();
            
            // Clear selection
            selectedItems.Clear();
            
            _showBulkDeleteModal = false;
            _alertMessage = $"Successfully deleted {itemsToDelete.Count} items.";
            _showAlert = true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error executing bulk delete: {ex.Message}");
            _alertMessage = "Error deleting items. Please try again.";
            _showAlert = true;
        }
    }
    
    // Column visibility methods
    private async void ShowAllColumns()
    {
        foreach (var key in columnVisibility.Keys.ToList())
        {
            columnVisibility[key] = true;
        }
        StateHasChanged();
        
        // Update frozen column positions after visibility change
        await Task.Delay(100); // Allow DOM to update
        await UpdateFrozenColumnPositions();
    }
    
    private async void HideTimeColumns()
    {
        columnVisibility["UnloadTime"] = false;
        columnVisibility["MarkMeasureCut"] = false;
        columnVisibility["QualityCheck"] = false;
        columnVisibility["MoveToAssembly"] = false;
        columnVisibility["MoveAfterWeld"] = false;
        columnVisibility["LoadingTime"] = false;
        StateHasChanged();
        
        // Update frozen column positions after visibility change
        await Task.Delay(100); // Allow DOM to update
        await UpdateFrozenColumnPositions();
    }
    
    private async Task UpdateFrozenColumnPositions()
    {
        try
        {
            // Add a delay to ensure DOM is updated
            await Task.Delay(150);
            
            // First initialize tables if needed
            await JSRuntime.InvokeVoidAsync("safeCall", "initializeWorksheetTables");
            
            // Then update frozen columns
            await JSRuntime.InvokeVoidAsync("safeCall", "updateFrozenColumns");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating frozen column positions: {ex.Message}");
        }
    }
    
    // Unbundle all methods
    private void ShowUnbundleAllConfirmation()
    {
        if (!deliveryBundles.Any())
        {
            _alertMessage = "No bundles to unbundle.";
            _showAlert = true;
            return;
        }
        
        _showUnbundleAllModal = true;
    }
    
    private async Task ExecuteUnbundleAll()
    {
        try
        {
            using var dbContext = await DbContextFactory.CreateDbContextAsync();
            
            // Get all bundled items
            var bundledItems = processingItems.Where(p => p.DeliveryBundleId != null).ToList();
            
            if (!bundledItems.Any())
            {
                _alertMessage = "No items to unbundle.";
                _showAlert = true;
                _showUnbundleAllModal = false;
                return;
            }
            
            // Remove bundle association from all items
            foreach (var item in bundledItems)
            {
                item.DeliveryBundleId = null;
                item.IsParentInBundle = false;
            }
            
            // Get all bundles and remove them
            var bundlesToRemove = await dbContext.DeliveryBundles
                .Where(b => b.PackageId == PackageId)
                .ToListAsync();
                
            dbContext.DeliveryBundles.RemoveRange(bundlesToRemove);
            
            // Save changes
            await dbContext.SaveChangesAsync();
            
            // Reload data to refresh the UI
            await LoadWorksheetItems();
            
            // Clear collapsed bundles
            collapsedBundles.Clear();
            
            _showUnbundleAllModal = false;
            _alertMessage = $"Successfully unbundled {bundledItems.Count} items from {bundlesToRemove.Count} bundles.";
            _showAlert = true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error unbundling all items: {ex.Message}");
            _alertMessage = "Error unbundling items. Please try again.";
            _showAlert = true;
        }
    }
    
    // Column visibility methods
    private async Task ToggleColumnSelector()
    {
        if (!_showColumnSelector)
        {
            _showColumnSelector = true;
            StateHasChanged();
            
            // Setup click outside handler after rendering
            await Task.Delay(100);
            await SetupColumnSelectorClickOutside();
        }
        else
        {
            await CloseColumnSelector();
        }
    }
    
    private async Task SetupColumnSelectorClickOutside()
    {
        if (objRef == null)
        {
            objRef = DotNetObjectReference.Create(this);
        }
        
        try
        {
            await JSRuntime.InvokeVoidAsync("setupClickOutside", columnSelectorElement, objRef);
            // Position the dropdown properly
            await JSRuntime.InvokeVoidAsync("positionDropdown", columnSelectorElement);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error setting up click outside handler: {ex.Message}");
        }
    }
    
    private async Task CloseColumnSelector()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("cleanupClickOutside", columnSelectorElement);
        }
        catch { }
        
        _showColumnSelector = false;
        await SaveColumnVisibility();
        StateHasChanged();
    }
    
    [JSInvokable]
    public void CloseDropdown()
    {
        if (_showColumnSelector)
        {
            _ = CloseColumnSelector();
        }
    }
    
    private async Task SaveColumnVisibility()
    {
        // Force table re-initialization to handle frozen columns with new visibility
        await Task.Delay(100);
        await JSRuntime.InvokeVoidAsync("initializeWorksheetTables");
    }
    
    private async Task ToggleFrozenColumn(string columnKey)
    {
        // Toggle the frozen state
        if (frozenColumns.ContainsKey(columnKey))
        {
            frozenColumns[columnKey] = !frozenColumns[columnKey];
        }
        else
        {
            frozenColumns[columnKey] = true;
        }
        
        Console.WriteLine($"Toggled frozen column {columnKey} to {frozenColumns[columnKey]}");
        
        // Update UI
        StateHasChanged();
        
        // Update frozen column positions after change
        await Task.Delay(100); // Allow DOM to update
        await UpdateFrozenColumnPositions();
        
        // Save frozen column preferences
        await SaveFrozenColumnPreferences();
    }
    
    private async Task SaveFrozenColumnPreferences()
    {
        try
        {
            if (package != null)
            {
                var key = $"worksheet-frozen-columns-{package.Id}";
                await JSRuntime.InvokeVoidAsync("localStorage.setItem", key, JsonConvert.SerializeObject(frozenColumns));
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving frozen column preferences: {ex.Message}");
        }
    }
    
    private async Task LoadFrozenColumnPreferences()
    {
        try
        {
            if (package != null)
            {
                var key = $"worksheet-frozen-columns-{package.Id}";
                var json = await JSRuntime.InvokeAsync<string>("localStorage.getItem", key);
                if (!string.IsNullOrEmpty(json))
                {
                    var saved = JsonConvert.DeserializeObject<Dictionary<string, bool>>(json);
                    if (saved != null)
                    {
                        // Update frozen columns with saved preferences
                        foreach (var kvp in saved)
                        {
                            if (frozenColumns.ContainsKey(kvp.Key))
                            {
                                frozenColumns[kvp.Key] = kvp.Value;
                            }
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading frozen column preferences: {ex.Message}");
        }
    }
    
    private async Task UpdateAllConnectionQuantities(WeldingItem item, ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var newQuantity))
        {
            using var dbContext = await DbContextFactory.CreateDbContextAsync();
            
            // Get the connections from the database to ensure they're tracked
            var connections = await dbContext.WeldingItemConnections
                .Where(c => c.WeldingItemId == item.Id)
                .ToListAsync();
            
            // Update all connections with the same quantity
            foreach (var conn in connections)
            {
                conn.Quantity = newQuantity;
            }
            
            // Save changes
            await dbContext.SaveChangesAsync();
            
            // Update the local collection
            foreach (var conn in item.ItemConnections)
            {
                conn.Quantity = newQuantity;
            }
            
            StateHasChanged();
        }
    }
    
    private async Task UpdateConnectionTime(WeldingItemConnection connection, string fieldName, ChangeEventArgs e)
    {
        if (decimal.TryParse(e.Value?.ToString(), out var newValue))
        {
            using var dbContext = await DbContextFactory.CreateDbContextAsync();
            
            // Get the connection from the database to ensure it's tracked
            var dbConnection = await dbContext.WeldingItemConnections.FindAsync(connection.Id);
            if (dbConnection != null)
            {
                switch (fieldName)
                {
                    case "AssembleFitTack":
                        dbConnection.AssembleFitTack = newValue;
                        connection.AssembleFitTack = newValue;
                        break;
                    case "Weld":
                        dbConnection.Weld = newValue;
                        connection.Weld = newValue;
                        break;
                    case "WeldCheck":
                        dbConnection.WeldCheck = newValue;
                        connection.WeldCheck = newValue;
                        break;
                }
                
                // Save changes
                await dbContext.SaveChangesAsync();
                StateHasChanged();
            }
        }
    }
    
    private Task DeleteWeldingImage(WeldingItem weldingItem, ImageUpload image)
    {
        _confirmMessage = $"Are you sure you want to delete this image?";
        _showConfirmation = true;
        _pendingConfirmAction = async () =>
        {
            try
            {
                using var dbContext = await DbContextFactory.CreateDbContextAsync();
                
                // Get the image from the database to ensure it's tracked with current RowVersion
                var imageToDelete = await dbContext.ImageUploads
                    .AsNoTracking()
                    .FirstOrDefaultAsync(i => i.Id == image.Id);
                    
                if (imageToDelete != null)
                {
                    try
                    {
                        // Delete the physical file first
                        await ImageUploadService.DeleteImageAsync(image.Id);
                    }
                    catch (Exception fileEx)
                    {
                        // Log file deletion error but continue with database deletion
                        Console.WriteLine($"Warning: Could not delete physical file: {fileEx.Message}");
                    }
                    
                    // Attach and remove from database
                    dbContext.ImageUploads.Attach(imageToDelete);
                    dbContext.ImageUploads.Remove(imageToDelete);
                    
                    try
                    {
                        await dbContext.SaveChangesAsync();
                        
                        // Remove from the collection only after successful database deletion
                        weldingItem.Images.Remove(image);
                        
                        _alertMessage = "Image deleted successfully.";
                        _alertType = "success";
                        _showAlert = true;
                    }
                    catch (DbUpdateConcurrencyException)
                    {
                        // Handle concurrency - the image was already deleted
                        weldingItem.Images.Remove(image);
                        _alertMessage = "Image was already deleted.";
                        _alertType = "info";
                        _showAlert = true;
                    }
                }
                else
                {
                    // Image not in database, just remove from collection
                    weldingItem.Images.Remove(image);
                    _alertMessage = "Image reference removed.";
                    _alertType = "info";
                    _showAlert = true;
                }
                
                StateHasChanged();
            }
            catch (Exception ex)
            {
                _alertMessage = $"Error deleting image: {ex.Message}";
                _alertType = "danger";
                _showAlert = true;
            }
        };
        return Task.CompletedTask;
    }
    
    public void Dispose()
    {
        objRef?.Dispose();
        _dotNetHelper?.Dispose();
        timeTracker?.Dispose();
        
        // Reset initialization flag
        _isColumnReorderInitialized = false;
        
        // Clean up column reordering
        try
        {
            _ = JSRuntime.InvokeVoidAsync("columnReorder.cleanup");
        }
        catch { }
        
        // Clean up bundle drag
        try
        {
            _ = JSRuntime.InvokeVoidAsync("bundleDrag.cleanup");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error cleaning up column reorder: {ex.Message}");
        }
    }
}

<ExcelImportModal @ref="_importModal" 
                  OnImportConfirmed="HandleExcelImport" 
                  OnCancel="@(() => {})" />

<ConfirmationModal IsVisible="_showConfirmation"
                   Title="Confirm Clear Worksheet"
                   Message="@_confirmMessage"
                   ConfirmText="Yes, Clear All"
                   ConfirmButtonClass="btn-danger"
                   OnConfirm="HandleConfirmation"
                   OnCancel="HandleCancelConfirmation" />

<AlertModal IsVisible="_showAlert"
            Title="Information"
            Message="@_alertMessage"
            OnClose="HandleCloseAlert" />

<MetricDetailsModal IsVisible="_showMetricDetails"
                    MetricType="@_selectedMetricType"
                    Title="@_metricTitle"
                    Items="processingItems"
                    WeldingItems="weldingItems"
                    HandlingTimeBreakdown="@(_selectedMetricType == "handling" ? GetHandlingTimeBreakdown() : null)"
                    WeldingConnectionBreakdown="@((_selectedMetricType == "welding" || _selectedMetricType == "connections") ? GetWeldingConnectionBreakdown() : null)"
                    TonneRateData="@(_selectedMetricType == "tonnerate" ? GetTonneRateData() : null)"
                    Package="@package"
                    OnClose="CloseMetricDetails" />

@if (_showMaterialMappingSummary)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="fas fa-chart-pie text-info me-2"></i>
                        Material Mapping Summary
                    </h5>
                    <button type="button" class="btn-close" @onclick="@(() => _showMaterialMappingSummary = false)"></button>
                </div>
                <div class="modal-body">
                    @{
                        var mappingSummary = GetMaterialMappingSummary();
                    }
                    
                    <div class="row mb-4">
                        <div class="col-md-6">
                            <h6 class="text-muted mb-3">Material Type Distribution</h6>
                            <div class="list-group">
                                @foreach (var type in mappingSummary.TypeCounts.OrderByDescending(x => x.Value))
                                {
                                    var percentage = processingItems?.Count > 0 ? (type.Value * 100.0 / processingItems.Count) : 0;
                                    <div class="list-group-item d-flex justify-content-between align-items-center">
                                        <span>
                                            <span class="badge bg-@GetMaterialTypeBadgeColorByName(type.Key) me-2">@type.Key</span>
                                            @type.Key
                                        </span>
                                        <div>
                                            <span class="badge bg-secondary">@type.Value items</span>
                                            <span class="text-muted small">(@percentage.ToString("N1")%)</span>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                        <div class="col-md-6">
                            <h6 class="text-muted mb-3">Mapping Statistics</h6>
                            <table class="table table-sm">
                                <tr>
                                    <td>Total Items:</td>
                                    <td class="text-end"><strong>@(processingItems?.Count ?? 0)</strong></td>
                                </tr>
                                <tr>
                                    <td>Items with Material ID:</td>
                                    <td class="text-end"><strong>@mappingSummary.ItemsWithMaterialId</strong></td>
                                </tr>
                                <tr>
                                    <td>Items without Material ID:</td>
                                    <td class="text-end"><strong>@mappingSummary.ItemsWithoutMaterialId</strong></td>
                                </tr>
                                <tr>
                                    <td>Unique Material IDs:</td>
                                    <td class="text-end"><strong>@mappingSummary.UniqueMaterialIds.Count</strong></td>
                                </tr>
                            </table>
                            
                            @if (mappingSummary.ItemsWithoutMaterialId > 0)
                            {
                                <div class="alert alert-warning small mt-3">
                                    <i class="fas fa-exclamation-triangle me-1"></i>
                                    @mappingSummary.ItemsWithoutMaterialId items have no Material ID and cannot be categorized.
                                </div>
                            }
                        </div>
                    </div>
                    
                    <h6 class="text-muted mb-3">Material ID Mappings</h6>
                    <div class="table-responsive" style="max-height: 400px; overflow-y: auto;">
                        <table class="table table-sm table-hover">
                            <thead class="sticky-top bg-white">
                                <tr>
                                    <th>Material ID</th>
                                    <th>Detected Type</th>
                                    <th>Item Count</th>
                                    <th>Total Weight (kg)</th>
                                    <th>Mapping Rule</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var material in mappingSummary.MaterialMappings.OrderBy(m => m.MaterialId))
                                {
                                    <tr>
                                        <td><code>@material.MaterialId</code></td>
                                        <td>
                                            <div class="d-flex align-items-center gap-2">
                                                <span class="badge bg-@GetMaterialTypeBadgeColorByName(material.DetectedType)">
                                                    @material.DetectedType
                                                </span>
                                                <button class="btn btn-sm btn-link p-0" @onclick="@(() => ShowChangeMaterialTypeModal(material.MaterialId))" title="Change mapping">
                                                    <i class="fas fa-edit text-primary"></i>
                                                </button>
                                            </div>
                                        </td>
                                        <td class="text-center">@material.ItemCount</td>
                                        <td class="text-end">@material.TotalWeight.ToString("N2")</td>
                                        <td class="small text-muted">@material.MappingRule</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                    
                    <div class="mt-4">
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <h6 class="text-muted mb-0">MBE ID Prefix Mappings</h6>
                            <button class="btn btn-sm btn-outline-primary" @onclick="ShowAddPrefixModal">
                                <i class="fas fa-plus"></i> Add Prefix
                            </button>
                        </div>
                        <div class="table-responsive">
                            <table class="table table-sm">
                                <thead>
                                    <tr>
                                        <th>Prefix</th>
                                        <th>Maps To</th>
                                        <th width="50"></th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var prefix in GetCurrentPrefixMappings())
                                    {
                                        <tr>
                                            <td><code>@prefix.Key</code></td>
                                            <td>
                                                <span class="badge bg-@GetMaterialTypeBadgeColorByName(prefix.Value)">
                                                    @prefix.Value
                                                </span>
                                            </td>
                                            <td>
                                                <button class="btn btn-sm btn-link text-danger p-0" @onclick="@(() => RemovePrefixMapping(prefix.Key))" title="Remove">
                                                    <i class="fas fa-trash"></i>
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                    
                    <div class="mt-3">
                        <h6 class="text-muted mb-2">Pattern Matching Rules</h6>
                        <div class="small text-muted">
                            <p class="mb-1"><strong>Beam patterns:</strong> BEAM, UB, UC, PFC, RSJ, HE, IPE, UKB, UKC</p>
                            <p class="mb-1"><strong>Plate patterns:</strong> PLATE, FL, PL, FLT, PLT, SHS, RHS</p>
                            <p class="mb-1"><strong>Purlin patterns:</strong> PURLIN, C15, C20, C25, C30, Z15, Z20, Z25, Z30</p>
                            <p class="mb-0"><strong>Misc:</strong> Everything else or no Material ID</p>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="@(() => _showMaterialMappingSummary = false)">Close</button>
                    <button type="button" class="btn btn-primary" @onclick="ExportMaterialMappingReport">
                        <i class="fas fa-download"></i> Export Report
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@if (_showChangeMaterialTypeModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Change Material Type Mapping</h5>
                    <button type="button" class="btn-close" @onclick="@(() => _showChangeMaterialTypeModal = false)"></button>
                </div>
                <div class="modal-body">
                    <p>Change the material type for all items with Material ID: <code>@_selectedMaterialIdToChange</code></p>
                    
                    <div class="mb-3">
                        <label class="form-label">New Material Type</label>
                        <select class="form-select" @bind="_newMaterialType">
                            <option value="Beam">Beam</option>
                            <option value="Plate">Plate</option>
                            <option value="Purlin">Purlin</option>
                            <option value="Misc">Miscellaneous</option>
                        </select>
                    </div>
                    
                    <div class="alert alert-info small">
                        <i class="fas fa-info-circle"></i>
                        This will update all @GetItemCountForMaterialId(_selectedMaterialIdToChange) items with this Material ID.
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="@(() => _showChangeMaterialTypeModal = false)">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="ApplyMaterialTypeChange">Apply Change</button>
                </div>
            </div>
        </div>
    </div>
}

@if (_showAddPrefixModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add MBE ID Prefix Mapping</h5>
                    <button type="button" class="btn-close" @onclick="@(() => _showAddPrefixModal = false)"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Prefix</label>
                        <input type="text" class="form-control" @bind="_newPrefix" placeholder="e.g., B, PL, PU" />
                        <small class="text-muted">Material IDs starting with this prefix will be mapped to the selected type</small>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Material Type</label>
                        <select class="form-select" @bind="_newPrefixType">
                            <option value="Beam">Beam</option>
                            <option value="Plate">Plate</option>
                            <option value="Purlin">Purlin</option>
                            <option value="Misc">Miscellaneous</option>
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="@(() => _showAddPrefixModal = false)">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="AddPrefixMapping" disabled="@string.IsNullOrWhiteSpace(_newPrefix)">Add Mapping</button>
                </div>
            </div>
        </div>
    </div>
}

@if (_showCreateBundleModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Create Delivery Bundle</h5>
                    <button type="button" class="btn-close" @onclick="@(() => _showCreateBundleModal = false)"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <p><strong>@selectedItems.Count</strong> items selected</p>
                        <p>Total weight: <strong>@GetSelectedWeight().ToString("N2")</strong> kg</p>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Bundle Name</label>
                        <input type="text" class="form-control" @bind="_newBundleName" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="@(() => _showCreateBundleModal = false)">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="CreateDeliveryBundle">Create Bundle</button>
                </div>
            </div>
        </div>
    </div>
}

@if (_showCreatePackBundleModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Create Pack Bundle</h5>
                    <button type="button" class="btn-close" @onclick="@(() => _showCreatePackBundleModal = false)"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <p><strong>@selectedItems.Count</strong> items selected</p>
                        <p>Total weight: <strong>@GetSelectedWeight().ToString("N2")</strong> kg</p>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Pack Bundle Name</label>
                        <input type="text" class="form-control" @bind="_newPackBundleName" />
                    </div>
                    <div class="alert alert-info">
                        <i class="fas fa-info-circle"></i> Pack bundles are used to group items for handling operations (Move to Assembly and Move After Weld).
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="@(() => _showCreatePackBundleModal = false)">Cancel</button>
                    <button type="button" class="btn btn-info" @onclick="CreatePackBundle">Create Pack Bundle</button>
                </div>
            </div>
        </div>
    </div>
}

@if (_showBulkUpdateModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Bulk Operations</h5>
                    <button type="button" class="btn-close" @onclick="@(() => _showBulkUpdateModal = false)"></button>
                </div>
                <div class="modal-body">
                    <ul class="nav nav-tabs mb-3">
                        <li class="nav-item">
                            <button class="nav-link @(bulkOperationTab == "update" ? "active" : "")" @onclick="@(() => bulkOperationTab = "update")">
                                <i class="fas fa-edit"></i> Update Values
                            </button>
                        </li>
                        <li class="nav-item">
                            <button class="nav-link @(bulkOperationTab == "copy" ? "active" : "")" @onclick="@(() => bulkOperationTab = "copy")">
                                <i class="fas fa-copy"></i> Copy Time Settings
                            </button>
                        </li>
                    </ul>
                    
                    @if (bulkOperationTab == "update")
                    {
                    <div class="mb-3">
                        <label class="form-label">Update Scope</label>
                        <div>
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="updateScope" id="allItems" checked="@(bulkUpdateScope == "all")" @onchange="@(() => bulkUpdateScope = "all")">
                                <label class="form-check-label" for="allItems">
                                    All items (@(processingItems?.Count ?? 0))
                                </label>
                            </div>
                            @if (selectedItems.Count > 0)
                            {
                                <div class="form-check">
                                    <input class="form-check-input" type="radio" name="updateScope" id="selectedItems" checked="@(bulkUpdateScope == "selected")" @onchange="@(() => bulkUpdateScope = "selected")">
                                    <label class="form-check-label" for="selectedItems">
                                        Selected items (@selectedItems.Count)
                                    </label>
                                </div>
                            }
                            @if (deliveryBundles.Any())
                            {
                                <div class="form-check">
                                    <input class="form-check-input" type="radio" name="updateScope" id="specificBundle" checked="@(bulkUpdateScope == "bundle")" @onchange="@(() => bulkUpdateScope = "bundle")">
                                    <label class="form-check-label" for="specificBundle">
                                        Specific bundle
                                    </label>
                                </div>
                                @if (bulkUpdateScope == "bundle")
                                {
                                    <select class="form-select form-select-sm mt-2" @bind="selectedBundleId">
                                        <option value="">Select a bundle...</option>
                                        @foreach (var bundle in deliveryBundles)
                                        {
                                            <option value="@bundle.Id">@bundle.BundleNumber - @bundle.BundleName (@bundle.ItemCount items)</option>
                                        }
                                    </select>
                                }
                            }
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="updateScope" id="byMaterialType" checked="@(bulkUpdateScope == "type")" @onchange="@(() => bulkUpdateScope = "type")">
                                <label class="form-check-label" for="byMaterialType">
                                    By material type
                                </label>
                            </div>
                            @if (bulkUpdateScope == "type")
                            {
                                <select class="form-select form-select-sm mt-2" @bind="selectedMaterialType">
                                    <option value="">Select a type...</option>
                                    <option value="beams">Beams (B, C prefix)</option>
                                    <option value="plates">Plates (PL prefix)</option>
                                    <option value="purlins">Purlins (PU prefix)</option>
                                    <option value="misc">Miscellaneous</option>
                                </select>
                            }
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Time Fields to Update</label>
                        <div class="row g-3">
                            <div class="col-md-6">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" @bind="bulkUpdateFields.UnloadTime" id="bulkUnloadTime">
                                    <label class="form-check-label" for="bulkUnloadTime">
                                        Unload Time per Bundle
                                    </label>
                                    @if (bulkUpdateFields.UnloadTime)
                                    {
                                        <input type="number" class="form-control form-control-sm mt-1" @bind="bulkUpdateValues.UnloadTime" min="0" placeholder="Minutes" />
                                    }
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" @bind="bulkUpdateFields.MarkMeasureCut" id="bulkMarkMeasureCut">
                                    <label class="form-check-label" for="bulkMarkMeasureCut">
                                        Mark/Measure/Cut
                                    </label>
                                    @if (bulkUpdateFields.MarkMeasureCut)
                                    {
                                        <input type="number" class="form-control form-control-sm mt-1" @bind="bulkUpdateValues.MarkMeasureCut" min="0" placeholder="Minutes" />
                                    }
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" @bind="bulkUpdateFields.QualityCheck" id="bulkQualityCheck">
                                    <label class="form-check-label" for="bulkQualityCheck">
                                        Quality Check/Clean
                                    </label>
                                    @if (bulkUpdateFields.QualityCheck)
                                    {
                                        <input type="number" class="form-control form-control-sm mt-1" @bind="bulkUpdateValues.QualityCheck" min="0" placeholder="Minutes" />
                                    }
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" @bind="bulkUpdateFields.MoveToAssembly" id="bulkMoveToAssembly">
                                    <label class="form-check-label" for="bulkMoveToAssembly">
                                        Move to Assembly
                                    </label>
                                    @if (bulkUpdateFields.MoveToAssembly)
                                    {
                                        <input type="number" class="form-control form-control-sm mt-1" @bind="bulkUpdateValues.MoveToAssembly" min="0" placeholder="Minutes" />
                                    }
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" @bind="bulkUpdateFields.MoveAfterWeld" id="bulkMoveAfterWeld">
                                    <label class="form-check-label" for="bulkMoveAfterWeld">
                                        Move After Weld
                                    </label>
                                    @if (bulkUpdateFields.MoveAfterWeld)
                                    {
                                        <input type="number" class="form-control form-control-sm mt-1" @bind="bulkUpdateValues.MoveAfterWeld" min="0" placeholder="Minutes" />
                                    }
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" @bind="bulkUpdateFields.LoadingTime" id="bulkLoadingTime">
                                    <label class="form-check-label" for="bulkLoadingTime">
                                        Loading Time per Bundle
                                    </label>
                                    @if (bulkUpdateFields.LoadingTime)
                                    {
                                        <input type="number" class="form-control form-control-sm mt-1" @bind="bulkUpdateValues.LoadingTime" min="0" placeholder="Minutes" />
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                    }
                    else if (bulkOperationTab == "copy")
                    {
                    <div class="mb-3">
                        <label class="form-label">Copy Direction</label>
                        <div>
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="copyDirection" id="copyFrom" checked="@(copyDirection == "from")" @onchange="@(() => copyDirection = "from")">
                                <label class="form-check-label" for="copyFrom">
                                    Copy FROM another package to this worksheet
                                </label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="copyDirection" id="copyTo" checked="@(copyDirection == "to")" @onchange="@(() => copyDirection = "to")">
                                <label class="form-check-label" for="copyTo">
                                    Copy TO another package from this worksheet
                                </label>
                            </div>
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Select Package</label>
                        <select class="form-select" @bind="selectedCopyPackageId">
                            <option value="">Select a package...</option>
                            @if (otherPackages != null)
                            {
                                @foreach (var pkg in otherPackages)
                                {
                                    <option value="@pkg.Id">@pkg.PackageNumber - @pkg.PackageName</option>
                                }
                            }
                        </select>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Time Fields to Copy</label>
                        <div class="row g-3">
                            <div class="col-12">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" @bind="copyAllFields" id="copyAllFields">
                                    <label class="form-check-label" for="copyAllFields">
                                        <strong>Select All Fields</strong>
                                    </label>
                                </div>
                                <hr class="my-2" />
                            </div>
                            <div class="col-md-6">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" @bind="copyFields.UnloadTime" id="copyUnloadTime" disabled="@copyAllFields">
                                    <label class="form-check-label" for="copyUnloadTime">
                                        Unload Time per Bundle
                                    </label>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" @bind="copyFields.MarkMeasureCut" id="copyMarkMeasureCut" disabled="@copyAllFields">
                                    <label class="form-check-label" for="copyMarkMeasureCut">
                                        Mark/Measure/Cut
                                    </label>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" @bind="copyFields.QualityCheck" id="copyQualityCheck" disabled="@copyAllFields">
                                    <label class="form-check-label" for="copyQualityCheck">
                                        Quality Check/Clean
                                    </label>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" @bind="copyFields.MoveToAssembly" id="copyMoveToAssembly" disabled="@copyAllFields">
                                    <label class="form-check-label" for="copyMoveToAssembly">
                                        Move to Assembly
                                    </label>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" @bind="copyFields.MoveAfterWeld" id="copyMoveAfterWeld" disabled="@copyAllFields">
                                    <label class="form-check-label" for="copyMoveAfterWeld">
                                        Move After Weld
                                    </label>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" @bind="copyFields.LoadingTime" id="copyLoadingTime" disabled="@copyAllFields">
                                    <label class="form-check-label" for="copyLoadingTime">
                                        Loading Time per Bundle
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>
                    }
                    
                    @if (bulkOperationTab == "update")
                    {
                        <!-- Change Tracking Section -->
                        <hr class="my-3" />
                        <div class="bg-light p-3 rounded">
                            <h6 class="mb-3"><i class="fas fa-chart-line"></i> Change Summary</h6>
                            
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-2">
                                        <strong>Original Total:</strong> @originalTotalHours.ToString("N1") hours
                                    </div>
                                    <div class="mb-2">
                                        <strong>Current Total:</strong> @currentTotalHours.ToString("N1") hours
                                    </div>
                                    <div class="mb-2">
                                        <strong>Net Change:</strong> 
                                        <span class="@(currentTotalHours < originalTotalHours ? "text-success" : currentTotalHours > originalTotalHours ? "text-danger" : "text-muted")">
                                            @((currentTotalHours - originalTotalHours).ToString("+0.0;-0.0;0")) hours
                                            @if (originalTotalHours > 0)
                                            {
                                                <text> (@(((currentTotalHours - originalTotalHours) / originalTotalHours * 100).ToString("+0.0;-0.0;0"))%)</text>
                                            }
                                            @if (currentTotalHours < originalTotalHours)
                                            {
                                                <i class="fas fa-check-circle ms-1"></i>
                                            }
                                        </span>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-2">
                                        <strong>Items Modified:</strong> @totalItemsModified
                                    </div>
                                    <div class="mb-2">
                                        <strong>Updates Applied:</strong> @updatesSaved
                                    </div>
                                </div>
                            </div>
                            
                            @{
                                var preview = GetPreviewChanges();
                                if (preview.itemCount > 0 && (bulkUpdateFields.UnloadTime || bulkUpdateFields.MarkMeasureCut || 
                                    bulkUpdateFields.QualityCheck || bulkUpdateFields.MoveToAssembly || 
                                    bulkUpdateFields.MoveAfterWeld || bulkUpdateFields.LoadingTime))
                                {
                                    <hr />
                                    <div class="alert alert-info mb-0 py-2">
                                        <strong>Preview Next Change:</strong><br />
                                        • Will affect @preview.itemCount items<br />
                                        • Estimated impact: 
                                        <span class="@(preview.hoursChange < 0 ? "text-success" : preview.hoursChange > 0 ? "text-danger" : "text-muted")">
                                            @preview.hoursChange.ToString("+0.0;-0.0;0") hours
                                        </span>
                                    </div>
                                }
                            }
                            
                            @if (changeHistory.Any())
                            {
                                <hr />
                                <details>
                                    <summary class="cursor-pointer"><small>Change History (@changeHistory.Count entries)</small></summary>
                                    <div class="mt-2">
                                        @foreach (var change in changeHistory.TakeLast(5).Reverse())
                                        {
                                            <small class="d-block text-muted">• @change</small>
                                        }
                                    </div>
                                </details>
                            }
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="@(() => _showBulkUpdateModal = false)">Cancel</button>
                    @if (bulkOperationTab == "update")
                    {
                        <button type="button" class="btn btn-success" @onclick="SaveBulkUpdate">
                            <i class="fas fa-save"></i> Save
                        </button>
                        <button type="button" class="btn btn-primary" @onclick="ApplyBulkUpdate">
                            <i class="fas fa-check"></i> Apply & Close
                        </button>
                    }
                    else if (bulkOperationTab == "copy")
                    {
                        <button type="button" class="btn btn-primary" @onclick="ApplyCopyTimeSettings" disabled="@(!selectedCopyPackageId.HasValue)">
                            <i class="fas fa-copy"></i> Copy Time Settings
                        </button>
                    }
                </div>
            </div>
        </div>
    </div>
}

@if (_showAutoBundleModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Auto Bundle Configuration</h5>
                    <button type="button" class="btn-close" @onclick="@(() => _showAutoBundleModal = false)"></button>
                </div>
                <div class="modal-body">
                    <div class="alert alert-info">
                        <i class="fas fa-info-circle"></i> This feature will automatically create delivery bundles based on your constraints.
                        Items will be grouped to maximize bundle weight while respecting material type rules.
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Maximum Bundle Weight (kg)</label>
                        <input type="number" class="form-control" @bind="maxBundleWeight" min="100" max="10000" step="100" />
                        <small class="text-muted">Bundles will not exceed this weight limit</small>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Bundling Rules</label>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" @bind="separateByType" id="separateByType">
                            <label class="form-check-label" for="separateByType">
                                Separate by material type (beams, plates, purlins, misc)
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" @bind="groupSimilarBeams" id="groupSimilarBeams" disabled="@(!separateByType)">
                            <label class="form-check-label" for="groupSimilarBeams">
                                Group beams with same description only
                            </label>
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Preview</label>
                        <div class="border rounded p-3 bg-light">
                            <p class="mb-1">Available items: <strong>@(processingItems?.Count(p => p.Quantity > 0 && p.DeliveryBundleId == null) ?? 0)</strong></p>
                            <p class="mb-1">Total weight: <strong>@(processingItems?.Where(p => p.Quantity > 0 && p.DeliveryBundleId == null).Sum(p => p.TotalWeight).ToString("N2") ?? "0.00")</strong> kg</p>
                            @if (separateByType)
                            {
                                <hr class="my-2" />
                                <small>
                                    Beams: @(processingItems?.Count(p => p.Quantity > 0 && p.DeliveryBundleId == null && IsBeamMaterial(p.MaterialId)) ?? 0) items<br />
                                    Plates: @(processingItems?.Count(p => p.Quantity > 0 && p.DeliveryBundleId == null && IsPlateMaterial(p.MaterialId)) ?? 0) items<br />
                                    Purlins: @(processingItems?.Count(p => p.Quantity > 0 && p.DeliveryBundleId == null && IsPurlinMaterial(p.MaterialId)) ?? 0) items<br />
                                    Misc: @(processingItems?.Count(p => p.Quantity > 0 && p.DeliveryBundleId == null && !string.IsNullOrEmpty(p.MaterialId) && !IsBeamMaterial(p.MaterialId) && !IsPlateMaterial(p.MaterialId) && !IsPurlinMaterial(p.MaterialId)) ?? 0) items
                                </small>
                            }
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="@(() => _showAutoBundleModal = false)">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="ExecuteAutoBundling">
                        <i class="fas fa-magic"></i> Create Bundles
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@if (_showBulkBundleModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Bulk Bundle - Filter and Create</h5>
                    <button type="button" class="btn-close" @onclick="@(() => _showBulkBundleModal = false)"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Filter by Description</label>
                                <input type="text" class="form-control" @bind="bulkBundleDescriptionFilter" @bind:event="oninput" 
                                       placeholder="Enter text to filter descriptions..." />
                            </div>
                            
                            <div class="mb-3">
                                <label class="form-label">Filter by Material Type</label>
                                <div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" checked="@bulkBundleSelectedTypes.Contains("beams")" 
                                               @onchange="@((e) => ToggleBulkBundleType("beams", e))" id="bulkBeams">
                                        <label class="form-check-label" for="bulkBeams">
                                            Beams (B, C prefix)
                                        </label>
                                    </div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" checked="@bulkBundleSelectedTypes.Contains("plates")" 
                                               @onchange="@((e) => ToggleBulkBundleType("plates", e))" id="bulkPlates">
                                        <label class="form-check-label" for="bulkPlates">
                                            Plates (PL prefix)
                                        </label>
                                    </div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" checked="@bulkBundleSelectedTypes.Contains("purlins")" 
                                               @onchange="@((e) => ToggleBulkBundleType("purlins", e))" id="bulkPurlins">
                                        <label class="form-check-label" for="bulkPurlins">
                                            Purlins (PU prefix)
                                        </label>
                                    </div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" checked="@bulkBundleSelectedTypes.Contains("misc")" 
                                               @onchange="@((e) => ToggleBulkBundleType("misc", e))" id="bulkMisc">
                                        <label class="form-check-label" for="bulkMisc">
                                            Miscellaneous
                                        </label>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="form-check mb-3">
                                <input class="form-check-input" type="checkbox" @bind="excludeAlreadyBundled" id="excludeBundled">
                                <label class="form-check-label" for="excludeBundled">
                                    Exclude items already in bundles
                                </label>
                            </div>
                        </div>
                        
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Bundle Name Template</label>
                                <input type="text" class="form-control" @bind="bulkBundleNameTemplate" />
                                <small class="text-muted">{0} will be replaced with bundle number</small>
                            </div>
                            
                            <div class="mb-3">
                                <label class="form-label">Max Bundle Weight (kg)</label>
                                <input type="number" class="form-control" @bind="bulkBundleMaxWeight" min="100" max="10000" step="100" />
                            </div>
                            
                            <div class="alert alert-info mb-0">
                                <h6>Matching Items Summary</h6>
                                <p class="mb-1">Items: <strong>@GetBulkBundleFilteredItems().Count</strong></p>
                                <p class="mb-0">Total Weight: <strong>@GetBulkBundleTotalWeight().ToString("N2") kg</strong></p>
                                @{
                                    var estimatedBundles = GetBulkBundleTotalWeight() > 0 ? Math.Ceiling(GetBulkBundleTotalWeight() / bulkBundleMaxWeight) : 0;
                                }
                                <p class="mb-0">Estimated Bundles: <strong>~@estimatedBundles</strong></p>
                            </div>
                        </div>
                    </div>
                    
                    @if (GetBulkBundleFilteredItems().Any())
                    {
                        <div class="mt-3">
                            <h6>Preview of Matching Items (First 10)</h6>
                            <div class="table-responsive" style="max-height: 200px; overflow-y: auto;">
                                <table class="table table-sm table-striped">
                                    <thead>
                                        <tr>
                                            <th>MBE ID</th>
                                            <th>Description</th>
                                            <th>QTY</th>
                                            <th>Weight (kg)</th>
                                            <th>Total Weight</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var item in GetBulkBundleFilteredItems().Take(10))
                                        {
                                            <tr>
                                                <td>@item.MaterialId</td>
                                                <td>@item.Description</td>
                                                <td>@item.Quantity</td>
                                                <td>@item.Weight.ToString("N2")</td>
                                                <td>@item.TotalWeight.ToString("N2")</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                                @if (GetBulkBundleFilteredItems().Count > 10)
                                {
                                    <small class="text-muted">...and @(GetBulkBundleFilteredItems().Count - 10) more items</small>
                                }
                            </div>
                        </div>
                    }
                    
                    @* Session tracking - show what has been done in this session *@
                    @if (bulkBundleSessionMessages.Any())
                    {
                        <div class="mt-3">
                            <div class="alert alert-success">
                                <h6 class="mb-2">Session Summary</h6>
                                <div class="small">
                                    @foreach (var msg in bulkBundleSessionMessages)
                                    {
                                        <div>@msg</div>
                                    }
                                </div>
                                <hr class="my-2" />
                                <div class="fw-bold">
                                    Total: @bulkBundleSessionBundlesCreated bundles created with @bulkBundleSessionItemsBundled items
                                </div>
                            </div>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="@(() => _showBulkBundleModal = false)">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="CreateBulkBundles" 
                            disabled="@(!GetBulkBundleFilteredItems().Any())">
                        <i class="fas fa-boxes"></i> Create Bundles (@GetBulkBundleFilteredItems().Count items)
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@if (_showSplitModal && itemToSplit != null)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Split Row</h5>
                    <button type="button" class="btn-close" @onclick="@(() => _showSplitModal = false)"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <p><strong>Item:</strong> @itemToSplit.Description</p>
                        <p><strong>Current Quantity:</strong> @itemToSplit.Quantity</p>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Number of Splits</label>
                        <input type="number" class="form-control" @bind="numberOfSplits" @bind:event="oninput" 
                               @onchange="UpdateCustomQuantities" min="2" max="10" />
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Split Method</label>
                        <div>
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="splitMethod" id="evenSplit" 
                                       checked="@(splitMethod == "even")" @onchange="@(() => { splitMethod = "even"; UpdateCustomQuantities(); })">
                                <label class="form-check-label" for="evenSplit">
                                    Even Split
                                </label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="splitMethod" id="customSplit" 
                                       checked="@(splitMethod == "custom")" @onchange="@(() => { splitMethod = "custom"; UpdateCustomQuantities(); })">
                                <label class="form-check-label" for="customSplit">
                                    Custom Quantities
                                </label>
                            </div>
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Quantity Distribution</label>
                        <div class="row g-2">
                            @for (int i = 0; i < numberOfSplits && i < customQuantities.Count; i++)
                            {
                                var index = i; // Capture for closure
                                <div class="col-6">
                                    <div class="input-group input-group-sm">
                                        <span class="input-group-text">Row @(index + 1)</span>
                                        <input type="number" class="form-control" value="@customQuantities[index]" 
                                               @oninput="@((e) => { if (int.TryParse(e.Value?.ToString(), out var val)) customQuantities[index] = val; })"
                                               disabled="@(splitMethod == "even")" min="0" />
                                    </div>
                                </div>
                            }
                        </div>
                        @if (splitMethod == "custom" && customQuantities.Sum() != itemToSplit.Quantity)
                        {
                            <div class="alert alert-warning mt-2 py-1 px-2 small">
                                <i class="fas fa-exclamation-triangle"></i> 
                                Total: @customQuantities.Sum() (must equal @itemToSplit.Quantity)
                            </div>
                        }
                    </div>
                    
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" @bind="copyTimeValues" id="copyTimes">
                        <label class="form-check-label" for="copyTimes">
                            Copy time values to new rows
                        </label>
                    </div>
                    
                    <!-- Split Preview Section -->
                    <div class="mt-4">
                        <label class="form-label">
                            <i class="fas fa-eye"></i> Preview
                        </label>
                        <div class="border rounded p-3 bg-light">
                            <div class="mb-2">
                                <strong>Original Item:</strong>
                                <div class="ms-3 text-muted">
                                    @itemToSplit.DrawingNumber - @itemToSplit.Description | 
                                    Qty: @itemToSplit.Quantity | 
                                    Weight: @itemToSplit.Weight.ToString("N2") kg | 
                                    Total: @itemToSplit.TotalWeight.ToString("N2") kg
                                </div>
                            </div>
                            
                            <div>
                                <strong>After Split:</strong>
                                <table class="table table-sm mt-2 mb-0">
                                    <thead>
                                        <tr>
                                            <th>Row</th>
                                            <th>Drawing #</th>
                                            <th>Quantity</th>
                                            <th>Unit Weight</th>
                                            <th>Total Weight</th>
                                            @if (copyTimeValues)
                                            {
                                                <th>Processing Time</th>
                                            }
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @for (int i = 0; i < numberOfSplits && i < customQuantities.Count; i++)
                                        {
                                            var qty = customQuantities[i];
                                            var totalWeight = qty * itemToSplit.Weight;
                                            var processingTime = copyTimeValues ? 
                                                (itemToSplit.UnloadTimePerBundle + 
                                                 qty * (itemToSplit.MarkMeasureCut + itemToSplit.QualityCheckClean) + 
                                                 itemToSplit.MoveToAssembly + itemToSplit.MoveAfterWeld + 
                                                 itemToSplit.LoadingTimePerBundle) / 60m : 0;
                                            
                                            <tr>
                                                <td>@(i + 1)</td>
                                                <td>@itemToSplit.DrawingNumber</td>
                                                <td>@qty</td>
                                                <td>@itemToSplit.Weight.ToString("N2") kg</td>
                                                <td>@totalWeight.ToString("N2") kg</td>
                                                @if (copyTimeValues)
                                                {
                                                    <td>@processingTime.ToString("N2") hrs</td>
                                                }
                                            </tr>
                                        }
                                    </tbody>
                                    <tfoot>
                                        <tr class="fw-bold">
                                            <td colspan="2">Total</td>
                                            <td>@customQuantities.Sum()</td>
                                            <td>-</td>
                                            <td>@itemToSplit.TotalWeight.ToString("N2") kg</td>
                                            @if (copyTimeValues)
                                            {
                                                <td>@(itemToSplit.TotalProcessingMinutes / 60m).ToString("N2") hrs</td>
                                            }
                                        </tr>
                                    </tfoot>
                                </table>
                            </div>
                            
                            @if (itemToSplit.DeliveryBundleId != null)
                            {
                                <div class="alert alert-info mt-2 mb-0 py-2">
                                    <i class="fas fa-info-circle"></i> 
                                    This item is part of bundle <strong>@itemToSplit.DeliveryBundle?.BundleNumber</strong>. 
                                    Split rows will remain in the same bundle.
                                </div>
                            }
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="@(() => _showSplitModal = false)">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="ExecuteSplit" 
                            disabled="@(splitMethod == "custom" && customQuantities.Sum() != itemToSplit.Quantity)">
                        <i class="fas fa-cut"></i> Split into @numberOfSplits Rows
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@if (_showBulkDeleteModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title">Confirm Bulk Delete</h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="@(() => _showBulkDeleteModal = false)"></button>
                </div>
                <div class="modal-body">
                    <div class="alert alert-danger">
                        <i class="fas fa-exclamation-triangle"></i> <strong>Warning:</strong> This action cannot be undone!
                    </div>
                    
                    <p>Select what you want to delete:</p>
                    
                    <div class="form-check mb-2">
                        <input class="form-check-input" type="radio" name="deleteScope" id="deleteSelected" 
                               checked="@(bulkDeleteScope == "selected")" @onchange="@(() => bulkDeleteScope = "selected")">
                        <label class="form-check-label" for="deleteSelected">
                            Delete selected items (@selectedItems.Count items)
                        </label>
                    </div>
                    
                    <div class="form-check mb-2">
                        <input class="form-check-input" type="radio" name="deleteScope" id="deleteFiltered" 
                               checked="@(bulkDeleteScope == "filtered")" @onchange="@(() => bulkDeleteScope = "filtered")">
                        <label class="form-check-label" for="deleteFiltered">
                            Delete currently filtered items (@filteredProcessingItems.Count items)
                        </label>
                    </div>
                    
                    <div class="form-check mb-2">
                        <input class="form-check-input" type="radio" name="deleteScope" id="deleteBlank" 
                               checked="@(bulkDeleteScope == "blank")" @onchange="@(() => bulkDeleteScope = "blank")">
                        <label class="form-check-label" for="deleteBlank">
                            Delete blank rows (Quantity = 0) (@(processingItems?.Count(p => p.Quantity == 0) ?? 0) items)
                        </label>
                    </div>
                    
                    <div class="form-check mb-2">
                        <input class="form-check-input" type="radio" name="deleteScope" id="deleteType" 
                               checked="@(bulkDeleteScope == "type")" @onchange="@(() => bulkDeleteScope = "type")">
                        <label class="form-check-label" for="deleteType">
                            Delete by material type
                        </label>
                    </div>
                    
                    @if (bulkDeleteScope == "type")
                    {
                        <div class="ms-4 mb-2">
                            <select class="form-select form-select-sm" @bind="deleteByMaterialType">
                                <option value="">Select material type...</option>
                                <option value="beams">Beams (@(processingItems?.Count(p => IsBeamMaterial(p.MaterialId)) ?? 0) items)</option>
                                <option value="plates">Plates (@(processingItems?.Count(p => IsPlateMaterial(p.MaterialId)) ?? 0) items)</option>
                                <option value="purlins">Purlins (@(processingItems?.Count(p => IsPurlinMaterial(p.MaterialId)) ?? 0) items)</option>
                                <option value="misc">Miscellaneous (@(processingItems?.Count(p => !string.IsNullOrEmpty(p.MaterialId) && !IsBeamMaterial(p.MaterialId) && !IsPlateMaterial(p.MaterialId) && !IsPurlinMaterial(p.MaterialId)) ?? 0) items)</option>
                            </select>
                        </div>
                    }
                    
                    <hr />
                    
                    <div class="bg-light p-3 rounded">
                        <strong>Summary:</strong>
                        <p class="mb-0">
                            @{
                                var deleteCount = GetDeleteCount();
                            }
                            You are about to delete <strong class="text-danger">@deleteCount</strong> items.
                        </p>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="@(() => _showBulkDeleteModal = false)">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="ExecuteBulkDelete" 
                            disabled="@(GetDeleteCount() == 0)">
                        <i class="fas fa-trash"></i> Delete @GetDeleteCount() Items
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@if (_showUnbundleAllModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-warning">
                    <h5 class="modal-title">Confirm Unbundle All</h5>
                    <button type="button" class="btn-close" @onclick="@(() => _showUnbundleAllModal = false)"></button>
                </div>
                <div class="modal-body">
                    <div class="alert alert-warning">
                        <i class="fas fa-exclamation-triangle"></i> <strong>Warning:</strong> This will unbundle all delivery bundles and return items to their individual state.
                    </div>
                    
                    <p>Current bundles:</p>
                    <ul>
                        @foreach (var bundle in deliveryBundles)
                        {
                            <li><strong>@bundle.BundleNumber</strong> - @bundle.BundleName (@bundle.ItemCount items, @bundle.TotalWeight.ToString("N2") kg)</li>
                        }
                    </ul>
                    
                    <hr />
                    
                    <p>Total items to unbundle: <strong>@(processingItems?.Count(p => p.DeliveryBundleId != null) ?? 0)</strong></p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="@(() => _showUnbundleAllModal = false)">Cancel</button>
                    <button type="button" class="btn btn-warning" @onclick="ExecuteUnbundleAll">
                        <i class="fas fa-unlink"></i> Unbundle All
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@if (_showImageUploadModal && _selectedWeldingItem != null)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Upload Images</h5>
                    <button type="button" class="btn-close" @onclick="@(() => _showImageUploadModal = false)"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Drawing Number: <strong>@_selectedWeldingItem.DrawingNumber</strong></label>
                    </div>
                    
                    @if (_selectedWeldingItem.Images != null && _selectedWeldingItem.Images.Any())
                    {
                        <div class="mb-3">
                            <h6>Current Images:</h6>
                            <div class="row g-2">
                                @foreach (var img in _selectedWeldingItem.Images)
                                {
                                    <div class="col-md-3">
                                        <div class="position-relative">
                                            <img src="/uploads/@(img.ThumbnailPath ?? img.FilePath)" class="img-fluid rounded" alt="@img.FileName" />
                                            <button class="btn btn-sm btn-danger position-absolute top-0 end-0 m-1" 
                                                    @onclick="() => DeleteImage(img)" title="Delete">
                                                <i class="fas fa-times"></i>
                                            </button>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                    
                    <div class="upload-zone border-2 border-dashed border-primary rounded p-4 text-center" 
                         @ondragover="HandleDragOver" @ondragover:preventDefault="true"
                         @ondragleave="HandleDragLeave" 
                         @ondrop="HandleDrop" @ondrop:preventDefault="true"
                         @onclick="TriggerFileInput"
                         style="cursor: pointer; background-color: @(_isDragging ? "#e3f2fd" : "transparent");">
                        <i class="fas fa-cloud-upload-alt fa-3x text-primary mb-3"></i>
                        <p class="mb-2">Drag & drop images here or click to browse</p>
                        <p class="text-muted small">Supported formats: JPG, PNG, WebP (Max 10MB per file)</p>
                        <p class="text-muted small">You can also paste images from clipboard (Ctrl+V)</p>
                        
                        <InputFile @ref="fileInput" OnChange="HandleFileSelection" multiple 
                                   accept=".jpg,.jpeg,.png,.webp" style="display: none;" />
                    </div>
                    
                    @if (_uploadErrors.Any())
                    {
                        <div class="alert alert-danger mt-3">
                            <ul class="mb-0">
                                @foreach (var error in _uploadErrors)
                                {
                                    <li>@error</li>
                                }
                            </ul>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="@(() => _showImageUploadModal = false)">Close</button>
                </div>
            </div>
        </div>
    </div>
}

@if (_showImageViewModal && _selectedImage != null)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.8);" @onclick="@(() => _showImageViewModal = false)">
        <div class="modal-dialog modal-xl modal-dialog-centered">
            <div class="modal-content bg-transparent border-0" @onclick:stopPropagation="true">
                <div class="modal-header border-0">
                    <h5 class="modal-title text-white">@_selectedImage.FileName</h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="@(() => _showImageViewModal = false)"></button>
                </div>
                <div class="modal-body text-center">
                    <img src="/uploads/@_selectedImage.FilePath" class="img-fluid" alt="@_selectedImage.FileName" />
                </div>
            </div>
        </div>
    </div>
}

@if (_showAutoPackBundleModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-info text-white">
                    <h5 class="modal-title">Auto Pack Bundle</h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="@(() => _showAutoPackBundleModal = false)"></button>
                </div>
                <div class="modal-body">
                    <div class="alert alert-info">
                        <i class="fas fa-magic"></i> Automatically create pack bundles based on weight and material type.
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Maximum Bundle Weight (kg)</label>
                        <input type="number" class="form-control" @bind="maxBundleWeight" min="100" max="10000" step="100" />
                    </div>
                    
                    <div class="form-check mb-2">
                        <input class="form-check-input" type="checkbox" @bind="separateByType" id="separateByTypeAuto">
                        <label class="form-check-label" for="separateByTypeAuto">
                            Keep material types separate
                        </label>
                    </div>
                    
                    <div class="form-check mb-3">
                        <input class="form-check-input" type="checkbox" @bind="groupSimilarBeams" id="groupSimilarBeamsAuto">
                        <label class="form-check-label" for="groupSimilarBeamsAuto">
                            Group similar beam sizes together
                        </label>
                    </div>
                    
                    <hr />
                    
                    <div class="bg-light p-3 rounded">
                        <strong>Preview:</strong>
                        <p class="mb-0">
                            @{
                                var autoPreview = GetAutoPackBundlePreview();
                            }
                            This will analyze <strong>@autoPreview.ItemCount</strong> unbundled items 
                            and create optimal pack bundles based on your settings.
                        </p>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="@(() => _showAutoPackBundleModal = false)">Cancel</button>
                    <button type="button" class="btn btn-info" @onclick="CreateAutoPackBundles" 
                            disabled="@(GetAutoPackBundlePreview().ItemCount == 0)">
                        <i class="fas fa-magic"></i> Create Bundles
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@if (_showBulkPackBundleModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header bg-info text-white">
                    <h5 class="modal-title">Bulk Pack Bundle</h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="@(() => _showBulkPackBundleModal = false)"></button>
                </div>
                <div class="modal-body">
                    <div class="alert alert-info">
                        <i class="fas fa-info-circle"></i> Pack bundles are used for handling operations (Move to Assembly and Move After Weld). Items in the same pack bundle share handling time.
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Bundle Name Template</label>
                        <input type="text" class="form-control" @bind="bulkPackBundleNameTemplate" placeholder="e.g., Pack Bundle {0}" />
                        <small class="text-muted">{0} will be replaced with the bundle number</small>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Maximum Bundle Weight (kg)</label>
                        <input type="number" class="form-control" @bind="bulkPackBundleMaxWeight" min="100" max="10000" step="100" />
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Filter by Description (optional)</label>
                        <input type="text" class="form-control" @bind="bulkPackBundleDescriptionFilter" placeholder="Enter keywords to filter items" />
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Material Types to Include</label>
                        <div class="row">
                            <div class="col-md-3">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="packBeams" 
                                           checked="@bulkPackBundleSelectedTypes.Contains("beams")"
                                           @onchange="@((e) => TogglePackBundleMaterialType("beams", e.Value is bool value ? value : false))">
                                    <label class="form-check-label" for="packBeams">
                                        <i class="fas fa-bars text-success"></i> Beams
                                    </label>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="packPlates" 
                                           checked="@bulkPackBundleSelectedTypes.Contains("plates")"
                                           @onchange="@((e) => TogglePackBundleMaterialType("plates", e.Value is bool value ? value : false))">
                                    <label class="form-check-label" for="packPlates">
                                        <i class="fas fa-square text-primary"></i> Plates
                                    </label>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="packPurlins" 
                                           checked="@bulkPackBundleSelectedTypes.Contains("purlins")"
                                           @onchange="@((e) => TogglePackBundleMaterialType("purlins", e.Value is bool value ? value : false))">
                                    <label class="form-check-label" for="packPurlins">
                                        <i class="fas fa-grip-lines text-purple" style="color: #6610f2;"></i> Purlins
                                    </label>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="packMisc" 
                                           checked="@bulkPackBundleSelectedTypes.Contains("misc")"
                                           @onchange="@((e) => TogglePackBundleMaterialType("misc", e.Value is bool value ? value : false))">
                                    <label class="form-check-label" for="packMisc">
                                        <i class="fas fa-cube text-secondary"></i> Misc
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="form-check mb-3">
                        <input class="form-check-input" type="checkbox" @bind="excludeAlreadyPackBundled" id="excludePackBundled">
                        <label class="form-check-label" for="excludePackBundled">
                            Exclude items already in pack bundles
                        </label>
                    </div>
                    
                    <hr />
                    
                    <div class="bg-light p-3 rounded">
                        <strong>Preview:</strong>
                        <p class="mb-0">
                            @{
                                var packBundlePreview = GetBulkPackBundlePreview();
                            }
                            This will create approximately <strong>@packBundlePreview.EstimatedBundles</strong> pack bundles 
                            containing <strong>@packBundlePreview.ItemCount</strong> items 
                            with a total weight of <strong>@packBundlePreview.TotalWeight.ToString("N2")</strong> kg.
                        </p>
                    </div>
                    
                    @* Session tracking - show what has been done in this session *@
                    @if (bulkPackBundleSessionMessages.Any())
                    {
                        <div class="mt-3">
                            <div class="alert alert-info">
                                <h6 class="mb-2">Session Summary</h6>
                                <div class="small">
                                    @foreach (var msg in bulkPackBundleSessionMessages)
                                    {
                                        <div>@msg</div>
                                    }
                                </div>
                                <hr class="my-2" />
                                <div class="fw-bold">
                                    Total: @bulkPackBundleSessionBundlesCreated pack bundles created with @bulkPackBundleSessionItemsBundled items
                                </div>
                            </div>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="@(() => _showBulkPackBundleModal = false)">Cancel</button>
                    <button type="button" class="btn btn-info" @onclick="CreateBulkPackBundles" 
                            disabled="@(GetBulkPackBundlePreview().ItemCount == 0)">
                        <i class="fas fa-box"></i> Create Pack Bundles
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@if (_showBundleManagementModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Bundle Management</h5>
                    <button type="button" class="btn-close" @onclick="@(() => _showBundleManagementModal = false)"></button>
                </div>
                <div class="modal-body">
                    <!-- Tab navigation -->
                    <ul class="nav nav-tabs mb-3">
                        <li class="nav-item">
                            <a class="nav-link @(bundleManagementTab == "delivery" ? "active" : "")" 
                               href="#" @onclick:preventDefault @onclick="@(() => bundleManagementTab = "delivery")">
                                <i class="fas fa-truck"></i> Delivery Bundles (@GetActiveDeliveryBundleCount())
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link @(bundleManagementTab == "pack" ? "active" : "")" 
                               href="#" @onclick:preventDefault @onclick="@(() => bundleManagementTab = "pack")">
                                <i class="fas fa-box"></i> Pack Bundles (@GetActivePackBundleCount())
                            </a>
                        </li>
                    </ul>
                    
                    <!-- Search bar -->
                    <div class="mb-3">
                        <div class="input-group">
                            <span class="input-group-text"><i class="fas fa-search"></i></span>
                            <input type="text" class="form-control" placeholder="Search bundles by number or name..." 
                                   @bind="bundleSearchFilter" @bind:event="oninput" />
                        </div>
                    </div>
                    
                    @if (bundleManagementTab == "delivery")
                    {
                        <!-- Delivery Bundles Table -->
                        <div class="table-responsive" style="max-height: 500px; overflow-y: auto;">
                            <table class="table table-hover">
                                <thead class="sticky-top bg-white">
                                    <tr>
                                        <th>Bundle Number</th>
                                        <th>Bundle Name</th>
                                        <th>Items</th>
                                        <th>Total Weight</th>
                                        <th>Created</th>
                                        <th width="150">Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var bundle in GetFilteredDeliveryBundles())
                                    {
                                        <tr>
                                            <td>
                                                <span class="badge bg-primary">@bundle.BundleNumber</span>
                                            </td>
                                            <td>
                                                @if (selectedDeliveryBundleToEdit?.Id == bundle.Id)
                                                {
                                                    <div class="input-group input-group-sm">
                                                        <input type="text" class="form-control" @bind="bundle.BundleName" 
                                                               @onkeypress="@(async (e) => { if (e.Key == "Enter") await EditBundleName(bundle); })" />
                                                        <button class="btn btn-success btn-sm" @onclick="@(() => EditBundleName(bundle))">
                                                            <i class="fas fa-check"></i>
                                                        </button>
                                                        <button class="btn btn-secondary btn-sm" @onclick="@(() => selectedDeliveryBundleToEdit = null)">
                                                            <i class="fas fa-times"></i>
                                                        </button>
                                                    </div>
                                                }
                                                else
                                                {
                                                    <span>@bundle.BundleName</span>
                                                }
                                            </td>
                                            <td>
                                                @{
                                                    var actualItemCount = processingItems.Count(p => p.DeliveryBundleId == bundle.Id);
                                                }
                                                <span class="badge bg-secondary">@actualItemCount</span>
                                            </td>
                                            <td>
                                                @{
                                                    var actualWeight = processingItems.Where(p => p.DeliveryBundleId == bundle.Id).Sum(p => p.TotalWeight);
                                                }
                                                @actualWeight.ToString("N2") kg
                                            </td>
                                            <td>@bundle.CreatedDate.ToString("MM/dd HH:mm")</td>
                                            <td>
                                                <button class="btn btn-sm btn-outline-primary me-1" 
                                                        @onclick="@(() => selectedDeliveryBundleToEdit = bundle)"
                                                        title="Edit Name">
                                                    <i class="fas fa-edit"></i>
                                                </button>
                                                <button class="btn btn-sm btn-outline-warning me-1" 
                                                        @onclick="@(() => { _showBundleManagementModal = false; UnbundleItems(bundle.Id); })"
                                                        title="Unbundle">
                                                    <i class="fas fa-unlink"></i>
                                                </button>
                                                <button class="btn btn-sm btn-outline-info" 
                                                        @onclick="@(() => { _showBundleManagementModal = false; ScrollToBundle(bundle.Id, "delivery"); })"
                                                        title="View in Worksheet">
                                                    <i class="fas fa-eye"></i>
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                            @if (!GetFilteredDeliveryBundles().Any())
                            {
                                <div class="text-center text-muted py-3">
                                    @if (string.IsNullOrWhiteSpace(bundleSearchFilter))
                                    {
                                        <p>No delivery bundles created yet.</p>
                                    }
                                    else
                                    {
                                        <p>No bundles match your search.</p>
                                    }
                                </div>
                            }
                        </div>
                        
                        <!-- Summary -->
                        <div class="mt-3 p-3 bg-light rounded">
                            <div class="row">
                                <div class="col-md-4">
                                    <strong>Total Bundles:</strong> @GetFilteredDeliveryBundles().Count
                                </div>
                                <div class="col-md-4">
                                    <strong>Total Items:</strong> @GetFilteredDeliveryBundles().Sum(b => processingItems.Count(p => p.DeliveryBundleId == b.Id))
                                </div>
                                <div class="col-md-4">
                                    <strong>Total Weight:</strong> @GetFilteredDeliveryBundles().Sum(b => processingItems.Where(p => p.DeliveryBundleId == b.Id).Sum(p => p.TotalWeight)).ToString("N2") kg
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {
                        <!-- Pack Bundles Table -->
                        <div class="table-responsive" style="max-height: 500px; overflow-y: auto;">
                            <table class="table table-hover">
                                <thead class="sticky-top bg-white">
                                    <tr>
                                        <th>Bundle Number</th>
                                        <th>Bundle Name</th>
                                        <th>Items</th>
                                        <th>Total Weight</th>
                                        <th>Created</th>
                                        <th width="150">Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var bundle in GetFilteredPackBundles())
                                    {
                                        <tr>
                                            <td>
                                                <span class="badge bg-info">@bundle.BundleNumber</span>
                                            </td>
                                            <td>
                                                @if (selectedPackBundleToEdit?.Id == bundle.Id)
                                                {
                                                    <div class="input-group input-group-sm">
                                                        <input type="text" class="form-control" @bind="bundle.BundleName" 
                                                               @onkeypress="@(async (e) => { if (e.Key == "Enter") await EditPackBundleName(bundle); })" />
                                                        <button class="btn btn-success btn-sm" @onclick="@(() => EditPackBundleName(bundle))">
                                                            <i class="fas fa-check"></i>
                                                        </button>
                                                        <button class="btn btn-secondary btn-sm" @onclick="@(() => selectedPackBundleToEdit = null)">
                                                            <i class="fas fa-times"></i>
                                                        </button>
                                                    </div>
                                                }
                                                else
                                                {
                                                    <span>@bundle.BundleName</span>
                                                }
                                            </td>
                                            <td>
                                                @{
                                                    var actualItemCount = processingItems.Count(p => p.PackBundleId == bundle.Id);
                                                }
                                                <span class="badge bg-secondary">@actualItemCount</span>
                                            </td>
                                            <td>
                                                @{
                                                    var actualWeight = processingItems.Where(p => p.PackBundleId == bundle.Id).Sum(p => p.TotalWeight);
                                                }
                                                @actualWeight.ToString("N2") kg
                                            </td>
                                            <td>@bundle.CreatedDate.ToString("MM/dd HH:mm")</td>
                                            <td>
                                                <button class="btn btn-sm btn-outline-primary me-1" 
                                                        @onclick="@(() => selectedPackBundleToEdit = bundle)"
                                                        title="Edit Name">
                                                    <i class="fas fa-edit"></i>
                                                </button>
                                                <button class="btn btn-sm btn-outline-warning me-1" 
                                                        @onclick="@(() => { _showBundleManagementModal = false; ConfirmUnpackBundle(bundle.Id); })"
                                                        title="Unpack">
                                                    <i class="fas fa-unlink"></i>
                                                </button>
                                                <button class="btn btn-sm btn-outline-info" 
                                                        @onclick="@(() => { _showBundleManagementModal = false; ScrollToBundle(bundle.Id, "pack"); })"
                                                        title="View in Worksheet">
                                                    <i class="fas fa-eye"></i>
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                            @if (!GetFilteredPackBundles().Any())
                            {
                                <div class="text-center text-muted py-3">
                                    @if (string.IsNullOrWhiteSpace(bundleSearchFilter))
                                    {
                                        <p>No pack bundles created yet.</p>
                                    }
                                    else
                                    {
                                        <p>No bundles match your search.</p>
                                    }
                                </div>
                            }
                        </div>
                        
                        <!-- Summary -->
                        <div class="mt-3 p-3 bg-light rounded">
                            <div class="row">
                                <div class="col-md-4">
                                    <strong>Total Bundles:</strong> @GetFilteredPackBundles().Count
                                </div>
                                <div class="col-md-4">
                                    <strong>Total Items:</strong> @GetFilteredPackBundles().Sum(b => processingItems.Count(p => p.PackBundleId == b.Id))
                                </div>
                                <div class="col-md-4">
                                    <strong>Total Weight:</strong> @GetFilteredPackBundles().Sum(b => processingItems.Where(p => p.PackBundleId == b.Id).Sum(p => p.TotalWeight)).ToString("N2") kg
                                </div>
                            </div>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="@(() => _showBundleManagementModal = false)">Close</button>
                </div>
            </div>
        </div>
    </div>
}

<script>
    // Initialize table resize functionality after render
    window.initializeWorksheetTables = function() {
        setTimeout(function() {
            if (window.tableResize) {
                window.tableResize.initialize();
            }
            
            // Initialize table scrolling functionality
            initializeTableScrolling();
        }, 100);
    };
    
    // Handle synchronized scrolling for frozen columns
    function initializeTableScrolling() {
        const tableWrapper = document.querySelector('.table-wrapper');
        if (!tableWrapper) {
            console.log('Table wrapper not found');
            return;
        }
        
        console.log('Initializing table scrolling...');
        
        // Force the table wrapper to recognize its scroll area
        tableWrapper.style.overflowX = 'auto';
        tableWrapper.style.overflowY = 'auto';
        
        // Add scroll event listener to detect horizontal scrolling
        let isScrolling = false;
        tableWrapper.addEventListener('scroll', function() {
            if (tableWrapper.scrollLeft > 0 && !isScrolling) {
                isScrolling = true;
                tableWrapper.classList.add('scrolled');
            } else if (tableWrapper.scrollLeft === 0 && isScrolling) {
                isScrolling = false;
                tableWrapper.classList.remove('scrolled');
            }
        });
        
        // Ensure sticky header
        const thead = tableWrapper.querySelector('thead');
        if (thead) {
            thead.style.position = 'sticky';
            thead.style.top = '0';
            thead.style.zIndex = '10';
            console.log('Header made sticky');
        }
        
        // Ensure frozen columns are properly positioned
        const frozenCols = document.querySelectorAll('.frozen-col');
        console.log(`Found ${frozenCols.length} frozen columns`);
        frozenCols.forEach((col, index) => {
            col.style.position = 'sticky';
            col.style.zIndex = '2';
            col.style.backgroundColor = 'white';
            
            // Log the computed styles to debug
            const computed = window.getComputedStyle(col);
            console.log(`Column ${index}: left=${computed.left}, position=${computed.position}`);
        });
        
        // Ensure header frozen columns have higher z-index
        const headerFrozenCols = document.querySelectorAll('thead .frozen-col');
        headerFrozenCols.forEach(col => {
            col.style.zIndex = '11';
            col.style.backgroundColor = '#f8f9fa';
        });
        
        // Force a reflow to ensure styles are applied
        tableWrapper.offsetHeight;
    }
    
    // Setup click outside handler for dropdowns
    window.setupClickOutside = function(element, dotnetRef) {
        document.addEventListener('click', function(event) {
            if (!element.contains(event.target)) {
                dotnetRef.invokeMethodAsync('CloseDropdown');
            }
        });
    };
    
    // Handle clipboard paste for images
    window.handleClipboardPaste = function(dotNetHelper) {
        console.log('Initializing clipboard paste handler');
        
        // Remove any existing listener first
        if (window.clipboardPasteHandler) {
            document.removeEventListener('paste', window.clipboardPasteHandler);
        }
        
        // Add flag to prevent duplicate processing
        let processingPaste = false;
        
        // Create new handler
        window.clipboardPasteHandler = async function(e) {
                console.log('Paste event detected');
                const uploadZone = document.querySelector('.upload-zone');
                const modalBackdrop = document.querySelector('.modal.show.d-block');
                
                console.log('Upload zone found:', !!uploadZone);
                console.log('Modal visible:', !!modalBackdrop);
                
                if (uploadZone && modalBackdrop) {
                    // Prevent duplicate processing
                    if (processingPaste) {
                        console.log('Already processing a paste, ignoring');
                        return;
                    }
                    processingPaste = true;
                    
                    try {
                        console.log('Processing clipboard items');
                        const items = e.clipboardData.items;
                        console.log('Clipboard items:', items.length);
                        
                        let imageProcessed = false;
                        for (let item of items) {
                            console.log('Item type:', item.type);
                            if (item.type.indexOf('image') !== -1) {
                                e.preventDefault();
                                const blob = item.getAsFile();
                                if (blob) {
                                    // Check file size (20MB limit for clipboard)
                                    if (blob.size > 20971520) { // 20MB in bytes
                                        console.error('Clipboard image too large:', blob.size);
                                        alert('Clipboard image is too large. Maximum size is 20MB.');
                                        break;
                                    }
                                    
                                    try {
                                        console.log('Processing image blob, size:', blob.size, 'type:', blob.type);
                                        const fileName = 'clipboard-' + new Date().getTime() + '.png';
                                        
                                        // Check if Blazor is ready to receive the file
                                        const ready = await dotNetHelper.invokeMethodAsync('HandleClipboardImage', blob.type, fileName);
                                        console.log('Blazor ready:', ready);
                                        
                                        if (ready) {
                                            // Create a new File object from the blob
                                            const file = new File([blob], fileName, { type: blob.type || 'image/png' });
                                            
                                            // Create a DataTransfer object and add the file
                                            const dataTransfer = new DataTransfer();
                                            dataTransfer.items.add(file);
                                            
                                            // Find the file input - look for the one in the modal
                                            const modal = document.querySelector('.modal.show');
                                            const fileInput = modal ? modal.querySelector('input[type="file"]') : 
                                                             document.querySelector('input[type="file"][accept*="image"]');
                                            
                                            console.log('File input found:', !!fileInput);
                                            if (fileInput) {
                                                console.log('File input accept attribute:', fileInput.accept);
                                                // Set files property
                                                fileInput.files = dataTransfer.files;
                                                
                                                // Trigger the change event
                                                const event = new Event('change', { bubbles: true });
                                                fileInput.dispatchEvent(event);
                                                console.log('Change event dispatched');
                                                imageProcessed = true;
                                            } else {
                                                console.error('File input not found');
                                                alert('Unable to find file input. Please try again.');
                                            }
                                        } else {
                                            console.error('Blazor not ready to receive clipboard image');
                                        }
                                    } catch (error) {
                                        console.error('Error processing clipboard image:', error);
                                        alert('Error processing clipboard image: ' + error.message);
                                    }
                                } else {
                                    console.error('Failed to get blob from clipboard');
                                }
                                // Break after processing first image to avoid duplicates
                                if (imageProcessed) break;
                            }
                        }
                    } finally {
                        // Reset flag after a delay to allow for new pastes
                        setTimeout(() => {
                            processingPaste = false;
                        }, 500);
                    }
                } else {
                    console.log('Upload zone not visible or not found');
                }
        };
        
        // Add the event listener
        document.addEventListener('paste', window.clipboardPasteHandler);
        console.log('Paste event listener added');
        
        // Test paste immediately
        window.testPaste = function() {
            const e = new ClipboardEvent('paste', {
                clipboardData: new DataTransfer()
            });
            document.dispatchEvent(e);
        };
    };
    
    window.downloadFile = function(filename, contentType, base64Data) {
        const byteCharacters = atob(base64Data);
        const byteNumbers = new Array(byteCharacters.length);
        for (let i = 0; i < byteCharacters.length; i++) {
            byteNumbers[i] = byteCharacters.charCodeAt(i);
        }
        const byteArray = new Uint8Array(byteNumbers);
        const blob = new Blob([byteArray], { type: contentType });
        
        const link = document.createElement('a');
        link.href = window.URL.createObjectURL(blob);
        link.download = filename;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    };
    
    window.scrollToBottom = function(elementId) {
        const element = document.getElementById(elementId);
        if (element) {
            element.scrollTop = element.scrollHeight;
        } else {
            // If element not found, try scrolling the table wrapper
            const tableWrapper = document.querySelector('.table-wrapper');
            if (tableWrapper) {
                tableWrapper.scrollTop = tableWrapper.scrollHeight;
            }
        }
    };
    
    window.scrollToBundleItem = function(itemId) {
        // Find the row with the given item ID
        const row = document.querySelector(`tr[data-item-id="${itemId}"]`);
        if (row) {
            // Highlight the row temporarily
            row.classList.add('table-warning');
            row.scrollIntoView({ behavior: 'smooth', block: 'center' });
            
            // Remove highlight after 2 seconds
            setTimeout(() => {
                row.classList.remove('table-warning');
            }, 2000);
        }
    };
</script>
private void ToggleWeldingItemSelection(int itemId, ChangeEventArgs e)
{
    if (e.Value is bool isChecked)
    {
        if (isChecked)
        {
            selectedWeldingItems.Add(itemId);
        }
        else
        {
            selectedWeldingItems.Remove(itemId);
        }
    }
}

private void ToggleWeldingColumnVisibility(string columnKey, ChangeEventArgs e)
{
    if (e.Value is bool isVisible)
    {
        weldingColumnVisibility[columnKey] = isVisible;
    }
}

private string GetWeldingColumnDisplayName(string columnKey)
{
    return columnKey switch
    {
        "ID" => "ID",
        "DrawingNumber" => "Drawing Number",
        "Images" => "Images",
        "ConnectionType" => "Connection Type",
        "ConnectionQty" => "Connection Quantity",
        "AssembleFitTack" => "Assemble/Fit/Tack",
        "Weld" => "Weld",
        "WeldCheck" => "Weld Check",
        "TotalMinutes" => "Total Minutes",
        _ => columnKey
    };
}

private int GetWeldingColumnCount()
{
    // Count visible columns plus checkbox and actions columns
    return weldingColumnVisibility.Count(kv => kv.Value) + 3;
}

// Welding worksheet methods
private void SetWeldingFilter(string filter)
{
    weldingActiveFilter = filter;
}

private List<WeldingItem> GetFilteredWeldingItems()
{
    var items = weldingItems.AsQueryable();
    
    // Apply text search filter
    if (!string.IsNullOrWhiteSpace(weldingSearchFilter))
    {
        var searchLower = weldingSearchFilter.ToLower();
        items = items.Where(i => 
            i.DrawingNumber.ToLower().Contains(searchLower) ||
            i.ConnectionTypes.Any(ct => ct.Name.ToLower().Contains(searchLower)));
    }
    
    // Apply status filter
    items = weldingActiveFilter switch
    {
        "active" => items.Where(i => !IsWeldingItemBlank(i)),
        "blank" => items.Where(i => IsWeldingItemBlank(i)),
        _ => items // "all"
    };
    
    // Apply column filters
    foreach (var (columnName, filterConfig) in weldingColumnFilters)
    {
        if (!string.IsNullOrEmpty(filterConfig.Value))
        {
            items = ApplyWeldingColumnFilter(items, columnName, filterConfig.Value);
        }
    }
    
    // Apply sorting
    foreach (var (columnName, sortDirection) in weldingColumnSorts)
    {
        items = ApplyWeldingColumnSort(items, columnName, sortDirection);
    }
    
    return items.ToList();
}

private bool IsWeldingItemBlank(WeldingItem item)
{
    return item.ConnectionTypes.Count == 0 && 
           item.AssembleFitTackTime == 0 && 
           item.WeldTime == 0 && 
           item.WeldCheckTime == 0;
}

private IQueryable<WeldingItem> ApplyWeldingColumnFilter(IQueryable<WeldingItem> items, string columnName, string filterValue)
{
    return columnName switch
    {
        "DrawingNumber" => items.Where(i => i.DrawingNumber.Contains(filterValue, StringComparison.OrdinalIgnoreCase)),
        "ConnectionType" => items.Where(i => i.ConnectionTypes.Any(ct => ct.Name.Contains(filterValue, StringComparison.OrdinalIgnoreCase))),
        _ => items
    };
}

private IQueryable<WeldingItem> ApplyWeldingColumnSort(IQueryable<WeldingItem> items, string columnName, string sortDirection)
{
    return (columnName, sortDirection) switch
    {
        ("DrawingNumber", "asc") => items.OrderBy(i => i.DrawingNumber),
        ("DrawingNumber", "desc") => items.OrderByDescending(i => i.DrawingNumber),
        ("ConnectionType", "asc") => items.OrderBy(i => i.ConnectionTypes.FirstOrDefault() != null ? i.ConnectionTypes.First().Name : ""),
        ("ConnectionType", "desc") => items.OrderByDescending(i => i.ConnectionTypes.FirstOrDefault() != null ? i.ConnectionTypes.First().Name : ""),
        ("TotalMinutes", "asc") => items.OrderBy(i => i.AssembleFitTackTime + i.WeldTime + i.WeldCheckTime),
        ("TotalMinutes", "desc") => items.OrderByDescending(i => i.AssembleFitTackTime + i.WeldTime + i.WeldCheckTime),
        _ => items
    };
}

private void HandleWeldingColumnFilter(string columnName, string filterValue)
{
    if (string.IsNullOrEmpty(filterValue))
    {
        weldingColumnFilters.Remove(columnName);
    }
    else
    {
        weldingColumnFilters[columnName] = new ColumnFilterDropdown.FilterConfig { Value = filterValue };
    }
}

private void HandleWeldingColumnSort(string columnName, string sortDirection)
{
    if (sortDirection == "none")
    {
        weldingColumnSorts.Remove(columnName);
    }
    else
    {
        weldingColumnSorts[columnName] = sortDirection;
    }
}

private List<string> GetUniqueWeldingValues(string columnName)
{
    return columnName switch
    {
        "DrawingNumber" => weldingItems.Select(i => i.DrawingNumber).Distinct().OrderBy(v => v).ToList(),
        _ => new List<string>()
    };
}

private List<string> GetUniqueWeldingConnectionTypes()
{
    return weldingItems
        .SelectMany(i => i.ConnectionTypes)
        .Select(ct => ct.Name)
        .Distinct()
        .OrderBy(n => n)
        .ToList();
}

private void ToggleAllWeldingItems(ChangeEventArgs e)
{
    if (e.Value is bool isChecked)
    {
        if (isChecked)
        {
            foreach (var item in filteredWeldingItems)
            {
                selectedWeldingItems.Add(item.Id);
            }
        }
        else
        {
            selectedWeldingItems.Clear();
        }
    }
}

private void ToggleWeldingItemSelection(int itemId, ChangeEventArgs e)
{
    if (e.Value is bool isChecked)
    {
        if (isChecked)
        {
            selectedWeldingItems.Add(itemId);
        }
        else
        {
            selectedWeldingItems.Remove(itemId);
        }
    }
}

[JSInvokable]
public bool HandleClipboardImage(string mimeType, string fileName)
{
    try
    {
        if (_selectedWeldingItem == null || !_showImageUploadModal)
            return false;

        // Store the expected file info for the next file upload
        _clipboardFileName = fileName;
        _isClipboardPaste = true;
        
        // Return true to indicate ready to receive file
        return true;
    }
    catch (Exception ex)
    {
        _uploadErrors.Add($"Failed to prepare clipboard paste: {ex.Message}");
        return false;
    }
}

private string? _clipboardFileName;
private bool _isClipboardPaste = false;

private DotNetObjectReference<PackageWorksheets>? _dotNetHelper;

// Material type visualization helpers
private string GetMaterialTypeBadgeColor(string? materialId)
{
    if (string.IsNullOrEmpty(materialId)) return "secondary";
    
    if (IsBeamMaterial(materialId)) return "primary";
    if (IsPlateMaterial(materialId)) return "info";
    if (IsPurlinMaterial(materialId)) return "success";
    
    return "secondary"; // Misc
}

private string GetMaterialTypeBadgeColorByName(string typeName)
{
    return typeName.ToLower() switch
    {
        "beam" => "primary",
        "plate" => "info",
        "purlin" => "success",
        _ => "secondary"
    };
}

private string GetMaterialTypeAbbreviation(string? materialId)
{
    if (string.IsNullOrEmpty(materialId)) return "?";
    
    if (IsBeamMaterial(materialId)) return "B";
    if (IsPlateMaterial(materialId)) return "PL";
    if (IsPurlinMaterial(materialId)) return "PU";
    
    return "M"; // Misc
}

private string GetMaterialTypeTooltip(string? materialId)
{
    if (string.IsNullOrEmpty(materialId)) return "No material ID";
    
    var materialType = GetCurrentMaterialType(materialId);
    var reason = "No matching pattern found";
    
    if (materialType == "Beam")
    {
        reason = GetMatchingPattern(materialId, new[] { "BEAM", "UB", "UC", "PFC", "RSJ", "HE", "IPE", "UKB", "UKC" });
    }
    else if (materialType == "Plate")
    {
        reason = GetMatchingPattern(materialId, new[] { "PLATE", "FL", "PL", "FLT", "PLT", "SHS", "RHS" });
    }
    else if (materialType == "Purlin")
    {
        reason = GetMatchingPattern(materialId, new[] { "PURLIN", "C15", "C20", "C25", "C30", "Z15", "Z20", "Z25", "Z30" });
    }
    
    return $"Material Type: {materialType}\nMaterial ID: {materialId}\nMatched by: {reason}";
}

private string GetMatchingPattern(string materialId, string[] patterns)
{
    var upper = materialId.ToUpper();
    
    // Check if it matched a prefix first
    var allPrefixMappings = GetAllPrefixMappings();
    var matchedPrefix = allPrefixMappings
        .Where(kvp => upper.StartsWith(kvp.Key))
        .OrderByDescending(kvp => kvp.Key.Length)
        .FirstOrDefault();
        
    if (!string.IsNullOrEmpty(matchedPrefix.Key))
    {
        return $"Prefix '{matchedPrefix.Key}'";
    }
    
    // Then check patterns
    var matched = patterns.FirstOrDefault(p => upper.Contains(p));
    return matched != null ? $"Pattern '{matched}'" : "Default mapping";
}

// Material mapping summary helpers
private MaterialMappingSummaryData GetMaterialMappingSummary()
{
    var summary = new MaterialMappingSummaryData();
    
    // Group by material ID to get unique mappings
    var materialGroups = processingItems
        .GroupBy(p => p.MaterialId ?? "")
        .ToList();
    
    foreach (var group in materialGroups)
    {
        var materialId = group.Key;
        var items = group.ToList();
        
        if (string.IsNullOrEmpty(materialId))
        {
            summary.ItemsWithoutMaterialId = items.Count;
            continue;
        }
        
        summary.ItemsWithMaterialId += items.Count;
        summary.UniqueMaterialIds.Add(materialId);
        
        // Determine type and count
        var detectedType = "Misc";
        var mappingRule = "No matching pattern";
        
        if (IsBeamMaterial(materialId))
        {
            detectedType = "Beam";
            mappingRule = GetMatchingPattern(materialId, new[] { "BEAM", "UB", "UC", "PFC", "RSJ", "HE", "IPE", "UKB", "UKC" });
        }
        else if (IsPlateMaterial(materialId))
        {
            detectedType = "Plate";
            mappingRule = GetMatchingPattern(materialId, new[] { "PLATE", "FL", "PL", "FLT", "PLT", "SHS", "RHS" });
        }
        else if (IsPurlinMaterial(materialId))
        {
            detectedType = "Purlin";
            mappingRule = GetMatchingPattern(materialId, new[] { "PURLIN", "C15", "C20", "C25", "C30", "Z15", "Z20", "Z25", "Z30" });
        }
        
        // Add to type counts
        if (!summary.TypeCounts.ContainsKey(detectedType))
            summary.TypeCounts[detectedType] = 0;
        summary.TypeCounts[detectedType] += items.Count;
        
        // Add material mapping detail
        summary.MaterialMappings.Add(new MaterialMappingDetail
        {
            MaterialId = materialId,
            DetectedType = detectedType,
            ItemCount = items.Count,
            TotalWeight = items.Sum(i => i.TotalWeight),
            MappingRule = mappingRule
        });
    }
    
    // Add count for items without material ID if any
    if (summary.ItemsWithoutMaterialId > 0)
    {
        summary.TypeCounts["No Material ID"] = summary.ItemsWithoutMaterialId;
    }
    
    return summary;
}

private async Task ExportMaterialMappingReport()
{
    try
    {
        var csv = new System.Text.StringBuilder();
        csv.AppendLine("Drawing Number,Material ID,Detected Type,Quantity,Weight,Total Weight,Mapping Rule");
        
        foreach (var item in processingItems.OrderBy(p => p.DrawingNumber))
        {
            var materialType = "Misc";
            var mappingRule = "No matching pattern";
            
            if (!string.IsNullOrEmpty(item.MaterialId))
            {
                if (IsBeamMaterial(item.MaterialId))
                {
                    materialType = "Beam";
                    mappingRule = GetMatchingPattern(item.MaterialId, new[] { "BEAM", "UB", "UC", "PFC", "RSJ", "HE", "IPE", "UKB", "UKC" });
                }
                else if (IsPlateMaterial(item.MaterialId))
                {
                    materialType = "Plate";
                    mappingRule = GetMatchingPattern(item.MaterialId, new[] { "PLATE", "FL", "PL", "FLT", "PLT", "SHS", "RHS" });
                }
                else if (IsPurlinMaterial(item.MaterialId))
                {
                    materialType = "Purlin";
                    mappingRule = GetMatchingPattern(item.MaterialId, new[] { "PURLIN", "C15", "C20", "C25", "C30", "Z15", "Z20", "Z25", "Z30" });
                }
            }
            else
            {
                materialType = "No Material ID";
                mappingRule = "N/A";
            }
            
            csv.AppendLine($"\"{item.DrawingNumber ?? ""}\",\"{item.MaterialId ?? ""}\",\"{materialType}\",{item.Quantity},{item.Weight},{item.TotalWeight},\"{mappingRule}\"");
        }
        
        var fileName = $"MaterialMapping_{package?.PackageName}_{DateTime.Now:yyyyMMdd_HHmmss}.csv";
        var bytes = System.Text.Encoding.UTF8.GetBytes(csv.ToString());
        
        await JSRuntime.InvokeVoidAsync("downloadFile", fileName, "text/csv", Convert.ToBase64String(bytes));
        
        _alertMessage = "Material mapping report exported successfully!";
        _showAlert = true;
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error exporting material mapping report: {ex.Message}");
        _alertMessage = $"Error exporting report: {ex.Message}";
        _showAlert = true;
    }
}

// Bundle management methods
private void ShowBundleManagementWindow()
{
    _showBundleManagementModal = true;
    bundleManagementTab = "delivery";
    bundleSearchFilter = "";
    selectedDeliveryBundleToEdit = null;
    selectedPackBundleToEdit = null;
}

private async Task EditBundleName(DeliveryBundle bundle)
{
    if (bundle == null || string.IsNullOrWhiteSpace(bundle.BundleName)) return;
    
    try
    {
        using var dbContext = await DbContextFactory.CreateDbContextAsync();
        var dbBundle = await dbContext.DeliveryBundles.FindAsync(bundle.Id);
        if (dbBundle != null)
        {
            dbBundle.BundleName = bundle.BundleName;
            dbBundle.LastModified = DateTime.UtcNow;
            await dbContext.SaveChangesAsync();
            
            // Update local reference
            var localBundle = deliveryBundles.FirstOrDefault(b => b.Id == bundle.Id);
            if (localBundle != null)
            {
                localBundle.BundleName = bundle.BundleName;
            }
            
            _alertMessage = $"Bundle name updated successfully.";
            _alertType = "success";
            _showAlert = true;
        }
    }
    catch (Exception ex)
    {
        _alertMessage = $"Error updating bundle name: {ex.Message}";
        _alertType = "danger";
        _showAlert = true;
    }
}

private async Task EditPackBundleName(PackBundle bundle)
{
    if (bundle == null || string.IsNullOrWhiteSpace(bundle.BundleName)) return;
    
    try
    {
        using var dbContext = await DbContextFactory.CreateDbContextAsync();
        var dbBundle = await dbContext.PackBundles.FindAsync(bundle.Id);
        if (dbBundle != null)
        {
            dbBundle.BundleName = bundle.BundleName;
            dbBundle.LastModified = DateTime.UtcNow;
            await dbContext.SaveChangesAsync();
            
            // Update local reference
            var localBundle = packBundles.FirstOrDefault(b => b.Id == bundle.Id);
            if (localBundle != null)
            {
                localBundle.BundleName = bundle.BundleName;
            }
            
            _alertMessage = $"Pack bundle name updated successfully.";
            _alertType = "success";
            _showAlert = true;
        }
    }
    catch (Exception ex)
    {
        _alertMessage = $"Error updating pack bundle name: {ex.Message}";
        _alertType = "danger";
        _showAlert = true;
    }
}

private List<DeliveryBundle> GetFilteredDeliveryBundles()
{
    // Only show bundles that have items currently associated with them
    var activeBundleIds = processingItems
        .Where(p => p.DeliveryBundleId.HasValue)
        .Select(p => p.DeliveryBundleId.Value)
        .Distinct()
        .ToHashSet();
    
    var bundles = deliveryBundles
        .Where(b => activeBundleIds.Contains(b.Id))
        .AsEnumerable();
    
    if (!string.IsNullOrWhiteSpace(bundleSearchFilter))
    {
        bundles = bundles.Where(b => 
            b.BundleNumber.Contains(bundleSearchFilter, StringComparison.OrdinalIgnoreCase) ||
            b.BundleName.Contains(bundleSearchFilter, StringComparison.OrdinalIgnoreCase));
    }
    
    return bundles.OrderBy(b => b.BundleNumber).ToList();
}

private List<PackBundle> GetFilteredPackBundles()
{
    // Only show bundles that have items currently associated with them
    var activeBundleIds = processingItems
        .Where(p => p.PackBundleId.HasValue)
        .Select(p => p.PackBundleId.Value)
        .Distinct()
        .ToHashSet();
    
    var bundles = packBundles
        .Where(b => activeBundleIds.Contains(b.Id))
        .AsEnumerable();
    
    if (!string.IsNullOrWhiteSpace(bundleSearchFilter))
    {
        bundles = bundles.Where(b => 
            b.BundleNumber.Contains(bundleSearchFilter, StringComparison.OrdinalIgnoreCase) ||
            b.BundleName.Contains(bundleSearchFilter, StringComparison.OrdinalIgnoreCase));
    }
    
    return bundles.OrderBy(b => b.BundleNumber).ToList();
}

private int GetActiveDeliveryBundleCount()
{
    return deliveryBundles.Count(b => processingItems.Any(p => p.DeliveryBundleId == b.Id));
}

private int GetActivePackBundleCount()
{
    return packBundles.Count(b => processingItems.Any(p => p.PackBundleId == b.Id));
}

private async Task ScrollToBundle(int bundleId, string bundleType)
{
    try
    {
        // Ensure the bundle is expanded
        if (bundleType == "delivery")
        {
            collapsedBundles.Remove(bundleId);
            
            // Find the first item in this bundle
            var firstItem = processingItems.FirstOrDefault(p => p.DeliveryBundleId == bundleId);
            if (firstItem != null)
            {
                await JSRuntime.InvokeVoidAsync("scrollToBundleItem", firstItem.Id);
            }
        }
        else if (bundleType == "pack")
        {
            collapsedPackBundles.Remove(bundleId);
            
            // Find the first item in this pack bundle
            var firstItem = processingItems.FirstOrDefault(p => p.PackBundleId == bundleId);
            if (firstItem != null)
            {
                await JSRuntime.InvokeVoidAsync("scrollToBundleItem", firstItem.Id);
            }
        }
        
        StateHasChanged();
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error scrolling to bundle: {ex.Message}");
    }
}

private int GetActiveDeliveryBundleCount()
{
    var activeBundleIds = processingItems
        .Where(p => p.DeliveryBundleId.HasValue)
        .Select(p => p.DeliveryBundleId.Value)
        .Distinct()
        .ToHashSet();
    
    return deliveryBundles.Count(b => activeBundleIds.Contains(b.Id));
}

private int GetActivePackBundleCount()
{
    var activeBundleIds = processingItems
        .Where(p => p.PackBundleId.HasValue)
        .Select(p => p.PackBundleId.Value)
        .Distinct()
        .ToHashSet();
    
    return packBundles.Count(b => activeBundleIds.Contains(b.Id));
}

// Material mapping management methods
private void ShowChangeMaterialTypeModal(string materialId)
{
    _selectedMaterialIdToChange = materialId;
    _newMaterialType = GetCurrentMaterialType(materialId);
    _showChangeMaterialTypeModal = true;
}

private string GetCurrentMaterialType(string? materialId)
{
    if (string.IsNullOrEmpty(materialId)) return "Misc";
    if (IsBeamMaterial(materialId)) return "Beam";
    if (IsPlateMaterial(materialId)) return "Plate";
    if (IsPurlinMaterial(materialId)) return "Purlin";
    return "Misc";
}

private int GetItemCountForMaterialId(string? materialId)
{
    if (string.IsNullOrEmpty(materialId)) return 0;
    return processingItems.Count(p => p.MaterialId == materialId);
}

private Task ApplyMaterialTypeChange()
{
    if (string.IsNullOrEmpty(_selectedMaterialIdToChange)) return Task.CompletedTask;
    
    try
    {
        // Add custom prefix mapping for this specific material ID
        _customPrefixMappings[_selectedMaterialIdToChange] = _newMaterialType;
        
        // Clear the cache to force re-evaluation
        _materialTypeCache.Clear();
        
        // Update cached counts
        UpdateCachedCounts();
        
        // Refresh the UI
        _showChangeMaterialTypeModal = false;
        StateHasChanged();
        
        _alertMessage = $"Material type for '{_selectedMaterialIdToChange}' changed to {_newMaterialType}";
        _showAlert = true;
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error changing material type: {ex.Message}");
        _alertMessage = $"Error changing material type: {ex.Message}";
        _showAlert = true;
    }
    
    return Task.CompletedTask;
}

private void ShowAddPrefixModal()
{
    _newPrefix = "";
    _newPrefixType = "Misc";
    _showAddPrefixModal = true;
}

private void AddPrefixMapping()
{
    if (string.IsNullOrWhiteSpace(_newPrefix)) return;
    
    var prefix = _newPrefix.ToUpper().Trim();
    _customPrefixMappings[prefix] = _newPrefixType;
    
    // Clear the cache to force re-evaluation
    _materialTypeCache.Clear();
    
    // Update cached counts
    UpdateCachedCounts();
    
    _showAddPrefixModal = false;
    StateHasChanged();
    
    _alertMessage = $"Prefix mapping '{prefix}' → {_newPrefixType} added successfully";
    _showAlert = true;
}

private void RemovePrefixMapping(string prefix)
{
    _customPrefixMappings.Remove(prefix);
    
    // Clear the cache to force re-evaluation
    _materialTypeCache.Clear();
    
    // Update cached counts
    UpdateCachedCounts();
    
    StateHasChanged();
    
    _alertMessage = $"Prefix mapping '{prefix}' removed";
    _showAlert = true;
}

private Dictionary<string, string> GetCurrentPrefixMappings()
{
    // Combine default mappings with custom mappings
    var defaultMappings = new Dictionary<string, string>
    {
        { "B", "Beam" },
        { "C", "Beam" },
        { "PL", "Plate" },
        { "P", "Purlin" },
        { "F", "Fastener" },
        { "M", "Misc" }
    };
    
    // Custom mappings override defaults
    foreach (var custom in _customPrefixMappings)
    {
        defaultMappings[custom.Key] = custom.Value;
    }
    
    return defaultMappings.OrderBy(x => x.Key).ToDictionary(x => x.Key, x => x.Value);
}

// Helper classes for material mapping summary
private class MaterialMappingSummaryData
{
    public Dictionary<string, int> TypeCounts { get; set; } = new();
    public List<MaterialMappingDetail> MaterialMappings { get; set; } = new();
    public HashSet<string> UniqueMaterialIds { get; set; } = new();
    public int ItemsWithMaterialId { get; set; }
    public int ItemsWithoutMaterialId { get; set; }
}

private class MaterialMappingDetail
{
    public string MaterialId { get; set; } = "";
    public string DetectedType { get; set; } = "";
    public int ItemCount { get; set; }
    public decimal TotalWeight { get; set; }
    public string MappingRule { get; set; } = "";
}
}
