@page "/test-dicebear"
@using SteelEstimation.Web.Data
@using SteelEstimation.Web.Services
@inject IDiceBearService DiceBearService

<div class="container mt-4">
    <h3>DiceBear API Test</h3>
    
    <div class="row">
        <div class="col-md-6">
            <h4>Direct URL Test</h4>
            <p>Testing direct URL generation for Bottts avatar:</p>
            
            @{
                var testUrl = DiceBearAvatars.GenerateAvatarUrl("bottts", "test", "svg", new Dictionary<string, object>
                {
                    { "eyes", new[] { "eva" } },
                    { "mouth", new[] { "smile01" } },
                    { "sides", new[] { "antenna01" } },
                    { "primaryColor", new[] { "#0E7490" } },
                    { "backgroundColor", new[] { "#f8f9fa" } }
                });
            }
            
            <p><strong>Generated URL:</strong></p>
            <code style="word-break: break-all;">@testUrl</code>
            
            <div class="mt-3">
                <p><strong>Direct Image:</strong></p>
                <img src="@testUrl" alt="Test Avatar" style="width: 100px; height: 100px; background: #f8f9fa;" />
            </div>
        </div>
        
        <div class="col-md-6">
            <h4>Service Fetch Test</h4>
            <button class="btn btn-primary" @onclick="TestServiceFetch">Test DiceBearService Fetch</button>
            
            @if (!string.IsNullOrEmpty(serviceResult))
            {
                <div class="mt-3">
                    <p><strong>Service Result:</strong></p>
                    @if (serviceResult.StartsWith("data:"))
                    {
                        <p class="text-success">✓ Successfully fetched data URL</p>
                        <img src="@serviceResult" alt="Service Avatar" style="width: 100px; height: 100px; background: #f8f9fa;" />
                    }
                    else
                    {
                        <p class="text-danger">✗ Error: @serviceResult</p>
                    }
                </div>
            }
        </div>
    </div>
    
    <div class="row mt-4">
        <div class="col-12">
            <h4>Test Multiple Options</h4>
            <div class="d-flex gap-3">
                @foreach (var eyeType in new[] { "eva", "robocop", "round", "sensor" })
                {
                    <div class="text-center">
                        <p>@eyeType</p>
                        <img src="@DiceBearAvatars.GenerateAvatarUrl("bottts", "test", "svg", new Dictionary<string, object>
                        {
                            { "eyes", new[] { eyeType } },
                            { "mouth", new[] { "smile01" } },
                            { "sides", new[] { "antenna01" } },
                            { "primaryColor", new[] { "#0E7490" } }
                        })" 
                        alt="@eyeType" 
                        style="width: 80px; height: 80px; background: #f8f9fa;" />
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private string serviceResult = "";
    
    private async Task TestServiceFetch()
    {
        try
        {
            var options = new Dictionary<string, object>
            {
                { "eyes", new[] { "eva" } },
                { "mouth", new[] { "smile01" } },
                { "sides", new[] { "antenna01" } },
                { "primaryColor", new[] { "#0E7490" } },
                { "backgroundColor", new[] { "#f8f9fa" } }
            };
            
            serviceResult = await DiceBearService.GetAvatarDataUrlAsync("bottts", "test", options);
        }
        catch (Exception ex)
        {
            serviceResult = $"Exception: {ex.Message}";
        }
    }
}