@using Microsoft.AspNetCore.Components.Authorization
@using SteelEstimation.Web.Services
@using SteelEstimation.Core.Interfaces
@inject IJSRuntime JSRuntime
@inject SidebarService SidebarService
@inject NavigationManager NavigationManager
@inject IFabOSAuthenticationService AuthService
@inject AuthenticationStateProvider AuthStateProvider
@implements IDisposable

<div class="custom-sidebar">
    <div class="sidebar-logo" @onclick="ToggleModuleSwitcher" style="cursor: pointer;">
        <img src="/images/f_symbol_square_auto.png" alt="Fab O.S" class="logo-img" />
        @if (showModuleSwitcher)
        {
            <div class="module-dropdown-menu">
                @if (availableModules.Any())
                {
                    @foreach (var module in availableModules)
                    {
                        <button class="module-item @(module.Name == currentModule ? "active" : "")" 
                                @onclick:stopPropagation="true"
                                @onclick="() => SwitchModule(module.Name)"
                                disabled="@(!module.IsActive)">
                            <i class="@GetModuleIcon(module.Name) item-icon"></i>
                            <span class="item-name">@module.Name</span>
                            @if (!module.IsActive)
                            {
                                <span class="coming-soon">Soon</span>
                            }
                        </button>
                    }
                }
            </div>
        }
    </div>
    
    <div class="sidebar-navigation">
        <AuthorizeView>
            <Authorized>
                @if (currentModule == "Settings")
                {
                    <!-- Settings Module Navigation -->
                    <div class="nav-section">
                        <div class="nav-section-title">Settings</div>
                        
                        <a href="/settings" class="sidebar-link @(IsActive("/settings") && !IsActive("/settings/business-configuration") ? "active" : "")">
                            <i class="fas fa-home"></i>
                            <span>Settings Home</span>
                        </a>
                        
                        <a href="/settings/business-configuration" class="sidebar-link @(IsActive("/settings/business-configuration") ? "active" : "")">
                            <i class="fas fa-briefcase"></i>
                            <span>Business Configuration</span>
                        </a>
                        
                        <a href="/admin/users" class="sidebar-link @(IsActive("/admin/users") ? "active" : "")">
                            <i class="fas fa-users"></i>
                            <span>User Management</span>
                        </a>
                        
                        <a href="/settings/preferences" class="sidebar-link @(IsActive("/settings/preferences") ? "active" : "")">
                            <i class="fas fa-user-cog"></i>
                            <span>User Preferences</span>
                        </a>
                        
                        <a href="/settings/display" class="sidebar-link @(IsActive("/settings/display") ? "active" : "")">
                            <i class="fas fa-desktop"></i>
                            <span>Display Settings</span>
                        </a>
                    </div>
                    
                }
                else
                {
                    <!-- Default Estimate Module Navigation -->
                    <div class="nav-section">
                        <div class="nav-section-title">Main Navigation</div>
                        
                        <a href="/" class="sidebar-link @(IsActive("/") ? "active" : "")">
                            <i class="fas fa-tachometer-alt"></i>
                            <span>Dashboard</span>
                        </a>
                        
                        <a href="/estimation" class="sidebar-link @(IsActive("/estimation") ? "active" : "")">
                            <i class="fas fa-drafting-compass"></i>
                            <span>Estimations</span>
                        </a>
                        
                        <a href="/customers" class="sidebar-link @(IsActive("/customers") ? "active" : "")">
                            <i class="fas fa-handshake"></i>
                            <span>Customers</span>
                        </a>
                        
                        <a href="/reports" class="sidebar-link @(IsActive("/reports") ? "active" : "")">
                            <i class="fas fa-chart-bar"></i>
                            <span>Reports</span>
                        </a>
                        
                        <a href="/time-analytics" class="sidebar-link @(IsActive("/time-analytics") ? "active" : "")">
                            <i class="fas fa-stopwatch"></i>
                            <span>Time Analytics</span>
                        </a>
                        
                        <a href="/import" class="sidebar-link @(IsActive("/import") ? "active" : "")">
                            <i class="fas fa-exchange-alt"></i>
                            <span>Import/Export</span>
                        </a>
                        
                        <a href="/worksheets/templates" class="sidebar-link @(IsActive("/worksheets") ? "active" : "")">
                            <i class="fas fa-file-alt"></i>
                            <span>Worksheet Templates</span>
                        </a>
                    </div>
                    
                    <AuthorizeView Roles="Administrator" Context="adminContext">
                        <div class="nav-section">
                            <div class="nav-section-title">Administration</div>
                            
                            <a href="/admin/settings" class="sidebar-link @(IsActive("/admin/settings") ? "active" : "")">
                                <i class="fas fa-cog"></i>
                                <span>Settings</span>
                            </a>
                            
                            <a href="/admin/users" class="sidebar-link @(IsActive("/admin/users") ? "active" : "")">
                                <i class="fas fa-users"></i>
                                <span>Users</span>
                            </a>
                        </div>
                    </AuthorizeView>
                }
                
                <div class="nav-section">
                    <div class="nav-section-title">User</div>
                    
                    <a href="/profile" class="sidebar-link @(IsActive("/profile") ? "active" : "")">
                        <i class="fas fa-user-circle"></i>
                        <span>My Profile</span>
                    </a>
                    
                    <a href="/notifications" class="sidebar-link @(IsActive("/notifications") ? "active" : "")">
                        <i class="fas fa-bell"></i>
                        <span>Notifications</span>
                    </a>
                    
                    <a href="/settings/preferences" class="sidebar-link @(IsActive("/settings/preferences") ? "active" : "")">
                        <i class="fas fa-user-cog"></i>
                        <span>Preferences</span>
                    </a>
                    
                    <div class="sidebar-divider"></div>
                    
                    <a href="/Account/Logout" class="sidebar-link logout-link">
                        <i class="fas fa-power-off"></i>
                        <span>Logout</span>
                    </a>
                </div>
            </Authorized>
            <NotAuthorized>
                <div class="nav-section">
                    <a href="/" class="sidebar-link @(IsActive("/") ? "active" : "")">
                        <i class="fas fa-home"></i>
                        <span>Home</span>
                    </a>
                    
                    <a href="/Account/Login" class="sidebar-link">
                        <i class="fas fa-sign-in-alt"></i>
                        <span>Sign In</span>
                    </a>
                </div>
            </NotAuthorized>
        </AuthorizeView>
    </div>
</div>

@code {
    private class Module
    {
        public string Name { get; set; } = "";
        public string Description { get; set; } = "";
        public bool IsActive { get; set; }
        public string Path { get; set; } = "";
    }

    private List<Module> availableModules = new();
    private string currentModule = "Estimate";
    private bool showModuleSwitcher = false;
    private int? currentUserId;

    protected override async Task OnInitializedAsync()
    {
        SidebarService.OnChange += StateHasChanged;
        NavigationManager.LocationChanged += OnLocationChanged;
        await LoadUserModules();
        
        // Set current module based on URL
        UpdateCurrentModule();
    }

    private async Task LoadUserModules()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated == true)
        {
            var userIdClaim = authState.User.FindFirst("UserId")?.Value 
                            ?? authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
            
            if (int.TryParse(userIdClaim, out var userId))
            {
                currentUserId = userId;
                var userProducts = await AuthService.GetUserProductsAsync(userId);
                
                // Define all modules with their metadata
                var allModules = new List<Module>
                {
                    new Module 
                    { 
                        Name = "Estimate", 
                        Description = "Fabrication estimation",
                        IsActive = userProducts.Contains("Estimate"),
                        Path = "/"
                    },
                    new Module 
                    { 
                        Name = "Trace", 
                        Description = "PDF take-off",
                        IsActive = userProducts.Contains("Trace"),
                        Path = "/trace"
                    },
                    new Module 
                    { 
                        Name = "Fabmate", 
                        Description = "Fabrication management",
                        IsActive = userProducts.Contains("Fabmate"),
                        Path = "/fabmate"
                    },
                    new Module 
                    { 
                        Name = "QDocs", 
                        Description = "Quality management",
                        IsActive = userProducts.Contains("QDocs"),
                        Path = "/qdocs"
                    },
                    new Module 
                    { 
                        Name = "Settings", 
                        Description = "Configuration",
                        IsActive = true,
                        Path = "/settings"
                    }
                };
                
                availableModules = allModules;
            }
        }
    }

    private void ToggleModuleSwitcher()
    {
        showModuleSwitcher = !showModuleSwitcher;
    }

    private async Task SwitchModule(string moduleName)
    {
        if (moduleName == currentModule)
        {
            showModuleSwitcher = false;
            return;
        }

        var module = availableModules.FirstOrDefault(m => m.Name == moduleName);
        if (module != null && module.IsActive)
        {
            currentModule = moduleName;
            showModuleSwitcher = false;
            
            // Store current module in session storage
            await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "currentModule", moduleName);
            
            // Navigate to module home
            NavigationManager.NavigateTo(module.Path);
        }
    }

    private string GetModuleIcon(string moduleName)
    {
        return moduleName switch
        {
            "Estimate" => "fas fa-calculator",
            "Trace" => "fas fa-drafting-compass",
            "Fabmate" => "fas fa-industry",
            "QDocs" => "fas fa-clipboard-check",
            "Settings" => "fas fa-cog",
            _ => "fas fa-cube"
        };
    }
    
    private bool IsActive(string path)
    {
        var currentPath = NavigationManager.Uri.Replace(NavigationManager.BaseUri, "/");
        if (path == "/")
            return currentPath == "/" || currentPath == "";
        return currentPath.StartsWith(path);
    }
    
    private void OnLocationChanged(object? sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    {
        UpdateCurrentModule();
        InvokeAsync(StateHasChanged);
    }
    
    private void UpdateCurrentModule()
    {
        var uri = new Uri(NavigationManager.Uri);
        var path = uri.AbsolutePath.ToLower();
        
        if (path.StartsWith("/trace"))
            currentModule = "Trace";
        else if (path.StartsWith("/fabmate"))
            currentModule = "Fabmate";
        else if (path.StartsWith("/qdocs"))
            currentModule = "QDocs";
        else if (path.StartsWith("/settings") || path.StartsWith("/admin/settings") || path.StartsWith("/admin/users"))
            currentModule = "Settings";
        else
            currentModule = "Estimate";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Close dropdown when clicking outside
            await JSRuntime.InvokeVoidAsync("eval", @"
                document.addEventListener('click', function(event) {
                    const logoArea = document.querySelector('.sidebar-logo');
                    if (logoArea && !logoArea.contains(event.target)) {
                        const menu = document.querySelector('.module-dropdown-menu');
                        if (menu) {
                            // Click outside - close the dropdown by clicking the logo again
                            logoArea.click();
                        }
                    }
                });
            ");
        }
    }
    
    public void Dispose()
    {
        SidebarService.OnChange -= StateHasChanged;
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}