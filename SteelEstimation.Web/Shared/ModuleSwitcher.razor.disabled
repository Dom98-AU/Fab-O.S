@using Microsoft.AspNetCore.Components.Authorization
@using SteelEstimation.Core.Interfaces
@inject IFabOSAuthenticationService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthStateProvider
@implements IDisposable

<div class="module-switcher">
    <AuthorizeView>
        <Authorized>
            @if (availableModules.Any())
            {
                <div class="module-dropdown">
                    <button class="module-button" @onclick="ToggleDropdown">
                        <div class="module-info">
                            <i class="@GetModuleIcon(currentModule) module-icon"></i>
                            <span class="module-name">@currentModule</span>
                        </div>
                        <i class="fas fa-chevron-down dropdown-icon @(isDropdownOpen ? "rotate" : "")"></i>
                    </button>
                    
                    @if (isDropdownOpen)
                    {
                        <div class="module-menu">
                            @foreach (var module in availableModules)
                            {
                                <button class="module-item @(module.Name == currentModule ? "active" : "")" 
                                        @onclick="() => SwitchModule(module.Name)"
                                        disabled="@(!module.IsActive)">
                                    <i class="@GetModuleIcon(module.Name) item-icon"></i>
                                    <div class="item-info">
                                        <span class="item-name">@module.Name</span>
                                        <span class="item-description">@module.Description</span>
                                    </div>
                                    @if (!module.IsActive)
                                    {
                                        <span class="coming-soon">Coming Soon</span>
                                    }
                                </button>
                            }
                        </div>
                    }
                </div>
            }
        </Authorized>
    </AuthorizeView>
</div>

@code {
    private class Module
    {
        public string Name { get; set; } = "";
        public string Description { get; set; } = "";
        public bool IsActive { get; set; }
        public string Path { get; set; } = "";
    }

    private List<Module> availableModules = new();
    private string currentModule = "Estimate";
    private bool isDropdownOpen = false;
    private int? currentUserId;

    protected override async Task OnInitializedAsync()
    {
        await LoadUserModules();
        
        // Set current module based on URL
        var uri = new Uri(Navigation.Uri);
        var path = uri.AbsolutePath.ToLower();
        
        if (path.StartsWith("/trace"))
            currentModule = "Trace";
        else if (path.StartsWith("/fabmate"))
            currentModule = "Fabmate";
        else if (path.StartsWith("/qdocs"))
            currentModule = "QDocs";
        else
            currentModule = "Estimate";
    }

    private async Task LoadUserModules()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated == true)
        {
            var userIdClaim = authState.User.FindFirst("UserId")?.Value 
                            ?? authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
            
            if (int.TryParse(userIdClaim, out var userId))
            {
                currentUserId = userId;
                var userProducts = await AuthService.GetUserProductsAsync(userId);
                
                // Define all modules with their metadata
                var allModules = new List<Module>
                {
                    new Module 
                    { 
                        Name = "Estimate", 
                        Description = "Fabrication estimation system",
                        IsActive = userProducts.Contains("Estimate"),
                        Path = "/"
                    },
                    new Module 
                    { 
                        Name = "Trace", 
                        Description = "PDF-based take-off system",
                        IsActive = userProducts.Contains("Trace"),
                        Path = "/trace"
                    },
                    new Module 
                    { 
                        Name = "Fabmate", 
                        Description = "Fabrication management system",
                        IsActive = userProducts.Contains("Fabmate"),
                        Path = "/fabmate"
                    },
                    new Module 
                    { 
                        Name = "QDocs", 
                        Description = "Quality management system",
                        IsActive = userProducts.Contains("QDocs"),
                        Path = "/qdocs"
                    },
                    new Module 
                    { 
                        Name = "Settings", 
                        Description = "System configuration",
                        IsActive = true, // Always available
                        Path = "/admin/settings"
                    }
                };
                
                // Show all modules but only active ones are clickable
                availableModules = allModules;
            }
        }
    }

    private void ToggleDropdown()
    {
        isDropdownOpen = !isDropdownOpen;
    }

    private async Task SwitchModule(string moduleName)
    {
        if (moduleName == currentModule)
        {
            isDropdownOpen = false;
            return;
        }

        var module = availableModules.FirstOrDefault(m => m.Name == moduleName);
        if (module != null && module.IsActive)
        {
            currentModule = moduleName;
            isDropdownOpen = false;
            
            // Store current module in session storage
            await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "currentModule", moduleName);
            
            // Navigate to module home
            Navigation.NavigateTo(module.Path);
        }
    }

    private string GetModuleIcon(string moduleName)
    {
        return moduleName switch
        {
            "Estimate" => "fas fa-calculator",
            "Trace" => "fas fa-drafting-compass",
            "Fabmate" => "fas fa-industry",
            "QDocs" => "fas fa-clipboard-check",
            "Settings" => "fas fa-cog",
            _ => "fas fa-cube"
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Close dropdown when clicking outside
            await JSRuntime.InvokeVoidAsync("eval", @"
                document.addEventListener('click', function(event) {
                    const moduleSwitcher = document.querySelector('.module-switcher');
                    if (moduleSwitcher && !moduleSwitcher.contains(event.target)) {
                        const button = moduleSwitcher.querySelector('.module-button');
                        const menu = moduleSwitcher.querySelector('.module-menu');
                        if (menu) {
                            // Trigger Blazor to close the dropdown
                            button.click();
                        }
                    }
                });
            ");
        }
    }

    public void Dispose()
    {
        // Cleanup if needed
    }
}

<style>
    .module-switcher {
        position: relative;
        padding: 1rem;
        border-bottom: 1px solid #e9ecef;
    }

    .module-dropdown {
        position: relative;
    }

    .module-button {
        display: flex;
        align-items: center;
        justify-content: space-between;
        gap: 0.75rem;
        padding: 0.75rem 1rem;
        background: #f8f9fa;
        border: 1px solid #dee2e6;
        border-radius: 8px;
        color: #495057;
        cursor: pointer;
        transition: all 0.2s ease;
        width: 100%;
        font-size: 0.875rem;
    }

    .module-button:hover {
        background: #e9ecef;
        border-color: #adb5bd;
    }

    .module-info {
        display: flex;
        align-items: center;
        gap: 0.75rem;
        flex: 1;
    }

    .module-icon {
        font-size: 1rem;
        color: #0d1a80;
    }

    .module-name {
        font-size: 0.875rem;
        font-weight: 600;
        color: #0d1a80;
    }

    .dropdown-icon {
        font-size: 0.75rem;
        transition: transform 0.2s ease;
        color: #6c757d;
    }

    .dropdown-icon.rotate {
        transform: rotate(180deg);
    }

    .module-menu {
        position: absolute;
        top: calc(100% + 0.5rem);
        left: 0;
        right: 0;
        background: white;
        border-radius: 8px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
        overflow: hidden;
        z-index: 1000;
        min-width: 280px;
    }

    .module-item {
        display: flex;
        align-items: center;
        gap: 1rem;
        padding: 0.875rem 1rem;
        width: 100%;
        border: none;
        background: none;
        cursor: pointer;
        transition: background 0.2s ease;
        position: relative;
    }

    .module-item:hover:not(:disabled) {
        background: #f5f5f5;
    }

    .module-item.active {
        background: #e3f2fd;
    }

    .module-item:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }

    .item-icon {
        font-size: 1.25rem;
        color: #666;
        width: 24px;
        text-align: center;
    }

    .module-item.active .item-icon {
        color: #1976d2;
    }

    .item-info {
        display: flex;
        flex-direction: column;
        align-items: flex-start;
        flex: 1;
    }

    .item-name {
        font-weight: 600;
        color: #333;
        font-size: 0.875rem;
    }

    .item-description {
        font-size: 0.75rem;
        color: #666;
        margin-top: 0.125rem;
    }

    .coming-soon {
        position: absolute;
        right: 1rem;
        font-size: 0.75rem;
        color: #ff9800;
        font-weight: 500;
        background: #fff3e0;
        padding: 0.25rem 0.5rem;
        border-radius: 4px;
    }

    /* Dark mode support */
    @@media (prefers-color-scheme: dark) {
        .module-menu {
            background: #2a2a2a;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.5);
        }

        .module-item:hover:not(:disabled) {
            background: #3a3a3a;
        }

        .module-item.active {
            background: #1a237e;
        }

        .item-name {
            color: #f5f5f5;
        }

        .item-description {
            color: #aaa;
        }

        .item-icon {
            color: #999;
        }

        .module-item.active .item-icon {
            color: #64b5f6;
        }
    }
</style>